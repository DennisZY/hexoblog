<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Netlify</title>
      <link href="/2019/09/04/netlify-blog/"/>
      <url>/2019/09/04/netlify-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><ul><li>想折腾一下</li><li>githubpage还是留给项目页面用吧<del>(你哪有什么项目)</del></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>登录注册netlify</li><li>绑定你的github的仓库</li></ol><p>然后它自己会部署，部署好之后，你之后就会有一个<code>.netlify.com</code>的网址，你可以通过这个访问你hexo生成的网站，这个域名会很丑，难以记忆，最好自己绑个域名，会好看许多。</p><p>所以这个方法指建议有自己域名的人使用，有时候还感觉会反向加速，速度不如githubpage。</p><p>疯起来还真的啥都折腾。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> netlify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using Accesser</title>
      <link href="/2019/09/02/using-accesser/"/>
      <url>/2019/09/02/using-accesser/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Accesser是一个解决SNI RST导致维基百科、Pixiv等站点无法访问的工具</p></blockquote><p><a href="https://github.com/URenko/Accesser" target="_blank" rel="noopener">官方repo</a></p><h3 id="SNI"><a href="#SNI" class="headerlink" title="SNI"></a>SNI</h3><p>Server Name Indication(SNI)是一个TLS的一个扩展，可以让一个ip拥有多个证书，也就可以让一个ip内可以架设多个通过https访问的网站。这个功能看起来与虚拟主机十分类似，但是对于https来说，原始的SNI扩展是没对这个段进行加密的，那么就是说可以被中间人所窃听的。</p><p>GFW也是利用了这个点封禁了很多网站，有更加狠的封禁就是直接封禁ip，详情看谷歌等等。</p><h3 id="Accesser原理"><a href="#Accesser原理" class="headerlink" title="Accesser原理"></a>Accesser原理</h3><p>不清楚，py代码看得不太懂。就不秀智商下限了</p><h3 id="Accesser使用"><a href="#Accesser使用" class="headerlink" title="Accesser使用"></a>Accesser使用</h3><p>我只能说我在manjaro下的使用了，其他linux应该也差不多的</p><h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/URenko/Accesser.git</span><br></pre></td></tr></table></figure><h4 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h4><h4 id="安装pip3"><a href="#安装pip3" class="headerlink" title="安装pip3"></a>安装pip3</h4><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyopenssl tld dnspython tornado</span><br></pre></td></tr></table></figure><p>后面加<code>--user</code>就只为自己这个用户安装，否则就全局安装，哪个用户都可以用，windows可以忽略，况且windows能直接下载<code>.exe</code>文件直接跑</p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 accesser.py</span><br></pre></td></tr></table></figure><h3 id="添加能通过Accesser反代的网站"><a href="#添加能通过Accesser反代的网站" class="headerlink" title="添加能通过Accesser反代的网站"></a>添加能通过Accesser反代的网站</h3><p>在<code>./template/pac</code>里面修改<code>var domains</code>的列表即可</p>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Accesser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using hexo</title>
      <link href="/2019/08/26/hexo-blog/"/>
      <url>/2019/08/26/hexo-blog/</url>
      
        <content type="html"><![CDATA[<h3 id="初步认识"><a href="#初步认识" class="headerlink" title="初步认识"></a>初步认识</h3><p>hexo是一个博客框架，通过node.js将你的markdown文件转换为一片博文，搭配风格各异的主题来构建你自己的静态博客。</p><blockquote><p><a href="https://hexo.io" target="_blank" rel="noopener">hexo官网</a></p></blockquote><h4 id="入门配置"><a href="#入门配置" class="headerlink" title="入门配置"></a>入门配置</h4><h4 id="安装hexo-cli"><a href="#安装hexo-cli" class="headerlink" title="安装hexo-cli"></a>安装hexo-cli</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h4 id="初始化hexo目录"><a href="#初始化hexo目录" class="headerlink" title="初始化hexo目录"></a>初始化hexo目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>这里可以在<code>npm install</code>前修改hexo目录下的package.json，添加你所需要的依赖，或者<code>npm install</code>之后再执行下面的操作。</p><p>初始化后目录结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>scaffolds 文件夹保存着你的模板文件，你可以通过<code>hexo new [layout] &lt;title&gt;</code>来利用模板文件来生成你需要的markdown文件，详细请看<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">官网文档</a> </p><p>例如我用<code>hexo new &quot;title&quot;</code>来生成一个即将发表的文件。</p><h4 id="安装部署器并部署到github"><a href="#安装部署器并部署到github" class="headerlink" title="安装部署器并部署到github"></a>安装部署器并部署到github</h4><h5 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h5 id="在-config-yml设置"><a href="#在-config-yml设置" class="headerlink" title="在_config.yml设置"></a>在<code>_config.yml</code>设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: ##你的github仓库</span><br><span class="line">  branch: master ##你github仓库做githubpage的分支</span><br><span class="line">  message: ##缺省时，commit的message为部署的时间</span><br></pre></td></tr></table></figure><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p><code>hexo g</code>可以生成整个网站，保存在public文件夹中</p><p><code>hexo d</code>可以部署网站到远端，当然可以部署到github</p><p><code>hexo g -d</code>和<code>hexo d -g</code>都能做到生成后并部署到远端。</p><h3 id="进阶选项-可选"><a href="#进阶选项-可选" class="headerlink" title="进阶选项(可选)"></a>进阶选项(可选)</h3><h4 id="安装feed插件"><a href="#安装feed插件" class="headerlink" title="安装feed插件"></a>安装feed插件</h4><h5 id="安装命令-1"><a href="#安装命令-1" class="headerlink" title="安装命令"></a>安装命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h5 id="在-config-yml设置-1"><a href="#在-config-yml设置-1" class="headerlink" title="在_config.yml设置"></a>在<code>_config.yml</code>设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content: true</span><br><span class="line">  content_limit: 20</span><br><span class="line">  content_limit_delim: &apos; &apos;</span><br><span class="line">  order_by: -date</span><br></pre></td></tr></table></figure><p><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">feed详细设置</a></p><h4 id="获得置顶功能"><a href="#获得置顶功能" class="headerlink" title="获得置顶功能"></a>获得置顶功能</h4><h5 id="安装命令-2"><a href="#安装命令-2" class="headerlink" title="安装命令"></a>安装命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><h5 id="在-config-yml设置-2"><a href="#在-config-yml设置-2" class="headerlink" title="在_config.yml设置"></a>在<code>_config.yml</code>设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  path: &apos;&apos;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br></pre></td></tr></table></figure><p><a href="https://github.com/netcan/hexo-generator-index-pin-top" target="_blank" rel="noopener">置顶插件详细设置</a></p><p>如果某篇文章需要置顶，需要在文章的<code>Front-matter</code>中添加<code>top: true</code>，否则<code>top: false</code></p><h4 id="获得搜索功能"><a href="#获得搜索功能" class="headerlink" title="获得搜索功能"></a>获得搜索功能</h4><h5 id="安装命令-3"><a href="#安装命令-3" class="headerlink" title="安装命令"></a>安装命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h5 id="在-config-yml设置-3"><a href="#在-config-yml设置-3" class="headerlink" title="在_config.yml设置"></a>在<code>_config.yml</code>设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure><p><a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">搜索功能详细设置</a></p><h4 id="生成站点地图"><a href="#生成站点地图" class="headerlink" title="生成站点地图"></a>生成站点地图</h4><p>可以提交给搜索引擎，加快搜索引擎收录</p><h5 id="安装命令-4"><a href="#安装命令-4" class="headerlink" title="安装命令"></a>安装命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h5 id="在-config-yml设置-4"><a href="#在-config-yml设置-4" class="headerlink" title="在_config.yml设置"></a>在<code>_config.yml</code>设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">    template:</span><br></pre></td></tr></table></figure><p><a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">站点地图插件详细设置</a></p><h4 id="计算文章长度和估算阅读时间"><a href="#计算文章长度和估算阅读时间" class="headerlink" title="计算文章长度和估算阅读时间"></a>计算文章长度和估算阅读时间</h4><h5 id="安装命令-5"><a href="#安装命令-5" class="headerlink" title="安装命令"></a>安装命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><h5 id="在-config-yml设置-5"><a href="#在-config-yml设置-5" class="headerlink" title="在_config.yml设置"></a>在<code>_config.yml</code>设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: true</span><br></pre></td></tr></table></figure><p><a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">插件详细配置</a></p><h3 id="主题NexT配置"><a href="#主题NexT配置" class="headerlink" title="主题NexT配置"></a>主题NexT配置</h3><p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">官方repo</a></p><h4 id="加载条安装"><a href="#加载条安装" class="headerlink" title="加载条安装"></a>加载条安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-pace source/lib/pace</span><br></pre></td></tr></table></figure><h4 id="炫酷的canvas-nest"><a href="#炫酷的canvas-nest" class="headerlink" title="炫酷的canvas-nest"></a>炫酷的canvas-nest</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></table></figure><p>克隆之后，还要在NexT的配置文件里进行对应的配置，配置文件中已经说明每个功能的依赖和信息，更多的请根据NexT内的<code>_config.yml</code>进行配置</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>这不是教程，这个只是记录我自己是怎么配置的，更多炫酷的配置需要去发掘，比如魔改theme内的.swig文件等等。</p><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><p>我的<code>post.md</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">copyright: right</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">mathjax: true</span><br><span class="line">top: false</span><br><span class="line">categories:</span><br><span class="line">description:</span><br><span class="line">tags:</span><br><span class="line">id: </span><br><span class="line">layout: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github page </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebUI-Aria2</title>
      <link href="/2019/08/18/webui-aria2/"/>
      <url>/2019/08/18/webui-aria2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/ziahamza/webui-aria2" target="_blank" rel="noopener">github repo</a></p><h3 id="前端用法"><a href="#前端用法" class="headerlink" title="前端用法"></a>前端用法</h3><p>官方给出的用法</p><ul><li>下载整个仓库，然后从 <code>docs</code> 文件夹中打开index.html</li><li>通过访问 <a href="https://ziahamza.github.io/webui-aria2" target="_blank" rel="noopener">https://ziahamza.github.io/webui-aria2</a> 来下载文件</li><li>在项目文件夹内通过<code>node node-server.js</code>来创建一个服务</li></ul><h3 id="后端用法"><a href="#后端用法" class="headerlink" title="后端用法"></a>后端用法</h3><p>通过以下命令启动aria2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c --enable-rpc --rpc-listen-all</span><br></pre></td></tr></table></figure><p>因为默认端口为6800，如果是部署在云端服务器的话，可以通过配置文件更改端口，或者在服务器商开启特定端口，使得服务正常使用。</p><h3 id="将aria2设置为开机自启"><a href="#将aria2设置为开机自启" class="headerlink" title="将aria2设置为开机自启"></a>将aria2设置为开机自启</h3><p>创建/修改文件<code>/lib/systemd/system/aria2.service</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description= aria2</span><br><span class="line">After=network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/aria2c --conf-path=***************</span><br><span class="line">ExecStop=/bin/kill $MAINPID</span><br><span class="line">RestartSec=always</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable aria2.service</span><br><span class="line">systemctl start aria2.service</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果你是通过https访问的话，aria2的rpc服务可能也需要开启SSL/TLS加密，我是直接用网站的https的证书就ojbk了。</p><h3 id="aria2-bt下载加速"><a href="#aria2-bt下载加速" class="headerlink" title="aria2 bt下载加速"></a>aria2 bt下载加速</h3><p>在<code>aria2.conf</code>的目录内运行这个sh文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">killall aria2c</span><br><span class="line">list=`wget -qO- https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt|awk NF|sed &quot;:a;N;s/\n/,/g;ta&quot;`</span><br><span class="line">if [ -z &quot;`grep &quot;bt-tracker&quot; ./aria2.conf`&quot; ]; then</span><br><span class="line">    sed -i &apos;$a bt-tracker=&apos;$&#123;list&#125; /root/.aria2/aria2.conf</span><br><span class="line">    echo add......</span><br><span class="line">else</span><br><span class="line">    sed -i &quot;s@bt-tracker.*@bt-tracker=$list@g&quot; ./aria2.conf</span><br><span class="line">    echo update......</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>如果无法运行请给它改为可运行文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./trackers-list-aria2.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> aria2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛顿迭代法</title>
      <link href="/2019/08/16/Newton&#39;s-method/"/>
      <url>/2019/08/16/Newton&#39;s-method/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么会牛顿迭代法"><a href="#为什么会牛顿迭代法" class="headerlink" title="为什么会牛顿迭代法"></a>为什么会牛顿迭代法</h3><p>伽罗瓦用群论证明了高于四次的方程不存在求根公式，那么需要一种快速求方程根的做法了。</p><p>牛顿迭代法是求方程根的重要方法之一，其最大优点是在方程的单根附近具有<a href="[当我们谈论收敛速度时，我们都在谈什么？](https://zhuanlan.zhihu.com/p/27644403)">平方收敛</a>，比二分求根快了很door。</p><h3 id="牛顿迭代的原理"><a href="#牛顿迭代的原理" class="headerlink" title="牛顿迭代的原理"></a>牛顿迭代的原理</h3><p><del>随便</del>选取一个点，做函数的切线，你可以计算出这条切线与x轴上的交点的x坐标，显然是要靠近根了，做多几遍就会越靠近了。</p><h3 id="牛顿迭代的公式"><a href="#牛顿迭代的公式" class="headerlink" title="牛顿迭代的公式"></a>牛顿迭代的公式</h3><p>上面的描述，先选取一个$x_0$，做切线找与x轴上的交点，$x_1=x_0-\frac{f(x_0)}{f’(x_0)}$，也就是按照$x_i=x_{i-1}-\frac{f(x_{i-1})}{f’(x_{i-1})}$一直迭代，可以按照精度迭代，也可以自定数量迭代。</p><p><img src="https://i.loli.net/2019/08/29/W3F1X7KC5tQHos8.gif" alt="NewtonIteration.gif"></p><h3 id="牛顿迭代适用范围"><a href="#牛顿迭代适用范围" class="headerlink" title="牛顿迭代适用范围"></a>牛顿迭代适用范围</h3><ul><li>只能用来求方程的一个根，可导即可。</li><li>多根函数可能会出大锅，而且对初始值有要求</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="开平方"><a href="#开平方" class="headerlink" title="开平方"></a>开平方</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans=x*<span class="number">0.5</span>;</span><br><span class="line">   <span class="keyword">while</span> (<span class="built_in">abs</span>(ans*ans-x)&gt;<span class="number">1e-7</span>) &#123;</span><br><span class="line">    ans-=(ans*ans-x)/(<span class="number">2</span>*ans);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> x0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>对于$e^b=x$，我们需要求x时，你可以设函数为$y=x-e^b$，但你先不正要求这个$e^b$吗？所以你需要把函数设成$y=ln(x)-b$来做牛顿迭代。</p><p>设函数为$y=\ln(x)-b$，求得根时，我们就知道$e^x$的值。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Privacy</title>
      <link href="/2019/08/07/privacy/"/>
      <url>/2019/08/07/privacy/</url>
      
        <content type="html"><![CDATA[<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS加密，使用DoH加密域名解析请求。</p><p>使用Cloudflare的公共DNS，不让DNS记录你的域名解析内容。</p><h3 id="Search-Engine"><a href="#Search-Engine" class="headerlink" title="Search Engine"></a>Search Engine</h3><p>使用<a href="https://duckduckgo.com/" target="_blank" rel="noopener">DuckDuckGo</a>或者<a href="https://mijisou.com/" target="_blank" rel="noopener">秘迹搜索</a>，进行搜索，不记录你的搜索记录。</p><h3 id="Password"><a href="#Password" class="headerlink" title="Password"></a>Password</h3><p>少依赖电子程序或者电子文档去记录密码，可以利用电子程序去生成随机密码，尽量用纸笔记录帐号密码，这有利于你知道你在哪些网站注册过，销号容易，换手机号码也方便。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> privacy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>墙裂推荐Firefox</title>
      <link href="/2019/08/07/recommend-using-firefox/"/>
      <url>/2019/08/07/recommend-using-firefox/</url>
      
        <content type="html"><![CDATA[<p>Firefox的速度还是比不上chrome，这没得说，内存比chrome占用少，但是Firefox在隐私这方面比chrome好，而且现在能设置DoH了，Firefox68能在网络设置界面设置DoH了，用着还算舒服，还有不用神奇的上网方式就能用官方的方式同步标签、装插件，很舒服。<del>github上有破解版的插件装在chrome上就能访问google，使用官方的同步。</del></p><p>chrome是基于chromium内核的浏览器，而且现在越来越多浏览器使用chromium内核，基于chromium内核的浏览器的份额越来越大，巨硬的edge也开始用chromium内核了，一家独大的话，标准的制定就很难起作用了，因为只需要对chromium适配就ojbk，chromium成为了标准，万维网联盟(W3C)会被架空了？导致更多人去使用基于chromium内核的浏览器，第二个IE?而且google公司就能拥有更多的用户，更多用户数据，隐私问题lei了，毕竟google是个广告公司，通过打标签给你推送特定的广告自己能获得更多的收入，也是个正常的行为，毕竟谷歌大部分的收入都来自广告。</p><p><del>你甚至可以使用Tor-browser</del></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> privacy </tag>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS-over-HTTPS</title>
      <link href="/2019/08/07/dns-over-https/"/>
      <url>/2019/08/07/dns-over-https/</url>
      
        <content type="html"><![CDATA[<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>一个帮我们将记住对应域名所指向IP地址的服务器，的确很方便，我们不用去记住一些晦涩难懂的IP地址。</p><h2 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h2><p>通过劫持DNS来修改某些域名的解析记录，从而使访问该域名的人得到错误的IP，导致我们无法访问一些网站，当然有些网站不应该由DNS背锅，那是有别的一些原因导致的。</p><h2 id="DNS污染"><a href="#DNS污染" class="headerlink" title="DNS污染"></a>DNS污染</h2><p>让用户得到虚拟目标主机的IP，因为DNS没有认证机制，通常基于UDP，速度的确快，但是会被篡改。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="解决DNS劫持"><a href="#解决DNS劫持" class="headerlink" title="解决DNS劫持"></a>解决DNS劫持</h3><p>将DNS换成公共DNS就ojbk。</p><h3 id="解决DNS污染"><a href="#解决DNS污染" class="headerlink" title="解决DNS污染"></a>解决DNS污染</h3><p>改Hosts、加密DNS请求。</p><h3 id="如何加密DNS请求呢？"><a href="#如何加密DNS请求呢？" class="headerlink" title="如何加密DNS请求呢？"></a>如何加密DNS请求呢？</h3><h4 id="dnscrypt"><a href="#dnscrypt" class="headerlink" title="dnscrypt"></a><a href="https://dnscrypt.info/" target="_blank" rel="noopener">dnscrypt</a></h4><p>我没用过，不会用QAQ。</p><h4 id="DoT"><a href="#DoT" class="headerlink" title="DoT"></a>DoT</h4><p>DNS-over-TLS，TLS(Transport Layer Security)，通过853端口，但是有个很神奇的东西，当你使用853端口的时候，就有人知道你在用DoT，当然，你也可以改端口号。</p><h4 id="DoH"><a href="#DoH" class="headerlink" title="DoH"></a>DoH</h4><p>DNS-over-HTTPS，通过443端口，与HTTPS同端口(废话)，我正在使用，用了之后能访问ddg，dde(deepin desktop environment)+ddg更配噢，差个ddf♂(雾</p><h2 id="公共DNS"><a href="#公共DNS" class="headerlink" title="公共DNS"></a>公共DNS</h2><table><thead><tr><th>Name</th><th>DNS1</th><th align="left">DNS2</th></tr></thead><tbody><tr><td>Cloudflare DNS</td><td>1.1.1.1</td><td align="left">1.0.0.1</td></tr><tr><td>ALIDNS</td><td>223.5.5.5</td><td align="left">223.6.6.6</td></tr><tr><td>google DNS</td><td>8.8.8.8</td><td align="left">8.8.4.4</td></tr></tbody></table><p>Cloudflare DNS是Cloudflare与APNIC合作新推出的公共DNS。</p><blockquote><p>原来，Cloudflare 并不拥有 1.1.1.1 和 1.0.0.1 这两个 IP，而是从 APNIC 那里得到了使用权。APNIC  全称 Asia-Pacific Network Information  Centre，亚太网络信息中心，是世界五大区域互联网注册机构之一。它管理亚洲以及太平洋地区的互联网资源，其中我们最熟悉的就是 IP  地址了。APNIC 作为分配 IP 地址的官方，持有几个靓号自然是合情合理了。</p><p>靓号虽好，可不是谁都能用的。如果不是数字简单，方便记忆，1.1.1.1  其实只是几十亿 IPv4 中的普通一个。它也不属于标准规定的保留地址（配置过路由器的同学，多少遇到过 192.168.x.x  这样的为内网或其他用途保留的号段）。但就是因为它太好记，并且一直没有被使用，所以很多网络运维测试需要随便填一个 IP 时就顺手填了个  1.1.1.1。甚至有些黑客也用 1.1.1.1 来测试其僵尸网络。于是，1.1.1.1  就被来自世界各地的垃圾信息洪流淹没了，几乎是一场永不停息的 DDoS 攻击。</p><p>这个时候，主角 Cloudflare  登场了。Cloudflare 的主营业务就是网络安全，应对 DDoS 更是看家本领。所以他们主动找上了  APNIC，提出了自己建立一个隐私优先、速度极致的 DNS 服务的设想。APNIC 十分感动，同意了 Cloudflare  的提议。从此，Cloudflare 要用自己的网络来承受原本指向 1.1.1.1 的“垃圾”信息，也换得了在靓号上运行 DNS  解析服务器的机会。</p><p>来自<a href="https://zhuanlan.zhihu.com/p/36169153" target="_blank" rel="noopener">用上 ip 靓号1.1.1.1，Cloudflare 花了多少钱？</a></p><p>This work is licensed under a <a href="http://creativecommons.org/licenses/by/4.0/" target="_blank" rel="noopener">Creative Commons Attribution 4.0 International License</a>.</p></blockquote><h2 id="如何在Firefox上使用DoH"><a href="#如何在Firefox上使用DoH" class="headerlink" title="如何在Firefox上使用DoH"></a>如何在Firefox上使用DoH</h2><ol><li>在Firefox的地址栏输入 <code>about:config</code>，并确认了解此风险，不了解就不使用DoH呗</li><li>搜索<code>network.trr</code></li><li>将<code>network.trr.mode</code>修改为2，意为首选DoH，实在不行就用平常的DNS查询方法</li><li><code>network.ttr.uri</code>是<code>https://mozilla.cloudflare-dns.com/dns-query</code>就OK了，当然你也可以改成其他支持DoH的服务器网址。支持的好像不多，感觉这个已经比较快了。</li><li>修改<code>network.trr.bootstrapAddress</code>为一个后备的DNS，我就改为了1.0.0.1，因为我这1.1.1.1是不能用的。</li><li>进入网址<a href="https://www.cloudflare.com/ssl/encrypted-sni/" target="_blank" rel="noopener">Browsing Experience Security Check</a>,cloudflare给的一个检查DNS服务是否走cloudflare的，Check My Browser后，看到最右边是Secure DNS就OK了。</li></ol><h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><p>访问国内的网站有点慢，国外的网站就感觉快了一丢丢，github不会因为DNS污染而访问不了了，我自己也难得一个个地去改Hosts了，重要的是能上ddg了，再不不需要百毒了，注意，还是用不了谷歌的，别想一些有的没的。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dns </tag>
            
            <tag> DoH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPM Install Error</title>
      <link href="/2019/08/03/npm-install-error/"/>
      <url>/2019/08/03/npm-install-error/</url>
      
        <content type="html"><![CDATA[<blockquote><p> <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener">Resolving EACCES permissions errors when installing packages globally</a></p></blockquote><blockquote><p>Note: This section does not apply to Microsoft Windows.</p></blockquote><p>Just follow the next few steps:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.npm-global</span><br><span class="line">npm config set prefix '~/.npm-global'</span><br></pre></td></tr></table></figure><p>Open your editor to edit ‘~/.profile’. If this file doesn’t exist, just create it. And add this line:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=~/.npm-global/bin:$PATH</span><br></pre></td></tr></table></figure><p>Update your system variables:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><p>If you use cnpm, just change npm to cnpm.</p>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-Multi-University-Training-Contest-3</title>
      <link href="/2019/07/29/2019hdumutc3/"/>
      <url>/2019/07/29/2019hdumutc3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 2019-Multi-University-Training-Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-Multi-University-Training-Contest-2</title>
      <link href="/2019/07/29/2019hdumutc2/"/>
      <url>/2019/07/29/2019hdumutc2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 2019-Multi-University-Training-Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-Nowcoder-Multi-University-Training-Camp-4</title>
      <link href="/2019/07/29/2019nowcoder4/"/>
      <url>/2019/07/29/2019nowcoder4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 2019-Multi-University-Training-Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-Nowcoder-Multi-University-Training-Camp-3</title>
      <link href="/2019/07/29/2019nowcoder3/"/>
      <url>/2019/07/29/2019nowcoder3/</url>
      
        <content type="html"><![CDATA[<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="B-Crazy-Binary-String"><a href="#B-Crazy-Binary-String" class="headerlink" title="B Crazy Binary String"></a>B Crazy Binary String</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给你一个串，找出01个数相同的子串和子序列最长的长度为多少。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>对于子串，把0换成-1，如果$s[l,r]$的01个数相同，那么前缀和$a[r]-a[l-1]=0$</p><p>对于子序列，$\min(count(‘0’),count(‘1’))$就是答案。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100010</span>];</span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> minn=min(n,m);</span><br><span class="line">    ll l=<span class="number">1</span>,r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=minn; i++) &#123;</span><br><span class="line">        l=l*(n--)/i;</span><br><span class="line">        r=r*(m--)/i;</span><br><span class="line">        ans+=l*r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;tmp) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(x!=tmp.x)<span class="keyword">return</span> x&lt;tmp.x;</span><br><span class="line">        <span class="keyword">return</span> id&lt;tmp.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; no[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    no[<span class="number">0</span>].x=<span class="number">0</span>;</span><br><span class="line">    no[<span class="number">0</span>].id=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        a[i]=(s[i]==<span class="string">'0'</span>)?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">        a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line">        no[i].x=a[i];</span><br><span class="line">        no[i].id=i;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'0'</span>)x++;</span><br><span class="line">        <span class="keyword">else</span> y++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    sort(no,no+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(r&lt;=n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(no[r+<span class="number">1</span>].x==no[l].x) &#123;</span><br><span class="line">            r++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r=l=r+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(ans,no[r].id-no[l].id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans,min(x,y)&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-Planting-Trees"><a href="#F-Planting-Trees" class="headerlink" title="F Planting Trees"></a>F Planting Trees</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给你n*n的矩阵，找出最大的矩阵，使得找出的矩阵最大值减最小值&lt;=m。</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>枚举上下边界，枚举右边界，用两个数组保存上下边界内每一列的最大值和最小值，用两个单调队列维护从L列的R列的最大值和最小值，这样可以找出枚举的右边界对应的左边界。注意，有可能出现找不到左边界，所以此时应该枚举下一个右边界。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;e</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;(-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N =<span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> esp = <span class="number">1e-7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, Map[N][N],Max[N],Min[N],q[N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,ans;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Map[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &lt;= n; p++) &#123;</span><br><span class="line">                Max[p] = Map[i][p], Min[p] = Map[i][p];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">                    Max[k] = max(Max[k],Map[j][k]);</span><br><span class="line">                    Min[k] = min(Min[k], Map[j][k]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>, ql = <span class="number">1</span>, qr = <span class="number">1</span>, pl = <span class="number">1</span>,pr = <span class="number">1</span>;</span><br><span class="line">                q[<span class="number">1</span>] = <span class="number">1</span>, p[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (r &lt;= n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (l==r+<span class="number">1</span>||Max[q[ql]] - Min[p[pl]] &lt;= m) &#123;</span><br><span class="line">                        ans = max(ans,(j-i+<span class="number">1</span>)*(r-l+<span class="number">1</span>));</span><br><span class="line">                        r++;</span><br><span class="line">                        <span class="keyword">while</span> (ql &lt;= qr &amp;&amp; Max[q[qr]] &lt;= Max[r])</span><br><span class="line">                            qr--;</span><br><span class="line">                        q[++qr] = r;</span><br><span class="line">                        <span class="keyword">while</span> (pl &lt;= pr &amp;&amp; Min[p[pr]] &gt;= Min[r])</span><br><span class="line">                            pr--;</span><br><span class="line">                        p[++pr] = r;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (q[ql] == l)</span><br><span class="line">                            ql++;</span><br><span class="line">                        <span class="keyword">if</span> (p[pl] == l)</span><br><span class="line">                            pl++;</span><br><span class="line">                        l++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-Magic-Line"><a href="#H-Magic-Line" class="headerlink" title="H Magic Line"></a>H Magic Line</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给你n个点，n为偶数，你要作一条线使得n个点恰好平分在两边，给出这条线过的两个点。</p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>对点双关键字排序，然后把前$\frac{n}{2}$个点划分到一边，其余的划分到另一边，只要直接足够直，就不会穿过给出的点。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> x10,x20,y10,y20;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;tmp)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(x!=tmp.x)<span class="keyword">return</span> x&lt;tmp.x;</span><br><span class="line">        <span class="keyword">return</span> y&lt;tmp.y;</span><br><span class="line">    &#125;    len=<span class="number">0</span>;<span class="comment">//使用的是手写堆，所    len=0;//使用的是手写堆，所以这里我要每次清零。可以忽略以这里我要每次清零。可以忽略</span></span><br><span class="line"></span><br><span class="line">&#125; no[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1010</span>],y[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)    len=<span class="number">0</span>;<span class="comment">//使用的是手写堆，所以这里我要每次清零。可以忽略 &#123;</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">            no[i].x=x[i];</span><br><span class="line">            no[i].y=y[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(no+<span class="number">1</span>,no+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> mid = n&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(no[mid].x!=no[mid+<span class="number">1</span>].x) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d 100000000 %d -100000000\n"</span>,no[mid].x,no[mid+<span class="number">1</span>].x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = (no[mid+<span class="number">1</span>].y+no[mid].y)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> l=tmp+<span class="number">100000000</span>,r=tmp<span class="number">-100000000</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(no[mid].y-no[mid+<span class="number">1</span>].y)==<span class="number">1</span>)r++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>,no[mid].x<span class="number">-1</span>,l,no[mid].x+<span class="number">1</span>,r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;(-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N =<span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> esp = <span class="number">1e-7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t,n,m,op,v;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="built_in">list</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&gt;::iterator&gt;M;</span><br><span class="line">        M.clear();</span><br><span class="line">        <span class="built_in">list</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;L;</span><br><span class="line">        L.clear();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; op &gt;&gt; s &gt;&gt; v;</span><br><span class="line">            pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; p = make_pair(s, v);</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (M.find(p.first) == M.end()) &#123;</span><br><span class="line">                    L.push_back(p);</span><br><span class="line">                    M[p.first] = --L.end();</span><br><span class="line">                    <span class="keyword">if</span> (L.size() &gt; m) &#123;</span><br><span class="line">                        M.erase(L.front().first);</span><br><span class="line">                        L.pop_front();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    p = *M[p.first];</span><br><span class="line">                    L.erase(M[p.first]);</span><br><span class="line">                    L.push_back(p);</span><br><span class="line">                    M[p.first] =--L.end();</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p.second);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="number">2019</span>年<span class="number">7</span>月<span class="number">29</span>日 (一) <span class="number">11</span>:<span class="number">00</span>的版本</span><br><span class="line">                <span class="keyword">if</span> (M.find(p.first) == M.end()) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Invalid\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">list</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;::iterator id=M[p.first];</span><br><span class="line">                    <span class="keyword">if</span> ((id == L.begin() &amp;&amp; v == <span class="number">-1</span>) || (id == --L.end() &amp;&amp; v == <span class="number">1</span>)) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Invalid\n"</span>);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (v == <span class="number">-1</span>)</span><br><span class="line">                        id--;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (v == <span class="number">1</span>)</span><br><span class="line">                        id++;</span><br><span class="line">                    p = *id;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p.second);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 2019-Multi-University-Training-Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Template</title>
      <link href="/2019/07/29/acmtemplate/"/>
      <url>/2019/07/29/acmtemplate/</url>
      
        <content type="html"><![CDATA[<h3 id="Introducing"><a href="#Introducing" class="headerlink" title="Introducing"></a>Introducing</h3><p>We are working on a new ACMtemplate for preparing the coming contest. But it is a long job. We need to take some time to collect template and refactor it in order to make it useful. It has two versions. One is made from markdown by using typora, another one is made from $\LaTeX$ by using $\TeX{studio}$.</p><p>This is the <a href="https://github.com/DennisZY/ACMtemplate" target="_blank" rel="noopener">github repo</a>. I would be happy to have your template contributed.</p><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><h4 id="source-code"><a href="#source-code" class="headerlink" title="source code"></a>source code</h4><ul><li><a href="https://raw.githubusercontent.com/DennisZY/ACMtemplate/master/ACM-template-markdown-version.md" target="_blank" rel="noopener">markdown</a></li><li><a href="https://raw.githubusercontent.com/DennisZY/ACMtemplate/master/ACM-template-latex-version.tex" target="_blank" rel="noopener">latex</a></li></ul><h4 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h4><ul><li><a href="https://raw.githubusercontent.com/DennisZY/ACMtemplate/master/ACM-template-markdown-version.pdf" target="_blank" rel="noopener">markdown</a></li><li><a href="https://raw.githubusercontent.com/DennisZY/ACMtemplate/master/ACM-template-latex-version.pdf" target="_blank" rel="noopener">latex</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-Nowcoder-Multi-University-Training-Camp-2</title>
      <link href="/2019/07/29/2019nowcoder2/"/>
      <url>/2019/07/29/2019nowcoder2/</url>
      
        <content type="html"><![CDATA[<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="A-Eddy-Walker"><a href="#A-Eddy-Walker" class="headerlink" title="A Eddy Walker"></a>A Eddy Walker</h3><p>题意：有个长度为n的环，每次从0开始，把所有格子走完的时候所在的地方为m的概率。</p><p>题解：在环上，总有点是对称的，那么在对称的点上结束的概率是一样的，如果换一个点为起点，就会找到另外的对称点，又因为不能在0点位结束，所以每个点的概率都为$\frac{1}{n-1}$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll n)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=(ans*a)%mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=(a*a)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        ll n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;m==<span class="number">0</span>)&#123;</span><br><span class="line">            ans*=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">0</span>)&#123;</span><br><span class="line">            ans*=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans*=qpow(n<span class="number">-1</span>,mod<span class="number">-2</span>);</span><br><span class="line">            ans%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-Eddy-Walker2"><a href="#B-Eddy-Walker2" class="headerlink" title="B Eddy Walker2"></a>B Eddy Walker2</h3><p>题意：每次走1到k间的一个值，问走到n的概率，n为-1表示正无穷。</p><p>题解：设f[i]表示走到i的概率，则$f[i]$由$\frac{f[i-k-1]}{k}+…+\frac{f[i-1]}{k}$更新，设s[i]表示前缀概率和，则可写为 $f[i]=(s[i-1]-s[i-1-k])*(1/k)$,线性递推，由于数据太大，矩阵快速幂会超时，故用BM。当n为无穷时，暴力可看出，概率为$\frac{2}{k+2}$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;(-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for (int i=a;i&lt;n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,n) for (int i=n-1;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll f[N], s[N];</span><br><span class="line"><span class="function">ll <span class="title">powmod</span><span class="params">(ll a, ll b)</span> </span>&#123; ll res = <span class="number">1</span>; a %= mod; assert(b &gt;= <span class="number">0</span>); <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>) &#123; <span class="keyword">if</span> (b &amp; <span class="number">1</span>)res = res * a%mod; a = a * a%mod; &#125;<span class="keyword">return</span> res; &#125;</span><br><span class="line"><span class="comment">// head</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> _, n;</span><br><span class="line"><span class="keyword">namespace</span> linear_seq &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line">    ll res[N], base[N], _c[N], _md[N];</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Md;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        rep(i, <span class="number">0</span>, k + k) _c[i] = <span class="number">0</span>;</span><br><span class="line">        rep(i, <span class="number">0</span>, k) <span class="keyword">if</span> (a[i]) rep(j, <span class="number">0</span>, k) _c[i + j] = (_c[i + j] + a[i] * b[j]) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k + k - <span class="number">1</span>; i &gt;= k; i--) <span class="keyword">if</span> (_c[i])</span><br><span class="line">            rep(j, <span class="number">0</span>, SZ(Md)) _c[i - k + Md[j]] = (_c[i - k + Md[j]] - _c[i] * _md[Md[j]]) % mod;</span><br><span class="line">        rep(i, <span class="number">0</span>, k) a[i] = _c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(ll n, VI a, VI b)</span> </span>&#123; </span><br><span class="line">        ll ans = <span class="number">0</span>, pnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = SZ(a);</span><br><span class="line">        assert(SZ(a) == SZ(b));</span><br><span class="line">        rep(i, <span class="number">0</span>, k) _md[k - <span class="number">1</span> - i] = -a[i]; _md[k] = <span class="number">1</span>;</span><br><span class="line">        Md.clear();</span><br><span class="line">        rep(i, <span class="number">0</span>, k) <span class="keyword">if</span> (_md[i] != <span class="number">0</span>) Md.push_back(i);</span><br><span class="line">        rep(i, <span class="number">0</span>, k) res[i] = base[i] = <span class="number">0</span>;</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1l</span>l &lt;&lt; pnt) &lt;= n) pnt++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p = pnt; p &gt;= <span class="number">0</span>; p--) &#123;</span><br><span class="line">            mul(res, res, k);</span><br><span class="line">            <span class="keyword">if</span> ((n &gt;&gt; p) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) res[i + <span class="number">1</span>] = res[i]; res[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                rep(j, <span class="number">0</span>, SZ(Md)) res[Md[j]] = (res[Md[j]] - res[k] * _md[Md[j]]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i, <span class="number">0</span>, k) ans = (ans + res[i] * b[i]) % mod;</span><br><span class="line">        <span class="keyword">if</span> (ans &lt; <span class="number">0</span>) ans += mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">VI <span class="title">BM</span><span class="params">(VI s)</span> </span>&#123;</span><br><span class="line">        VI C(1, 1), B(1, 1);</span><br><span class="line">        <span class="keyword">int</span> L = <span class="number">0</span>, m = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">        rep(n, <span class="number">0</span>, SZ(s)) &#123;</span><br><span class="line">            ll d = <span class="number">0</span>;</span><br><span class="line">            rep(i, <span class="number">0</span>, L + <span class="number">1</span>) d = (d + (ll)C[i] * s[n - i]) % mod;</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="number">0</span>) ++m;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> * L &lt;= n) &#123;</span><br><span class="line">                VI T = C;</span><br><span class="line">                ll c = mod - d * powmod(b, mod - <span class="number">2</span>) % mod;</span><br><span class="line">                <span class="keyword">while</span> (SZ(C) &lt; SZ(B) + m) C.pb(<span class="number">0</span>);</span><br><span class="line">                rep(i, <span class="number">0</span>, SZ(B)) C[i + m] = (C[i + m] + c * B[i]) % mod;</span><br><span class="line">                L = n + <span class="number">1</span> - L; B = T; b = d; m = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ll c = mod - d * powmod(b, mod - <span class="number">2</span>) % mod;</span><br><span class="line">                <span class="keyword">while</span> (SZ(C) &lt; SZ(B) + m) C.pb(<span class="number">0</span>);</span><br><span class="line">                rep(i, <span class="number">0</span>, SZ(B)) C[i + m] = (C[i + m] + c * B[i]) % mod;</span><br><span class="line">                ++m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(VI a, ll n)</span> </span>&#123;</span><br><span class="line">        VI c = BM(a);</span><br><span class="line">        c.erase(c.begin());</span><br><span class="line">        rep(i, <span class="number">0</span>, SZ(c)) c[i] = (mod - c[i]) % mod;</span><br><span class="line">        <span class="keyword">return</span> solve(n, c, VI(a.begin(), a.begin() + SZ(c)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = ans * a%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a%mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll k, n;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;k,&amp;n);</span><br><span class="line">        ll invk = qpow(k, mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="number">2</span>*qpow(k+<span class="number">1</span>,mod<span class="number">-2</span>)%mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            f[<span class="number">0</span>] = <span class="number">1</span>, s[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt;=k) &#123;</span><br><span class="line">                    f[i] = invk * s[i - <span class="number">1</span>] % mod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    f[i] = invk * (s[i - <span class="number">1</span>] - s[i - k - <span class="number">1</span>] + mod) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">                s[i] = (s[i - <span class="number">1</span>] + f[i]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">                v.push_back(f[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, linear_seq::gao(v, n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-Partition-problem"><a href="#F-Partition-problem" class="headerlink" title="F Partition problem"></a>F Partition problem</h3><p>题意：给你一个n，给出$2n\times2n$的矩阵，$v_{ij}$表示$i$与$j$之间的边权，让你把$2n$个人分为两组，使得一组人与另一组人的所有的边权的和最大。</p><p>题解：枚举每种状态，每一步更新更新一次，能把$O(n^2)$的查询时间压为$O(n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mmp[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> n,nn;</span><br><span class="line"><span class="keyword">int</span> l[<span class="number">20</span>],r[<span class="number">20</span>];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> cnt1,<span class="keyword">int</span> cnt2,ll res)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt1==n&amp;&amp;cnt2==n)&#123;</span><br><span class="line">        ans=max(ans,res);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll tmp;</span><br><span class="line">    <span class="keyword">if</span>(cnt1&lt;n)&#123;</span><br><span class="line">        tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt2;i++)&#123;</span><br><span class="line">            tmp+=mmp[r[i]][pos];</span><br><span class="line">        &#125;</span><br><span class="line">        l[cnt1]=pos;</span><br><span class="line">        dfs(pos+<span class="number">1</span>,cnt1+<span class="number">1</span>,cnt2,res+tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt2&lt;n)&#123;</span><br><span class="line">        tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt1;i++)&#123;</span><br><span class="line">            tmp+=mmp[l[i]][pos];</span><br><span class="line">        &#125;</span><br><span class="line">        r[cnt2]=pos;</span><br><span class="line">        dfs(pos+<span class="number">1</span>,cnt1,cnt2+<span class="number">1</span>,res+tmp);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    nn=n&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nn;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nn;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;mmp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    l[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-Second-Large-Rectangle"><a href="#H-Second-Large-Rectangle" class="headerlink" title="H Second Large Rectangle"></a>H Second Large Rectangle</h3><p>题意：计算次大全为1的长方形的面积大小</p><p>题解：用单调栈维护全为1的长方形面积最大和次大两个值即可。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> mmp[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> sta[<span class="number">1010</span>],w[<span class="number">1010</span>],top;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)<span class="keyword">return</span> (x<span class="number">-1</span>)*y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (y<span class="number">-1</span>)*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;mmp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(mmp[i][j])mmp[i][j]+=mmp[i<span class="number">-1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> ans1=<span class="number">0</span>,ans2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        top=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m+<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> weight=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(top&amp;&amp;sta[top]&gt;mmp[i][j]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(sta[top]*(w[top]+weight)&gt;=ans1) &#123;</span><br><span class="line">                    ans2=max(ans1,work(sta[top],(w[top]+weight)));</span><br><span class="line">                    ans1=sta[top]*(w[top]+weight);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sta[top]*(w[top]+weight)&gt;=ans2) &#123;</span><br><span class="line">                    ans2=sta[top]*(w[top]+weight);</span><br><span class="line">                &#125;</span><br><span class="line">                weight+=w[top];</span><br><span class="line">                top--;</span><br><span class="line">            &#125;</span><br><span class="line">            sta[++top]=mmp[i][j];</span><br><span class="line">            w[top]=weight+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 2019-Multi-University-Training-Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-Nowcoder-Multi-University-Training-Camp-1</title>
      <link href="/2019/07/28/2019nowcoder1/"/>
      <url>/2019/07/28/2019nowcoder1/</url>
      
        <content type="html"><![CDATA[<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="A-Equivalent-Prefixes"><a href="#A-Equivalent-Prefixes" class="headerlink" title="A Equivalent Prefixes"></a>A Equivalent Prefixes</h3><p>题意：给你ab两个数组，让你找出[1,p]区间使得他们任一区间的最小值的位置是一样的，求最大的p。</p><p>题解：二分答案，分别建立笛卡尔树，树形一样则正确。</p><h3 id="B-Integration"><a href="#B-Integration" class="headerlink" title="B Integration"></a>B Integration</h3><p>题意：知道$$\int_{0}^{\infty} \frac{1}{1+x^2}dx=\frac{\pi}{2}$$，求$$\int_{0}^{\infty} \frac{1}{\prod_{i=1}^n{a_i^2+x^2}}dx$$，可以证明这个一定是分数，要我们用分子乘分母逆元的方式来表示它。</p><p>题解：将连乘转换为累加，我们知道</p><p>$$<br>\frac{1}{xy}=\frac{1}{y-x}\times\frac{y-x}{xy}=\frac{1}{y-x}\times(\frac{1}{x}-\frac{1}{y})<br>$$</p><p>对于上面的连乘可以转换为</p><p>$$<br>\int_{0}^{\infty} \frac{1}{(a^2+x^2)\times(b^2+x^2)}dx=\int_{0}^{\infty} \frac{1}{b^2-a^2}\times(\frac{1}{a^2+x^2}-\frac{1}{b^2+x^2})dx=\frac{1}{b^2-a^2}\int_{0}^{\infty} \frac{1}{a^2+x^2}-\frac{1}{b^2+x^2}dx<br>$$</p><p>$$<br>\int_{0}^{\infty} \frac{1}{(b^2+x^2)\times(c^2+x^2)}dx=\frac{1}{c^2-b^2}\int_{0}^{\infty} \frac{1}{b^2+x^2}-\frac{1}{c^2+x^2}dx<br>$$</p><p>$$<br>\int_{0}^{\infty} \frac{1}{(a^2+x^2)\times(b^2+x^2)\times{(c^2+x^2)}}dx=\int_{0}^{\infty} \frac{1}{c^2-a^2}\times(\frac{1}{(a^2+x^2)\times(b^2+x^2)}-\frac{1}{(b^2+x^2)\times(c^2+x^2)})dx<br>$$</p><p>由此我们可以简略证明出</p><p>$$<br>\int_{0}^{\infty} \frac{1}{\prod_{i=n}^m{a_i^2+x^2}}dx(n \lneq m)<br>$$</p><p>可以由</p><p>$$<br>\int_{0}^{\infty} \frac{1}{\prod_{i=n+1}^m{a_i^2+x^2}}dx$$和$$\int_{0}^{\infty} \frac{1}{\prod_{i=n}^{m-1}{a_i^2+x^2}}dx<br>$$</p><p>得到。</p><p>而如果不预处理的话，直接爆搜会导致$$O(2^n)$$的时间复杂度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll n)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=ans*a%mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll a[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==x)<span class="keyword">continue</span>;</span><br><span class="line">        ans=ans*((a[i]*a[i]-a[x]*a[x])%mod)%mod;</span><br><span class="line">        ans=(ans+mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,a+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            ans=(ans+qpow(<span class="number">2</span>*a[i],mod<span class="number">-2</span>)*qpow(get(i),mod<span class="number">-2</span>))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-ABBA"><a href="#E-ABBA" class="headerlink" title="E ABBA"></a>E ABBA</h3><p>题意：给你两个数$n$和$m$,找出$2(n+m)$长度的只包含字母A和B的字符串符合有n个AB子序列和m个BA子序列的字符串有多少种方案。每个字母自能用一次。</p><p>题解：动态规划，dp[i,j]定义为字符串前缀(i+j)长度时候，有i个字母A和j个字母B的方案数，对于转移方程，对字母B的数量比需要的B的数量多的时候和字母A出现相同情况的状态作为非法状态，不对非法状态进行转移，通过计算当前状态是否能加上字母A或者字母B,如果可以的话，就进行对应的状态转移。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> &amp;a,<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line">    a+=x;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=mod)a-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> s = n+m;</span><br><span class="line">        <span class="comment">//memset(dp,0,sizeof dp);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=s;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=s;j++)&#123;</span><br><span class="line">                dp[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=s;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=s;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> ca=<span class="number">0</span>,cb=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> xy=max(n-i,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">int</span> x=min(i,n)-max(j-m,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                ca+=xy;</span><br><span class="line">                cb+=x;</span><br><span class="line">                 </span><br><span class="line">                xy=max(m-j,<span class="number">0</span>);</span><br><span class="line">                x=min(j,m)-max(i-n,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                cb+=xy;</span><br><span class="line">                ca+=x;</span><br><span class="line">         </span><br><span class="line">                <span class="keyword">if</span>(ca&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    add(dp[i+<span class="number">1</span>][j],dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cb&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    add(dp[i][j+<span class="number">1</span>],dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[s][s]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure><h3 id="F-Random-Point-in-Triangle"><a href="#F-Random-Point-in-Triangle" class="headerlink" title="F Random Point in Triangle"></a>F Random Point in Triangle</h3><p>题意：给你三角形的三个点，在三角形中均匀地取点P，求$$E = \max {S_{PAB},S_{PBC},S_{PCA}}$$的期望。</p><p>题解：手动作了个正三角形，手动算出三角形面积和期望x36的关系，然后就过了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vec</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,y;</span><br><span class="line">    vec(<span class="keyword">long</span> <span class="keyword">long</span> _x=<span class="number">0</span>,<span class="keyword">long</span> <span class="keyword">long</span> _y=<span class="number">0</span>):x(_x),y(_y)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">corss</span><span class="params">(<span class="keyword">const</span> vec &amp;tt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*tt.y-y*tt.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x1,x2,x3,y1,y2,y3;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld%lld"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2,&amp;x3,&amp;y3))&#123;</span><br><span class="line">        vec a(x2-x1,y2-y1),b(x3-x1,y3-y1);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans= <span class="built_in">abs</span>(a.corss(b)*<span class="number">11</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-XOR"><a href="#H-XOR" class="headerlink" title="H XOR"></a>H XOR</h3><p>题意：给你$$n$$个数字，作为一个集合的元素，找出子集异或为0的大小的和。</p><p>题解：线性基</p><p>对于集合大小求和会有点难以求得，我们可以将问题转换为计算每个数的贡献，先找出整个集合构成线性基的$k$个数，那么在$n-k$个数构成的集合中任一非空集合都能在线性基找到若干个数使得异或为$0$，所以在$n-k$个数，每个数都能参与$2^{n-k-1}$个集合的构造，所以$n-k$个数的贡献都为$2^{n-k-1}$，那么剩余那k个数需要计算贡献，用$n-k$个数建立另外一个线性基，每次先把$k$个数中的$k-1$个插入第二个线性基，然后检查第二个线性基是否需要这唯一的数来构造生成整个数组的线性基，如果不需要，这唯一的数也能参与到异或为$0$的子集中的构造，那么由于线性基的性质，相同集合的线性基都能由同样数量的k个数来构造，那么这唯一的数的贡献也就是$^{n-k-1}$了，然后把k个数都试一遍就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXL=<span class="number">62</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">basis</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a[MAXL+<span class="number">1</span>];</span><br><span class="line">    basis() &#123;</span><br><span class="line">        reset();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=MAXL; i&gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(x&gt;&gt;i)&amp;<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(a[i])x^=a[i];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)<span class="keyword">if</span>((x&gt;&gt;j)&amp;<span class="number">1</span>)x^=a[j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=MAXL; j++)<span class="keyword">if</span>((a[j]&gt;&gt;i)&amp;<span class="number">1</span>)a[j]^=x;</span><br><span class="line">                a[i]=x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qmax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=MAXL; i++)ans^=a[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a,b,c;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans,w,tmp;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=ans*a%mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> aa[MAXL+<span class="number">10</span>],top;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">        a.reset();</span><br><span class="line">        b.reset();</span><br><span class="line">        top=ans=w=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;tmp);</span><br><span class="line">            <span class="keyword">if</span>(a.insert(tmp)) &#123;</span><br><span class="line">                w++;</span><br><span class="line">                aa[++top]=tmp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                b.insert(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=(n-w);</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=top; i++) &#123;</span><br><span class="line">            c=b;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=top; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=j)c.insert(aa[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!c.insert(aa[i])) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans*qpow(<span class="number">2l</span>l,n<span class="number">-1</span>-w)%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="J-Fraction-Comparision"><a href="#J-Fraction-Comparision" class="headerlink" title="J Fraction Comparision"></a>J Fraction Comparision</h3><p>题意：<br>比较两个分数的大小，其中分子范围1e18，分母1e9</p><p>题解:<br>将两分数分别分为整除数与模数，再比较大小即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS=<span class="number">1e-9</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">panduan</span><span class="params">(<span class="keyword">long</span> <span class="keyword">double</span> x,<span class="keyword">long</span> <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x-y)&lt;EPS)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,y,a,b;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;x,&amp;a,&amp;y,&amp;b)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x/a&gt;y/b) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x/a&lt;y/b) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"&lt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x%=a;</span><br><span class="line">            y%=b;</span><br><span class="line">            <span class="keyword">if</span>(x*b&gt;y*a)<span class="built_in">puts</span>(<span class="string">"&gt;"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x*b&lt;y*a)<span class="built_in">puts</span>(<span class="string">"&lt;"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 2019-Multi-University-Training-Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-Multi-University-Training-Contest-1</title>
      <link href="/2019/07/28/2019hdumutc1/"/>
      <url>/2019/07/28/2019hdumutc1/</url>
      
        <content type="html"><![CDATA[<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="E-Path"><a href="#E-Path" class="headerlink" title="E.Path"></a>E.Path</h3><p>题意：给你n个点和m条边，让你断开若干条边，使得从1到n的最短路长度变大或者不连通，求最小花费的花费为多少。断开一条边花费为对应边的长度(边权)。</p><p>题解：跑最短路算法，求出能够构成最短路的边，根据这些边建一个新图，跑最小鸽。</p><p>我写这个的时候人都傻了，找最短路的边的bfs写歪了，然后就超时了QAQ。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">namespace</span> dijk &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">    <span class="keyword">typedef</span> pair&lt;ll,<span class="keyword">int</span>&gt; PLI;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line">    <span class="keyword">int</span> Head[N],nxt[N],ver[N];</span><br><span class="line">    ll c[N],d[N];</span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tot=<span class="number">1</span>;</span><br><span class="line">        fill(Head,Head+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span> </span>&#123;</span><br><span class="line">        ver[tot]=v;</span><br><span class="line">        c[tot]=w;</span><br><span class="line">        nxt[tot]=Head[u];</span><br><span class="line">        Head[u]=tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fill(d+<span class="number">1</span>,d+n+<span class="number">1</span>,<span class="number">0x3f3f3f3f3f3f3f3f</span>);</span><br><span class="line">        fill(vis,vis+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;PLI,<span class="built_in">vector</span>&lt;PLI&gt;,greater&lt;PLI&gt;&gt;q;</span><br><span class="line">        q.push(make_pair(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">            PLI tmp = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">int</span> u = tmp.second;</span><br><span class="line">            <span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">            vis[u]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[u]; i; i=nxt[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = ver[i];</span><br><span class="line">                <span class="keyword">if</span>(d[v]&gt;d[u]+c[i]) &#123;</span><br><span class="line">                    d[v]=tmp.first+c[i];</span><br><span class="line">                    q.push(make_pair(d[v],v));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISAP</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">int</span> tot,n,m,s,t;</span><br><span class="line">    <span class="keyword">int</span> carc[N],gap[N];</span><br><span class="line">    <span class="keyword">int</span> pre[N];</span><br><span class="line">    <span class="keyword">int</span> Head[N],nxt[M],ver[M];</span><br><span class="line">    ll flow[M];</span><br><span class="line">    <span class="keyword">int</span> d[N];</span><br><span class="line">    <span class="keyword">bool</span> visited[N];</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n,<span class="keyword">int</span> _m,<span class="keyword">int</span> _s,<span class="keyword">int</span> <span class="keyword">_t</span>)</span> </span>&#123;</span><br><span class="line">        tot=<span class="number">1</span>;</span><br><span class="line">        n=_n,m=_m,s=_s,t=<span class="keyword">_t</span>;</span><br><span class="line">        fill(Head,Head+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span> </span>&#123;</span><br><span class="line">        ver[++tot]=v;</span><br><span class="line">        flow[tot]=w;</span><br><span class="line">        nxt[tot]=Head[u];</span><br><span class="line">        Head[u]=tot;</span><br><span class="line"></span><br><span class="line">        ver[++tot]=u;</span><br><span class="line">        flow[tot]=<span class="number">0</span>;</span><br><span class="line">        nxt[tot]=Head[v];</span><br><span class="line">        Head[v]=tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fill(visited,visited+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">        visited[t]=<span class="number">1</span>;</span><br><span class="line">        d[t]=<span class="number">0</span>;</span><br><span class="line">        q.push(t);</span><br><span class="line">        <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = Head[u]; i; i=nxt[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = ver[i];</span><br><span class="line">                <span class="keyword">if</span>(i&amp;<span class="number">1</span>&amp;&amp;!visited[v]) &#123;</span><br><span class="line">                    visited[v]=<span class="literal">true</span>;</span><br><span class="line">                    d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> visited[s];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">aug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u=t;</span><br><span class="line">        ll df=INF;</span><br><span class="line">        <span class="keyword">while</span>(u!=s) &#123;</span><br><span class="line">            df=min(df,flow[pre[u]]);</span><br><span class="line">            u=ver[pre[u]^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        u=t;</span><br><span class="line">        <span class="keyword">while</span>(u!=s) &#123;</span><br><span class="line">            flow[pre[u]]-=df;</span><br><span class="line">            flow[pre[u]^<span class="number">1</span>]+=df;</span><br><span class="line">            u=ver[pre[u]^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> df;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">maxflow</span><span class="params">()</span></span>;</span><br><span class="line">&#125; flow;</span><br><span class="line">ll ISAP :: maxflow() &#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    fill(gap,gap+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    copy(Head+<span class="number">1</span>,Head+n+<span class="number">1</span>,carc+<span class="number">1</span>);</span><br><span class="line">    bfs();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)gap[d[i]]++;</span><br><span class="line">    <span class="keyword">int</span> u = s;</span><br><span class="line">    <span class="keyword">while</span>(d[s]&lt;=n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(u==t) &#123;</span><br><span class="line">            ans+=aug();</span><br><span class="line">            u=s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> advanced=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=carc[u]; i; i=nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flow[i]&amp;&amp;d[u]==d[ver[i]]+<span class="number">1</span>) &#123;</span><br><span class="line">                advanced=<span class="literal">true</span>;</span><br><span class="line">                pre[ver[i]]=i;</span><br><span class="line">                carc[u]=i;<span class="comment">//carc</span></span><br><span class="line">                u=ver[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!advanced) &#123;</span><br><span class="line">            <span class="keyword">int</span> mindep=n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[u]; i; i=nxt[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(flow[i]) &#123;</span><br><span class="line">                    mindep=min(mindep,d[ver[i]]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(--gap[d[u]]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            gap[d[u]=mindep+<span class="number">1</span>]++;</span><br><span class="line"></span><br><span class="line">            carc[u]=Head[u];</span><br><span class="line">            <span class="keyword">if</span>(u!=s)u=ver[pre[u]^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        dijk::init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y; i&lt;=m; i++) &#123;</span><br><span class="line">            ll z;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            dijk::add(x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">        dijk::dijk();</span><br><span class="line">        <span class="keyword">if</span>(dijk::d[n]==<span class="number">0x3f3f3f3f3f3f3f3f</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        flow.init(n,<span class="number">10000</span>,<span class="number">1</span>,n);</span><br><span class="line">        &#123;</span><br><span class="line">            fill(vis,vis+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">            q.push(<span class="number">1</span>);</span><br><span class="line">            vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=dijk::Head[u]; i; i=dijk::nxt[i]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = dijk::ver[i];</span><br><span class="line">                    <span class="keyword">if</span>(dijk::d[u]+dijk::c[i]==dijk::d[v]) &#123;</span><br><span class="line">                        flow.addedge(u,v,dijk::c[i]);</span><br><span class="line">                        <span class="keyword">if</span>(!vis[v])q.push(v);</span><br><span class="line">                        vis[v]=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;#<span class="meta"># feature test</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans=flow.maxflow();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans==<span class="number">0</span>?<span class="number">-1</span>:ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 2019-Multi-University-Training-Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beatty&#39;s theory</title>
      <link href="/2019/07/15/Beatty/"/>
      <url>/2019/07/15/Beatty/</url>
      
        <content type="html"><![CDATA[<h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>当正无理数$x$、$y$满足下列式子时<br>$$<br>\frac{1}{x}+\frac{1}{y}=1<br>$$<br>会有$P={\lfloor{nx}\rfloor|n \in N^+}$,$Q={\lfloor{ny}\rfloor|n \in N^+}$,使得集合P和集合Q正好是$Z^+$的一个划分,即$P\cup Q=Z^+$、$P\cap Q=\emptyset$.</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><h4 id="1-一个正整数在集合P或集合Q中至多出现一次"><a href="#1-一个正整数在集合P或集合Q中至多出现一次" class="headerlink" title="1.一个正整数在集合P或集合Q中至多出现一次"></a>1.一个正整数在集合P或集合Q中至多出现一次</h4><p>因为$x&gt;1$、$y&gt;1$，所以$\lfloor{nx}\rfloor$不会存在相同的正整数，$\lfloor{ny}\rfloor$亦然。</p><h4 id="2-P-cap-Q-emptyset"><a href="#2-P-cap-Q-emptyset" class="headerlink" title="2.$P\cap Q=\emptyset$"></a>2.$P\cap Q=\emptyset$</h4><p>反证法来一手，假设有正整数n、m、k使得$\lfloor{nx}\rfloor=\lfloor{my}\rfloor=k$，即<br>$$<br>k&lt;nx&lt;k+1<br>$$</p><p>$$<br>k&lt;my&lt;k+1<br>$$</p><p>转化一下<br>$$<br>\frac{n}{k+1}&lt;\frac{1}{x}&lt;\frac{n}{k}<br>$$</p><p>$$<br>\frac{m}{k+1}&lt;\frac{1}{y}&lt;\frac{m}{k}<br>$$</p><p>两式相加<br>$$<br>\frac{n+m}{k+1}&lt;\frac{1}{x}+\frac{1}{y}=1&lt;\frac{n+m}{k}<br>$$<br>再转化一下<br>$$<br>k&lt;n+m&lt;k+1<br>$$<br>因为n、m是正整数，所以不符合，所以$P\cap Q=\emptyset$</p><h4 id="3-P-cup-Q-Z"><a href="#3-P-cup-Q-Z" class="headerlink" title="3.$P\cup Q=Z^+$"></a>3.$P\cup Q=Z^+$</h4><p>继续反证法，假设有正整数n、m、k使得$\lfloor{nx}\rfloor&lt;k&lt;\lfloor{(n+1)x}\rfloor$、$\lfloor{my}\rfloor&lt;k&lt;\lfloor{(m+1)y}\rfloor$</p><p>再进一步说<br>$$<br>\lfloor{nx}\rfloor&lt;nx&lt;k\le\lfloor{(n+1)x}\rfloor-1&lt;(n+1)x-1&lt;\lfloor{(n+1)x}\rfloor<br>$$<br>类似<br>$$<br>\lfloor{my}\rfloor&lt;my&lt;k\le\lfloor{(m+1)y}\rfloor-1&lt;(m+1)y-1&lt;\lfloor{(m+1)y}\rfloor<br>$$<br>取出下列不等式构成不等式组<br>$$<br>nx&lt;k&lt;(n+1)x-1<br>$$</p><p>$$<br>my&lt;k&lt;(m+1)y-1<br>$$</p><p>转换一下<br>$$<br>\frac{n}{k}&lt;\frac{1}{x}&lt;\frac{n+1}{k+1}<br>$$</p><p>$$<br>\frac{m}{k}&lt;\frac{1}{y}&lt;\frac{m+1}{k+1}<br>$$</p><p>两式相加<br>$$<br>\frac{n+m}{k}&lt;\frac{1}{x}+\frac{1}{y}=1&lt;\frac{n+m+2}{k+1}<br>$$<br>转换一下<br>$$<br>n+m&lt;k&lt;k+1&lt;n+m+2<br>$$<br>因为n、m是正整数，所以不符合，所以$P\cup Q=Z^+$</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>manjaro下使用tenda-U12</title>
      <link href="/2019/07/13/manjaro2/"/>
      <url>/2019/07/13/manjaro2/</url>
      
        <content type="html"><![CDATA[<h3 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h3><p>在manjaro上搜索<a href="https://www.realtek.com/en/products/communications-network-ics/item/rtl8812au" target="_blank" rel="noopener">rtl8812au</a>的驱动装一下，我装的名字是rtl8812au-dkms-git(在archlinuxcn的仓库下，可以自己添加一下仓库)，然后把网卡插进去就能识别使用了。</p><h3 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h3><p>官网有这个网卡的windows/linux/macos的驱动包，然而这个包根本不能编译成功，我的内核也在他要求的范围之内，要求是2.6.18至4.4，我的是……4……….19打扰了，然后自己上网找找教程，上github找找对应的驱动clone下来编译安装？找了一个编译一下，编译失败，忽然想到去aur上看看有没有，用yay搜了一下，发现archlinuxcn库里面有，就装了，就完事了。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning C++</title>
      <link href="/2019/05/29/cplusplus/"/>
      <url>/2019/05/29/cplusplus/</url>
      
        <content type="html"><![CDATA[<h1 id="C-primer-第5版-读书笔记"><a href="#C-primer-第5版-读书笔记" class="headerlink" title="C++primer(第5版)读书笔记"></a>C++primer(第5版)读书笔记</h1><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>对于指针来说才会有顶层const和底层const之分</p><h3 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h3><p>顶层const指的是指针是常量，就是指针里存的地址是不可改变的。</p><h3 id="底层const"><a href="#底层const" class="headerlink" title="底层const"></a>底层const</h3><p>底层const指的是指针所指的变量是常量，不能修改所指的常量。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var1 = <span class="number">1</span>；</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> var2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> *p1 = var1;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p2 = var2;<span class="comment">//这个指针也可以指向var1的，但是不能通过这个指针区修改所指的变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p3 <span class="keyword">const</span> = var2;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*p2和p3的区别：</span></span><br><span class="line"><span class="comment">*p2能够重新指向别的变量，也就是能够改变指针的值</span></span><br><span class="line"><span class="comment">*p3不能都重新指向别的变量，需要在声明的时候就必须初始化，也就是不能改变指针的值</span></span><br><span class="line"><span class="comment">*也就是顶层const是对于指针的修饰</span></span><br><span class="line"><span class="comment">*底层const是对指针权力的一个限制，就是不允许有底层const的指针修改所指变量的值。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="constexpr-C-11"><a href="#constexpr-C-11" class="headerlink" title="constexpr(C++11)"></a>constexpr(C++11)</h3><p>常量表达式是用编译的时候就能知道对应表达式的值的表达式，constexpr对变量的一个修饰，要求他是一个常量，而且只能通过常量来初始化它，当然这个也可以用来修饰指针，但对于指针来说，只有是在函数体外的变量(全局变量,在堆空间里的变量)才能用constexpr来修饰，如果是在函数体内的变量(局部变量,在栈空间里的变量)只有申请之后才会知道准确的地址，也就是每次运行的时候的地址都是不确定的，这就违反了cosntexpr一定要通过常量表达式来初始化的这个规定。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SAM</title>
      <link href="/2019/05/07/SAM/"/>
      <url>/2019/05/07/SAM/</url>
      
        <content type="html"><![CDATA[<h1 id="Suffix-automaton"><a href="#Suffix-automaton" class="headerlink" title="Suffix automaton"></a>Suffix automaton</h1><p>后缀自动机，由一个parent树和一个DAG构成。DAG的边连接着状态转移的两点，点就是状态。</p><p>每个节点就是一个endpos等价类，每条parent树的边代表的是endpos等价类包含的关系。DAG就是状态转移的过程。</p><p>解析一下代码，个人感觉讲得不太好，可以移步看一下<a href="https://www.luogu.org/blog/Kesdiael3/hou-zhui-zi-dong-ji-yang-xie" target="_blank" rel="noopener">史上最通俗的后缀自动机详解</a>和<a href="https://oi-wiki.org/string/sam/" target="_blank" rel="noopener">oi-wiki上的SAM</a>，了解一下endpos类等等的定义。</p><p><a href="https://www.luogu.org/problemnew/show/P3804" target="_blank" rel="noopener">luogu3804</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> c[N],dfn[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> CHAR_SET_SIZE=<span class="number">26</span>;</span><br><span class="line">    <span class="comment">//这里的&lt;&lt;1，是因为后缀自动机的状态的个数是线性的，必定小于2*n，我就不证了(我不会证)。</span></span><br><span class="line">    <span class="comment">//ch是每个节点转移的下一个状态，fa是parent树的父节点，len是当前状态的串的长度。siz是每个节点的对应的串出现的次数</span></span><br><span class="line">    <span class="keyword">int</span> ch[N&lt;&lt;<span class="number">1</span>][CHAR_SET_SIZE],fa[N&lt;&lt;<span class="number">1</span>],len[N&lt;&lt;<span class="number">1</span>],siz[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> tot,last;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ++tot;</span><br><span class="line">        <span class="built_in">memset</span>(ch[tot],<span class="number">0</span>,<span class="keyword">sizeof</span> ch[tot]);</span><br><span class="line">        fa[tot]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化，把最开始的空状态给搞出来</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        tot=<span class="number">1</span>;</span><br><span class="line">        last=<span class="number">1</span>;<span class="comment">//记录上次的节点，下次在这后面增量构造SAM</span></span><br><span class="line">        len[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ch[<span class="number">1</span>],<span class="number">0</span>,<span class="keyword">sizeof</span> ch[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">memset</span>(siz,<span class="number">0</span>,<span class="keyword">sizeof</span> siz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = last,newpos=newnode();</span><br><span class="line">        last = newpos;</span><br><span class="line">        siz[newpos]=<span class="number">1</span>;<span class="comment">//后面需要这个来计算每个节点的串出现的次数</span></span><br><span class="line">        len[newpos]=len[pos]+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//更新父节点的等价类，让没有转移到当前字符的节点转移到当前字符，</span></span><br><span class="line">        <span class="keyword">while</span>(pos&amp;&amp;!ch[pos][x])&#123;ch[pos][x]=newpos;pos=fa[pos];&#125;</span><br><span class="line">     <span class="comment">//如果！pos就是根本没出现过这个字符，那么这个等价类的就是新的，连到根节点。</span></span><br><span class="line">        <span class="keyword">if</span>(!pos)fa[newpos]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果有父节点连接到x这个状态，我们对此进行判断</span></span><br><span class="line">            <span class="keyword">int</span> oldpos=ch[pos][x];</span><br><span class="line">            <span class="comment">//如果这个父节点的儿子的长度跟父节点的长度相差1，那么我们新的这个等价类的父节点就是这个父节点的儿子了，因为我们必定比父节点的儿子要更长，肯定是再被划分出来的。</span></span><br><span class="line">            <span class="keyword">if</span>(len[oldpos]==len[pos]+<span class="number">1</span>)fa[newpos]=oldpos;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//否则，我们就创建一个新的状态的长度是父节点的长度+1的。让祖先们的x转移为原父亲x转移的都改为对新状态的转移，让原父亲x转移的状态改为对新状态的转移。</span></span><br><span class="line">                <span class="keyword">int</span> anp=newnode();</span><br><span class="line">                <span class="built_in">memcpy</span>(ch[anp],ch[oldpos],<span class="keyword">sizeof</span> ch[anp]);</span><br><span class="line">                fa[anp]=fa[oldpos];</span><br><span class="line">                len[anp]=len[pos]+<span class="number">1</span>;</span><br><span class="line">                fa[oldpos]=fa[newpos]=anp;</span><br><span class="line">                <span class="keyword">while</span>(pos&amp;&amp;ch[pos][x]==oldpos)&#123;</span><br><span class="line">                    ch[pos][x]=anp;</span><br><span class="line">                    pos=fa[pos];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//暴力更新每个节点的字符串出现的次数，然后对出现次数&gt;1的更新答案。</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)c[len[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)dfn[c[len[i]]--]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=tot;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">int</span> now = dfn[i];</span><br><span class="line">            siz[fa[now]]+=siz[now];</span><br><span class="line">            <span class="keyword">if</span>(siz[now]&gt;<span class="number">1</span>)ans=max(ans,<span class="number">1l</span>l*len[now]*siz[now]);</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>))&#123;</span><br><span class="line">        freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        freopen(<span class="string">"out.txt"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sam.init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)sam.add(s[i]-<span class="string">'a'</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sam.solve());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
            <tag> SAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>splay</title>
      <link href="/2019/04/23/ds1/"/>
      <url>/2019/04/23/ds1/</url>
      
        <content type="html"><![CDATA[<h2 id="来感受Splay的魅力8"><a href="#来感受Splay的魅力8" class="headerlink" title="来感受Splay的魅力8"></a>来感受Splay的魅力8</h2><p>话说这个树也是<a href="https://en.wikipedia.org/wiki/Robert_Tarjan" target="_blank" rel="noopener">Tarjan</a>巨巨和其他巨巨发明的，凸轮已经在Tarjan巨巨的支配中了，然而其他领域也在他的支配中。</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>可以说它也是棵自平衡的二叉查找树，但是不是十分平衡，存在有O(n)的操作情况，但均摊的操作效率被巨巨们证明为O(logn)的。Splay是通过伸展操作调整自身的，使自己变得比较平衡。而Splay规定每访问节点，就把它伸展(Splay)到根节点(方便查找?)。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li><p>插入</p></li><li><p>删除</p></li><li><p>查找</p></li><li><p>区间翻转</p></li><li><p>(未完待续)</p></li></ul><h3 id="需要维护的东西"><a href="#需要维护的东西" class="headerlink" title="需要维护的东西"></a>需要维护的东西</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">ch</span>[2]，<span class="title">fa</span>;</span><span class="comment">//左孩子、右孩子、父亲</span></span><br><span class="line">    <span class="keyword">int</span> inv;<span class="comment">//翻转操作的lazy标记</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> size;<span class="comment">//当前树的大小</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当然,这也可以用多个数组维护</span></span><br></pre></td></tr></table></figure><h4 id="旋转操作-小天才用符号画图"><a href="#旋转操作-小天才用符号画图" class="headerlink" title="旋转操作(小天才用符号画图)"></a>旋转操作(小天才用符号画图)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">       a           右旋             b</span></span><br><span class="line"><span class="comment">     /   \         -&gt;             / \</span></span><br><span class="line"><span class="comment">    b     c                      d   a</span></span><br><span class="line"><span class="comment">   / \             &lt;-               / \</span></span><br><span class="line"><span class="comment">  d   e            左旋             e   c</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>看起来，这个旋转操作一点意思都没有嘛，感觉没个卵用，又不能减少树高。</p><p>等等党：等等，单旋看起来莫得什么用，双旋来帮锤。</p><h4 id="双旋操作-小天才用符号画图"><a href="#双旋操作-小天才用符号画图" class="headerlink" title="双旋操作(小天才用符号画图)"></a>双旋操作(小天才用符号画图)</h4><h5 id="一字型"><a href="#一字型" class="headerlink" title="一字型"></a>一字型</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        a           d to a             d</span></span><br><span class="line"><span class="comment">       / \           -&gt;               / \</span></span><br><span class="line"><span class="comment">      b   c                          f   a</span></span><br><span class="line"><span class="comment">     / \             &lt;-                 / \</span></span><br><span class="line"><span class="comment">    d   e          a to d              b   c</span></span><br><span class="line"><span class="comment">   / \                                / \</span></span><br><span class="line"><span class="comment">  f   g                              g   e</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//这样旋是会被卡的,应先旋父亲再旋自己</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*                          优化  旧链 a-b-d-g d-a-b-g</span></span><br><span class="line"><span class="comment">                                 d to a</span></span><br><span class="line"><span class="comment">        a           b to a             b                    d</span></span><br><span class="line"><span class="comment">       / \           -&gt;              /   \                /   \</span></span><br><span class="line"><span class="comment">      b   c                         d     a    d to a    f     b</span></span><br><span class="line"><span class="comment">     / \                           / \   / \      -&gt;          / \</span></span><br><span class="line"><span class="comment">    d   e                         f   g e   c                g   a</span></span><br><span class="line"><span class="comment">   / \                                                          / \</span></span><br><span class="line"><span class="comment">  f   g                                                        e   c</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>(不还是对高度莫得影响么)</p><p>等等党：看下面的操作，很直观的。</p><h5 id="之字型"><a href="#之字型" class="headerlink" title="之字型"></a>之字型</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">         a           e to a               e</span></span><br><span class="line"><span class="comment">       /   \           -&gt;               /   \</span></span><br><span class="line"><span class="comment">      b     c                          b     a</span></span><br><span class="line"><span class="comment">     / \                              / \   / \</span></span><br><span class="line"><span class="comment">    d   e                            d   f g   c</span></span><br><span class="line"><span class="comment">       / \</span></span><br><span class="line"><span class="comment">      f   g</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//左右对称，自行脑补，这个不能双箭头，我也很无奈，但是真的有肉眼能看到的压缩啊</span></span><br></pre></td></tr></table></figure><h4 id="区间操作"><a href="#区间操作" class="headerlink" title="区间操作"></a>区间操作</h4><p>有Splay操作(伸展操作)的支持，区间操作就很简单的啦。</p><p>比如你想翻转一个$[1,a]$的区间，你只要找到比$a$大的一个点，让它旋到根节点，那么根节点的左子树就是[1,a]的区间了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
            <tag> splay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A_star不详解</title>
      <link href="/2019/04/23/A-star/"/>
      <url>/2019/04/23/A-star/</url>
      
        <content type="html"><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul><li>优先队列bfs</li><li>单源最短路算法</li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>当我们选择一条最短的路的时候，我们总是走估计路的距离最短的路，我们中途发现道路堵塞的时候，觉得走其他路可能会更快，而不是走直线。这其实跟A_star算法很像啦(不敢说一样啊)。</p><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><p>A_star需要一个估价函数，估计当前状态到目标的花费，然后每次根据当前花费+估计的花费进行优先队列bfs，保证每次取出的是当前花费+估计的花费最小的，然后去扩展下一个状态，就是每次保证当前花费+估计的花费最小的，而且我们要保证估价出来的花费要小于等于实际花费，不然就会跑错，如果到达终点了，那个花费必然是最小的。</p><h3 id="来道题目吧"><a href="#来道题目吧" class="headerlink" title="来道题目吧"></a>来道题目吧</h3><p><a href="http://poj.org/problem?id=2449" target="_blank" rel="noopener">POJ2449-Remmarguts’ Date</a>求k短路。</p><p>按照A_star算法，第k次访问终点的时候就是K短路的花费啦。估价函数也很容易设计，一个点到终点的估价跑个单源最短路就OK了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> tot,n,m;</span><br><span class="line"><span class="keyword">int</span> Head[<span class="number">1010</span>],nxt[N&lt;&lt;<span class="number">1</span>],ver[N&lt;&lt;<span class="number">1</span>],w[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    ver[tot]=v;</span><br><span class="line">    w[tot]=d;</span><br><span class="line">    nxt[tot]=Head[u];</span><br><span class="line">    Head[u]=tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> v[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;,greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &gt;q;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">    q.push(make_pair(<span class="number">0</span>,s));</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; tmp = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = tmp.second;</span><br><span class="line">        <span class="keyword">if</span>(v[u])<span class="keyword">continue</span>;</span><br><span class="line">        v[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[u],v; i; i=nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">            v=ver[i];</span><br><span class="line">            <span class="keyword">if</span>(d[v]&gt;d[u]+w[i])&#123;</span><br><span class="line">                d[v]=d[u]+w[i];</span><br><span class="line">                q.push(make_pair(d[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s,t,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;s,&amp;t,&amp;k);</span><br><span class="line">    <span class="keyword">if</span>(s==t)k++;</span><br><span class="line">    dijk(t);</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;,greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &gt;q;</span><br><span class="line">    q.push(make_pair(d[s],s));</span><br><span class="line">    <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; tmp = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = tmp.second;</span><br><span class="line">        ++cnt[u];</span><br><span class="line">        <span class="keyword">if</span>(cnt[t]==k) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tmp.first);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[u],v; i; i=nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                v=ver[i];</span><br><span class="line">                <span class="keyword">if</span>(cnt[v]!=k)q.push(make_pair(tmp.first-d[u]+w[i]+d[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(Head,<span class="number">0</span>,<span class="keyword">sizeof</span> Head);</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z; i&lt;=m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        add(x,y,z);</span><br><span class="line">        add(y,x,z);</span><br><span class="line">    &#125;</span><br><span class="line">    kth();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> algorithm </tag>
            
            <tag> A_star </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[POJ3085]Nightmare Ⅱ 题解报告</title>
      <link href="/2019/04/23/POJ3085/"/>
      <url>/2019/04/23/POJ3085/</url>
      
        <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3085" target="_blank" rel="noopener">传送门</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一个女孩，一个男孩和两个幽灵，女孩每秒走一步，男孩每秒走三步，幽灵每秒走两步(无视墙体)，问他们多少秒后会相遇。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然双BFS，想一下什么的bfs能控制步数，幽灵没必要bfs，算一下人与幽灵的哈密顿距离与时间乘2即可。</p><p>控制步数的bfs不会啊，QAQ，那就跑3次每次走一步的BFS。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">806</span>;</span><br><span class="line"><span class="keyword">char</span> s[N][N];</span><br><span class="line"><span class="keyword">bool</span> v1[N][N], v2[N][N];</span><br><span class="line"><span class="keyword">int</span> n, m, bx, by, gx, gy, px, py, qx, qy, s1, s2;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">0</span> || x &gt; n || y &lt;= <span class="number">0</span> || y &gt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(x - px) + <span class="built_in">abs</span>(y - py) &lt;= <span class="number">2</span> * k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(x - qx) + <span class="built_in">abs</span>(y - qy) &lt;= <span class="number">2</span> * k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (s[x][y] == <span class="string">'X'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q1, q2;</span><br><span class="line">px = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="keyword">if</span> (s[i][j] == <span class="string">'M'</span>) &#123;</span><br><span class="line">bx = i;</span><br><span class="line">by = j;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i][j] == <span class="string">'G'</span>) &#123;</span><br><span class="line">gx = i;</span><br><span class="line">gy = j;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i][j] == <span class="string">'Z'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!px) &#123;</span><br><span class="line">px = i;</span><br><span class="line">py = j;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">qx = i;</span><br><span class="line">qy = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(v1, <span class="number">0</span>, <span class="keyword">sizeof</span>(v1));</span><br><span class="line"><span class="built_in">memset</span>(v2, <span class="number">0</span>, <span class="keyword">sizeof</span>(v2));</span><br><span class="line">v1[bx][by] = <span class="number">1</span>;</span><br><span class="line">v2[gx][gy] = <span class="number">1</span>;</span><br><span class="line">q1.push(make_pair(bx, by));</span><br><span class="line">q2.push(make_pair(gx, gy));</span><br><span class="line"><span class="keyword">while</span> (q1.size() || q2.size()) &#123;</span><br><span class="line">ans++;</span><br><span class="line">s1 = q1.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s1; i++) &#123;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; now = q1.front();</span><br><span class="line">q1.pop();</span><br><span class="line"><span class="keyword">if</span> (!pd(now.first,now.second,ans)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = now.first + dx[j];</span><br><span class="line"><span class="keyword">int</span> ny = now.second + dy[j];</span><br><span class="line"><span class="keyword">if</span> (pd(nx,ny,ans) &amp;&amp; !v1[nx][ny]) &#123;</span><br><span class="line">v1[nx][ny] = <span class="number">1</span>;</span><br><span class="line">q1.push(make_pair(nx, ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s1 = q1.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s1; i++) &#123;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; now = q1.front();</span><br><span class="line">q1.pop();</span><br><span class="line"><span class="keyword">if</span> (!pd(now.first,now.second,ans)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = now.first + dx[j];</span><br><span class="line"><span class="keyword">int</span> ny = now.second + dy[j];</span><br><span class="line"><span class="keyword">if</span> (pd(nx,ny,ans) &amp;&amp; !v1[nx][ny]) &#123;</span><br><span class="line">v1[nx][ny] = <span class="number">1</span>;</span><br><span class="line">q1.push(make_pair(nx, ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s1 = q1.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s1; i++) &#123;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; now = q1.front();</span><br><span class="line">q1.pop();</span><br><span class="line"><span class="keyword">if</span> (!pd(now.first,now.second,ans)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = now.first + dx[j];</span><br><span class="line"><span class="keyword">int</span> ny = now.second + dy[j];</span><br><span class="line"><span class="keyword">if</span> (pd(nx,ny,ans) &amp;&amp; !v1[nx][ny]) &#123;</span><br><span class="line">v1[nx][ny] = <span class="number">1</span>;</span><br><span class="line">q1.push(make_pair(nx, ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s2 = q2.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s2; i++) &#123;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; now = q2.front();</span><br><span class="line">q2.pop();</span><br><span class="line"><span class="keyword">if</span> (!pd(now.first,now.second,ans)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = now.first + dx[j];</span><br><span class="line"><span class="keyword">int</span> ny = now.second + dy[j];</span><br><span class="line"><span class="keyword">if</span> (pd(nx,ny,ans) &amp;&amp; !v2[nx][ny]) &#123;</span><br><span class="line"><span class="keyword">if</span> (v1[nx][ny]) <span class="keyword">return</span> ans;</span><br><span class="line">v2[nx][ny] = <span class="number">1</span>;</span><br><span class="line">q2.push(make_pair(nx, ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i] + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bfs() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[POJ3635]Full Tank题解报告</title>
      <link href="/2019/04/22/POJ3635/"/>
      <url>/2019/04/22/POJ3635/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=3635" target="_blank" rel="noopener">传送门</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你n个点，m条边，每个点的加油站的油的价格不同，每段路要消耗d升油。给你q个询问，你的油箱最大容量为c，从s到t的最少花费。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>优先队列bfs，每个状态有两种转移的方式。</p><ol><li><p>如果当前状态加一升油比这个状态多一升的状态所花费更少，就转移过去，有点绕啊。看看代码8。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(d[u][fuel+<span class="number">1</span>]&gt;d[u][fuel]+p[u])</span><br><span class="line">d[u][fuel+<span class="number">1</span>]=d[u][fuel]+p[u];</span><br></pre></td></tr></table></figure></li><li><p>如果在这个点有能够走的路就路上的另外一个点去转移。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(d[v][fuel-z]&gt;d[u][fuel])</span><br><span class="line">d[v][fuel-z]&gt;d[u][fuel];</span><br></pre></td></tr></table></figure></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">1010</span>][<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> Head[<span class="number">1010</span>],nxt[<span class="number">20020</span>],ver[<span class="number">20020</span>],w[<span class="number">20020</span>];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">1010</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cost,u,fuel;</span><br><span class="line">    node(<span class="keyword">int</span> _cost=<span class="number">0</span>,<span class="keyword">int</span> _u=<span class="number">0</span>,<span class="keyword">int</span> _fuel=<span class="number">0</span>):cost(_cost),u(_u),fuel(_fuel)&#123;&#125;;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;x)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cost&gt;x.cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    ver[tot]=v;</span><br><span class="line">    w[tot]=d;</span><br><span class="line">    nxt[tot]=Head[u];</span><br><span class="line">    Head[u]=tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> v[<span class="number">1010</span>][<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">    q.push(node(<span class="number">0</span>,s,<span class="number">0</span>));</span><br><span class="line">    d[s][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        node tmp = q.top();q.pop();</span><br><span class="line">        <span class="keyword">if</span>(tmp.u==t)<span class="keyword">return</span> tmp.cost;</span><br><span class="line">        <span class="keyword">int</span> city = tmp.u;</span><br><span class="line">        <span class="keyword">int</span> fuel = tmp.fuel;</span><br><span class="line">        <span class="keyword">if</span>(v[city][fuel])<span class="keyword">continue</span>;</span><br><span class="line">        v[city][fuel]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(fuel&lt;c&amp;&amp;d[city][fuel+<span class="number">1</span>]&gt;d[city][fuel]+p[city])&#123;</span><br><span class="line">            d[city][fuel+<span class="number">1</span>]=d[city][fuel]+p[city];</span><br><span class="line">            q.push(node(d[city][fuel+<span class="number">1</span>],city,fuel+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[city],v;i;i=nxt[i])&#123;</span><br><span class="line">            v=ver[i];</span><br><span class="line">            <span class="keyword">if</span>(w[i]&lt;=fuel&amp;&amp;d[v][tmp.fuel-w[i]]&gt;d[city][tmp.fuel])&#123;</span><br><span class="line">                d[v][tmp.fuel-w[i]]=d[city][tmp.fuel];</span><br><span class="line">                q.push(node(tmp.cost,v,fuel-w[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">        tot=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,p+i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            add(x,y,z);</span><br><span class="line">            add(y,x,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="keyword">int</span> c,s,t;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;c,&amp;s,&amp;t);</span><br><span class="line">            <span class="keyword">int</span> ans=bfs(c,s,t);</span><br><span class="line">            <span class="keyword">if</span>(ans==<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"impossible"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>在用优先队列bfs的时候，虽然维护了像普通bfs那样的有序，但是还是有点不同的。不要因为它是优先队列就猛地迈大步，还是要像普通bfs一样一步一步地走，不能迈大的步伐。</p>]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20190413华工赛</title>
      <link href="/2019/04/19/2019huagong/"/>
      <url>/2019/04/19/2019huagong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/625#question" target="_blank" rel="noopener">比赛链接</a></p><h2 id="A-NB群友"><a href="#A-NB群友" class="headerlink" title="A.NB群友"></a>A.NB群友</h2><blockquote><p>CC是著名的算法竞赛选手，他不仅人长得帅，而且技术了得，自然而然就有了许多粉丝。</p><p>为了能帮助粉丝们提高竞技水平，CC建立了一个粉丝群，每天CC都会在粉丝群里和群友深入交流黑科技。然而，有些群友老是不努力训练，成天想着复读，比如当CC在群里面发了个整数0，那紧接着就会有群友发整数1，然后又会有群友发整数2……这引起了CC的不满，于是CC决定踢掉一些群友。</p><p>CC的粉丝群人数为无穷大。当CC发出整数0后，其他群友就会跟着轮流发整数1, 2, 3, 4, …，依此类推。需要注意的是，每个群友都会恰好发一次整数，每个群友发的整数两两不同。CC认为，在不考虑前导零的情况下，如果某个群友发的整数在十进制表示下的各位数字不含0及1，那么这个群友就是NB的，否则就是不NB的。例如，群友A发的整数是3482，该数的各位数字分别为3、4、8、2，其中不含0、1，因此群友A是NB的；另一方面，群友B发的整数402，而该数的十位数字是0，因此群友B是不NB的。</p><p>现在CC决定，踢掉所有不NB的群友。于是经过一番奥妙重重的踢人操作后，粉丝群里只剩下NB群友。然而，CC觉得剩下的这些NB群友还是too naive，因此他打算邀请一些NB群友参加线下训练营（来现场教做人）。具体来说，CC会给出两个正整数L,R，然后他会邀请发出的整数的各位数字之积在区间[L,R]内的NB群友。</p><p>举例来说，假如CC给出的区间为L = 50, R = 300，那么发了567的群友会被邀请线下参赛，因为5×6×7=210；同理，发了255的群友也会被邀请，因为2×5×5=50。但是，发了328的群友则不会收到邀请，因为3×2×8=48∉[50,300]。</p></blockquote><h3 id="题意简化-读题读死人"><a href="#题意简化-读题读死人" class="headerlink" title="题意简化(读题读死人)"></a>题意简化(读题读死人)</h3><p>在[L,R]的这个范围里面找有多少个数是只通过[2,9]这些因子组成的。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>爆搜就好，枚举每个因子的数量就行</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> lim = <span class="number">1l</span>l&lt;&lt;<span class="number">32</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l,r;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> fac[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> fac_1[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> res,<span class="keyword">int</span> pre,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res&gt;r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pre==<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res&gt;=l&amp;&amp;res!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> ttt=fac[len];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">                ttt=ttt*fac_1[num[i]]%mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ttt;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> kk=<span class="number">1</span>;</span><br><span class="line">    num[pre]=<span class="number">0</span>;</span><br><span class="line">    ans+=dfs(res,pre+<span class="number">1</span>,len);</span><br><span class="line">    <span class="keyword">if</span>(ans&gt;=mod)ans-=mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">32</span>;i++)&#123;</span><br><span class="line">        kk*=pre;</span><br><span class="line">        <span class="keyword">if</span>(res*kk&lt;=r)&#123;</span><br><span class="line">            num[pre]=i;</span><br><span class="line">            ans+=dfs(res*kk,pre+<span class="number">1</span>,len+i);</span><br><span class="line">            <span class="keyword">if</span>(ans&gt;=mod)ans-=mod;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    fac[<span class="number">1</span>]=fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    fac_1[<span class="number">0</span>]=fac_1[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">40</span>;i++)&#123;</span><br><span class="line">        fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        fac_1[i]=(mod-(mod/i))*fac_1[mod%i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">40</span>;i++)&#123;</span><br><span class="line">        fac_1[i]=fac_1[i<span class="number">-1</span>]*fac_1[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dfs(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-翻牌游戏"><a href="#F-翻牌游戏" class="headerlink" title="F.翻牌游戏"></a>F.翻牌游戏</h2><blockquote><p><a href="https://ac.nowcoder.com/acm/contest/625/F" target="_blank" rel="noopener">题目链接</a></p></blockquote><h3 id="题意简化"><a href="#题意简化" class="headerlink" title="题意简化"></a>题意简化</h3><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>概率dp</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,(n&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>);<span class="built_in">puts</span>(<span class="string">".00"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Parco-Love-GCD"><a href="#H-Parco-Love-GCD" class="headerlink" title="H.Parco_Love_GCD"></a>H.Parco_Love_GCD</h2><blockquote><p><a href="https://ac.nowcoder.com/acm/contest/625/H" target="_blank" rel="noopener">题目链接</a></p></blockquote><h3 id="题意简化-1"><a href="#题意简化-1" class="headerlink" title="题意简化"></a>题意简化</h3><p>给你一段数字，把所有的区间的GCD的和求出来。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>数据出水了？$O(n^2)$的代码过了。</p><p>正解是$O(nlogn)$，做个GCD的ST表，枚举左端点，二分找gcd连续的一段来贡献答案。(嘴炮打码)</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500010</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> D;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,a+i);</span><br><span class="line">    D=a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)D=__gcd(D,a[i]);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> tmp=a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)&#123;</span><br><span class="line">            tmp=__gcd(tmp,a[j]);</span><br><span class="line">            ans+=tmp;</span><br><span class="line">            <span class="keyword">if</span>(ans&gt;=mod)ans-=mod;</span><br><span class="line">            <span class="keyword">if</span>(tmp==D)&#123;</span><br><span class="line">                (ans+=(n-j)*D)%=mod;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>技能前摇过长警告</del></p>]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRT/exCRT</title>
      <link href="/2019/04/15/math3/"/>
      <url>/2019/04/15/math3/</url>
      
        <content type="html"><![CDATA[<h2 id="CRT-中国剩余定理"><a href="#CRT-中国剩余定理" class="headerlink" title="CRT(中国剩余定理)"></a>CRT(中国剩余定理)</h2><p>给你一个方程组<br>$$<br>x=a_1 \mod {m_1}<br>$$</p><p>$$<br>x=a_2 \mod{m_2}<br>$$</p><p>$$<br>x=a_3 \mod{m_3}<br>$$</p><p>保证每个$m_i$两两互质，求$x$。</p><p>我们先臆想一个神奇的解出来，</p><p>设$m=\prod_{1}^{n}{m_i}$，$M_i=m / m_i$，$t_i\times M_i=1(\mod m_i)$。</p><p>得 $x=\sum_{i=1}^{n}a_i\times M_i\times t_i$</p><p>得出的$x$是在M范围内的唯一解。</p><h3 id="假装证明"><a href="#假装证明" class="headerlink" title="假装证明"></a>假装证明</h3><p>当求$x\mod m_i$的时候，其他的$a_j\times M_j\times t_j(j\neq i)$都会有$m_i$的这个因子，所以只需考虑$a_i\times M_i\times t_i$这个式子。因为$M_i\times t_i= 1(\mod m_i)$，所以 $ x=a_i(\mod m_i) $ 。证毕。</p><p>当然这只是其中一个解啦。</p><h2 id="exCRT-留坑"><a href="#exCRT-留坑" class="headerlink" title="exCRT(留坑)"></a>exCRT(留坑)</h2><p>不保证每个$m_i$两两互质，求$x$。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIOJ_142_数学等式题解报告</title>
      <link href="/2019/04/08/MIOJ142/"/>
      <url>/2019/04/08/MIOJ142/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>$$<br>a\times{x_1}^3+b\times{x_2}^3+c\times{x_3}^3=d\times{x_4}^3+e\times{x_5}^3<br>$$</p><p>给你这个式子，给你$abcde$ 这5个数，你找出满足这条式子的($x_1,x_2,x_3,x_4,x_5$)的组数。而且$x,a,b,c,d,e$均在$[-50,50]$的范围里面。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>无脑暴力$O(n^5)$是不行的。</p><p>优雅的暴力$O(n^3)$，先把左边的全部数值给暴力出来，再做右边的数，看看有没有数在左边的数值中出现过。我写了二分查找，好像也可以直接计数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num[<span class="number">1040000</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n3[<span class="number">120</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">-50</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line">        n3[i+<span class="number">50</span>]=i*i*i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a,b,c,d,e;</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld"</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">-50</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">-50</span>;j&lt;=<span class="number">50</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">-50</span>;k&lt;=<span class="number">50</span>;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(k==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                num[top]=(a*n3[i+<span class="number">50</span>]+b*n3[j+<span class="number">50</span>]+c*n3[k+<span class="number">50</span>]);</span><br><span class="line">                top++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>,tmp;</span><br><span class="line">    sort(num,num+top);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">-50</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">-50</span>;j&lt;=<span class="number">50</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            tmp=d*n3[i+<span class="number">50</span>]+e*n3[j+<span class="number">50</span>];</span><br><span class="line">            ans+=upper_bound(num,num+top,tmp)-lower_bound(num,num+top,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开num数组的时候想着是$100<em>100</em>100$，编译器已经给warning了，然后跑了一下RE，后面才发现是$101<em>101</em>101$，我佛了。</p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>这里有一个比较重要的思想：MITM(meet in the middle)</p><p><a href="https://www.zhihu.com/people/ruan-xing-zhi/activities" target="_blank" rel="noopener">阮行止聚聚的知乎</a></p><p><a href="https://ruanx.pw/post/MEET-IN-THE-MIDDLE.html" target="_blank" rel="noopener">阮行止聚聚的课件</a></p>]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MITM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIOJ_140_贪吃的细胞题解报告</title>
      <link href="/2019/04/08/MIOJ140/"/>
      <url>/2019/04/08/MIOJ140/</url>
      
        <content type="html"><![CDATA[<p><a href="https://code.mi.com/problem/list/view?id=140" target="_blank" rel="noopener">传送门</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有一个细胞在‘S’处，一个细胞每吃到$k$ml培养液，就会分裂成k+1个细胞，求吃完所有培养液的时间，每一秒只有一个细胞可以动。如果不能吃完就输出-1。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>有限制的最小生成树。</p><p>首先S只能有一个度，有$k$ml培养液的点最多有k+2个度，一个是细胞进入培养液的，吃完培养液之后就可以有k+1个细胞从这个点出去。按照这个限制跑个最小生成树即可，保证只生成一个最小生成树就是能够全部吃完。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>目前还不保证正确，mioj出锅了，还没官宣std，这是从神奇的std改过来的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) (a&gt;b?a:b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">250005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,l;</span><br><span class="line">&#125;k[maxn];</span><br><span class="line"><span class="keyword">int</span> t,m,n,lm,d[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> mm[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    k[lm].x=u;</span><br><span class="line">    k[lm].y=v;</span><br><span class="line">    k[lm].l=w;</span><br><span class="line">    lm++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    node a,b;</span><br><span class="line">    a.x=x,a.y=y,a.l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> vis[<span class="number">105</span>][<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    vis[a.x][a.y]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt;qu;</span><br><span class="line">    qu.push(a);</span><br><span class="line">    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">        a=qu.front();</span><br><span class="line">        qu.pop();</span><br><span class="line">        <span class="keyword">if</span>((mm[a.x][a.y]&gt;=<span class="string">'1'</span>&amp;&amp;mm[a.x][a.y]&lt;=<span class="string">'9'</span>)||mm[a.x][a.y]==<span class="string">'S'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.l)add(s,a.x*<span class="number">100</span>+a.y,a.l);</span><br><span class="line">        &#125;</span><br><span class="line">        b.l=a.l+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            b.x=a.x+d[i][<span class="number">0</span>];</span><br><span class="line">            b.y=a.y+d[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(b.x&gt;=<span class="number">0</span>&amp;&amp;b.x&lt;n&amp;&amp;b.y&gt;=<span class="number">0</span>&amp;&amp;b.y&lt;m&amp;&amp;!vis[b.x][b.y]&amp;&amp;mm[b.x][b.y]!=<span class="string">'#'</span>)&#123;</span><br><span class="line">                vis[b.x][b.y]=<span class="number">1</span>;</span><br><span class="line">                qu.push(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_adge</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="keyword">if</span>(mm[i][j]!=<span class="string">'#'</span>&amp;&amp;mm[i][j]!=<span class="string">'.'</span>)</span><br><span class="line">                bfs(i*<span class="number">100</span>+j,i,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fi</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[n]=r[n]==n?n:fi(r[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.l&lt;y.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> vis[<span class="number">10005</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">        r[i]=i;</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(k,k+lm,cmp);</span><br><span class="line">    <span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lm;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> fx=fi(k[i].x);</span><br><span class="line">        <span class="keyword">int</span> fy=fi(k[i].y);</span><br><span class="line">        <span class="keyword">if</span>((mm[k[i].x/<span class="number">100</span>][k[i].x%<span class="number">100</span>]-<span class="string">'0'</span>)+<span class="number">2</span>==vis[k[i].x])<span class="keyword">continue</span> ;</span><br><span class="line">        <span class="keyword">if</span>((mm[k[i].y/<span class="number">100</span>][k[i].y%<span class="number">100</span>]-<span class="string">'0'</span>)+<span class="number">2</span>==vis[k[i].y])<span class="keyword">continue</span> ;</span><br><span class="line">        <span class="keyword">if</span>(mm[k[i].x/<span class="number">100</span>][k[i].x%<span class="number">100</span>]==<span class="string">'S'</span>&amp;&amp;vis[k[i].x])<span class="keyword">continue</span> ;</span><br><span class="line">        <span class="keyword">if</span>(mm[k[i].y/<span class="number">100</span>][k[i].y%<span class="number">100</span>]==<span class="string">'S'</span>&amp;&amp;vis[k[i].y])<span class="keyword">continue</span> ;</span><br><span class="line">        <span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">            r[fx]=fy;</span><br><span class="line">            vis[k[i].x]++;</span><br><span class="line">            vis[k[i].y]++;</span><br><span class="line">            out+=k[i].l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((mm[i/<span class="number">100</span>][i%<span class="number">100</span>]&gt;=<span class="string">'1'</span>&amp;&amp;mm[i/<span class="number">100</span>][i%<span class="number">100</span>]&lt;=<span class="string">'9'</span>)||mm[i/<span class="number">100</span>][i%<span class="number">100</span>]==<span class="string">'S'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fi(i)==i)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans!=<span class="number">1</span>)out=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;out&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(mm,<span class="number">0</span>,<span class="keyword">sizeof</span>(mm));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,mm[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        lm=<span class="number">0</span>;</span><br><span class="line">        make_adge();</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[POJ1475] Pushing Boxes 题解报告</title>
      <link href="/2019/04/06/POJ1475/"/>
      <url>/2019/04/06/POJ1475/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=1475" target="_blank" rel="noopener">传送门</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>推箱子，输出路径，先要求整个的路径最短，如果有多个最短路径，选推箱子的次数最少的。没有路径的输出Impossible。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>很明显，箱子要跑bfs，但跑bfs的时候要判断移动是否合法，箱子移动后，人必在箱子移动前的位置，而人要能到达箱子移动的反方向的那个格子上。</p><h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line">#.......TB##</span><br><span class="line">#..........#</span><br><span class="line">#......S...#</span><br><span class="line">############</span><br></pre></td></tr></table></figure><p>像这种的人要能到达B的右边才能推动箱子。</p><p>所以在跑箱子bfs的时候，要判断人能不能到达推动箱子的那个格子上。</p><p>明显是双bfs。</p><h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line">#T##########</span><br><span class="line">#..B.......#</span><br><span class="line">#.#######..#</span><br><span class="line">#.....S....#</span><br><span class="line">############</span><br></pre></td></tr></table></figure><p>转移到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line">#T##########</span><br><span class="line">#BS........#</span><br><span class="line">#.#######..#</span><br><span class="line">#..........#</span><br><span class="line">############</span><br></pre></td></tr></table></figure><p>人就要去到箱子的另外一边推。可能一开始想到这个感觉会有点棘手，打起来就也就那样打。</p><p>所以箱子的bfs的状态上就存箱子的座标、人的座标和答案，每次按题意更新答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> box[]=&#123;<span class="string">'N'</span>,<span class="string">'S'</span>,<span class="string">'W'</span>,<span class="string">'E'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> peo[]=&#123;<span class="string">'n'</span>,<span class="string">'s'</span>,<span class="string">'w'</span>,<span class="string">'e'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>   dx[]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>   dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,num;</span><br><span class="line"><span class="keyword">char</span> mmp[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="built_in">string</span> tmp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,px,py;</span><br><span class="line">    <span class="built_in">string</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;<span class="number">0</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;<span class="number">0</span>&amp;&amp;y&lt;=m&amp;&amp;mmp[x][y]!=<span class="string">'#'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs2</span><span class="params">(P p1,P p2)</span></span>&#123;</span><br><span class="line">    tmp=<span class="string">""</span>;</span><br><span class="line">    P st;</span><br><span class="line">    st.x=p1.px;</span><br><span class="line">    st.y=p1.py;</span><br><span class="line">    st.ans=<span class="string">""</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;P&gt;q;</span><br><span class="line">    q.push(st);</span><br><span class="line">    <span class="keyword">bool</span> v[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        P now=q.front(),nxt;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(now.x==p1.x&amp;&amp;now.y==p1.y)&#123;</span><br><span class="line">            tmp=now.ans;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            nxt = now;</span><br><span class="line">            nxt.x = now.x + dx[i];</span><br><span class="line">            nxt.y = now.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (!valid(nxt.x, nxt.y)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (nxt.x == p2.x &amp;&amp; nxt.y == p2.y) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (v[nxt.x][nxt.y]) <span class="keyword">continue</span>;</span><br><span class="line">            v[nxt.x][nxt.y] = <span class="number">1</span>;</span><br><span class="line">            nxt.ans = now.ans + peo[i];</span><br><span class="line">            q.push(nxt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">bfs1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    P st;</span><br><span class="line">    st.x=st.y=st.px=st.py=<span class="number">-1</span>;</span><br><span class="line">    st.ans=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n&amp;&amp;(st.x==<span class="number">-1</span>||st.px==<span class="number">-1</span>);i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m&amp;&amp;(st.x==<span class="number">-1</span>||st.px==<span class="number">-1</span>);j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mmp[i][j]==<span class="string">'B'</span>)&#123;</span><br><span class="line">                st.x=i;</span><br><span class="line">                st.y=j;</span><br><span class="line">                mmp[i][j]=<span class="string">'.'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mmp[i][j]==<span class="string">'S'</span>)&#123;</span><br><span class="line">                st.px=i;</span><br><span class="line">                st.py=j;</span><br><span class="line">                mmp[i][j]=<span class="string">'.'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;P&gt;q;</span><br><span class="line">    q.push(st);</span><br><span class="line">    <span class="keyword">bool</span> v[<span class="number">25</span>][<span class="number">25</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">    <span class="built_in">string</span> ans = <span class="string">"Impossible."</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> cntans=<span class="number">0x3f3f3f3f</span>,cnt=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        P prv,now=q.front(),nxt;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(mmp[now.x][now.y]==<span class="string">'T'</span>)&#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> cntnow=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> len = now.ans.length();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i =<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(now.ans[i]&gt;=<span class="string">'A'</span>&amp;&amp;now.ans[i]&lt;=<span class="string">'Z'</span>)cntnow++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cntnow&lt;cntans||(cntnow==cntans&amp;&amp;len&lt;cnt))&#123;</span><br><span class="line">                ans = now.ans;</span><br><span class="line">                cntans=cntnow;</span><br><span class="line">                cnt=len;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            nxt=now;</span><br><span class="line">            nxt.x = now.x + dx[i];</span><br><span class="line">            nxt.y = now.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span>(!valid(nxt.x,nxt.y))<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(v[nxt.x][nxt.y][i])<span class="keyword">continue</span>;</span><br><span class="line">            prv = now;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">3</span>)prv.y=now.y<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">2</span>)prv.y=now.y+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>)prv.x=now.x<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> prv.x=now.x+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!bfs2(prv,now))<span class="keyword">continue</span>;</span><br><span class="line">            v[nxt.x][nxt.y][i]=<span class="number">1</span>;</span><br><span class="line">            nxt.ans=now.ans+tmp+box[i];</span><br><span class="line">            nxt.px=now.x;</span><br><span class="line">            nxt.py=now.y;</span><br><span class="line">            q.push(nxt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;(mmp[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Maze #"</span>&lt;&lt;++num&lt;&lt;<span class="built_in">endl</span>&lt;&lt;bfs1()&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&amp;&amp;n&amp;&amp;m)&#123;</span><br><span class="line">        work();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷<a href="https://item.jd.com/20111313.html" target="_blank" rel="noopener">蓝书</a>真虐心，基础不熟练啊，加油加油。</p>]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang</title>
      <link href="/2019/04/01/golang1/"/>
      <url>/2019/04/01/golang1/</url>
      
        <content type="html"><![CDATA[<h2 id="安装go环境"><a href="#安装go环境" class="headerlink" title="安装go环境"></a>安装go环境</h2><p><a href="https://golang.org" target="_blank" rel="noopener">go的官方网站</a></p><p>好像有墙(逃</p><p>不愧是出自404公司之手的与语言啊</p><p>我大arch系，直接pacman装就好了(逃</p><p>可以来<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">这里</a>下，一直不知道google.cn是谁在维护的，但是能用。</p><h2 id="linux设置"><a href="#linux设置" class="headerlink" title="linux设置"></a>linux设置</h2><p>在/etc/profile 中增加一下设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=/usr/lib/go //这是你的go所在的目录</span><br><span class="line">export GOPATH=~/golib:~/goproject</span><br><span class="line">export GOBIN=~/gobin</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOBIN</span><br></pre></td></tr></table></figure><p>其实很多还是看不懂的（留坑）</p><p>修改完之后，输入以下，使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心协日程表</title>
      <link href="/2019/03/28/ggxx3/"/>
      <url>/2019/03/28/ggxx3/</url>
      
        <content type="html"><![CDATA[<p>下面都是开始事务的时间点，并非持续的时间段</p><table><thead><tr><th align="left">时间点</th><th>事务</th></tr></thead><tbody><tr><td align="left">活动前四周</td><td>活动部开始筹备活动</td></tr><tr><td align="left">活动前两周半</td><td>秘书部申请教室</td></tr><tr><td align="left">活动前两周</td><td>宣传部做海报/ppt</td></tr><tr><td align="left">活动前一周</td><td>心联部打印时长条</td></tr><tr><td align="left">活动当天</td><td>拿物资/资源准备</td></tr><tr><td align="left">活动现场</td><td>拍照</td></tr><tr><td align="left">活动结束</td><td>合照</td></tr><tr><td align="left">活动后</td><td>新闻稿/推文</td></tr></tbody></table><p>下面是神奇的活动</p><p>学生会主办，心协协办的快乐运动活动?(雾(log:2019/03/28)</p><table><thead><tr><th align="left">时间点</th><th>事务</th></tr></thead><tbody><tr><td align="left">活动前六周</td><td>每个部门策划活动</td></tr><tr><td align="left">活动前四周</td><td>决定最终方案给主办方</td></tr><tr><td align="left">活动前三周</td><td>统计报名资料/安排道具</td></tr><tr><td align="left">活动前两周</td><td>拉群/通知注意事项/解答问题</td></tr><tr><td align="left">活动前两周</td><td>线下宣传</td></tr><tr><td align="left">活动现场</td><td>拍照</td></tr><tr><td align="left">活动后</td><td>新闻稿/推文</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工作记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种数学推论</title>
      <link href="/2019/03/17/mathmix/"/>
      <url>/2019/03/17/mathmix/</url>
      
        <content type="html"><![CDATA[<h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><h3 id="lim-limits-n-to-inf-1-frac-x-n-n-e-x"><a href="#lim-limits-n-to-inf-1-frac-x-n-n-e-x" class="headerlink" title="$\lim \limits_{n \to inf} (1+\frac{x}{n})^n=e^x$"></a>$\lim \limits_{n \to inf} (1+\frac{x}{n})^n=e^x$</h3><p>要证上式即是要证下式<br>$$<br>n\times ln(1+\frac{x}{n})=x<br>$$<br>令$k=\frac{1}{n}$，使得$n=\frac{1}{k}$<br>$$<br>\frac{ln(1+x\times k)}{k}=x<br>$$<br>下面左式来个洛必达$\frac{0}{0}$<br>$$<br>\frac{x}{1+x\times k}=x<br>$$<br>证毕</p><h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><p><a href="https://blog.csdn.net/bigtiao097/article/details/77242624" target="_blank" rel="noopener">转自zhaozhengcc</a><br>$$<br>C_n^m = C _{n-1}^{m-1}+C _{n-1}^{m}<br>$$</p><p>$$<br>mC_n^m = nC _{n-1}^{m-1}<br>$$</p><p>$$<br>C_n^0+C_n^1+C_n^2+……+C_n^n = 2^n<br>$$</p><p>$$<br>1C_n^1+2C_n^2+3C_n^3+……+nC_n^n =n2^{n-1}<br>$$</p><p>$$<br>1^2C_n^1+2^2C_n^2+3^2C_n^3+……+n^2C _n^n =n(n+1)2^{n-2}<br>$$</p><p>$$<br>\frac{C_n^1}{1}-\frac{C_n^2}{2}+\frac{C_n^3}{3}+……+(-1)^{n-1}\frac{C _n^n}{n} =1 + \frac{1}{2}+ \frac{1}{3}+……+ \frac{1}{n}<br>$$</p><p>$$<br>(C_n^0)^2+(C_n^1)^2+(C_n^2)^2+\cdots+(C_n^{n})^2 = C_{2n}^n<br>$$</p><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><h3 id="通项公式"><a href="#通项公式" class="headerlink" title="通项公式"></a>通项公式</h3><p>$$<br>f_n=\frac{1}{\sqrt{5}}((\frac{1+\sqrt{5}}{2})^n-(\frac{1-\sqrt{5}}{2})^n)<br>$$</p><h3 id="前n项求和公式"><a href="#前n项求和公式" class="headerlink" title="前n项求和公式"></a>前n项求和公式</h3><p>$$<br>S_n=f_{n+2}-1=\sum_{i=1}^{n}f_i<br>$$</p><h3 id="不知道怎么来的公式"><a href="#不知道怎么来的公式" class="headerlink" title="不知道怎么来的公式"></a>不知道怎么来的公式</h3><p>$$<br>f_{2n}=f_{n+1}\times f_{n}+f_n\times f_{n-1}=f_{n+1}\times f_{n}+f_n\times(f_{n+1}-f_{n})<br>$$</p><p>$$<br>f_{2n+1}=f_{n+1}\times f_{n+1}+f_n\times f_n<br>$$</p><p>可能会比矩阵快速幂要快</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>manjaro折腾记</title>
      <link href="/2019/03/12/manjaro1/"/>
      <url>/2019/03/12/manjaro1/</url>
      
        <content type="html"><![CDATA[<h2 id="过度过程"><a href="#过度过程" class="headerlink" title="过度过程"></a>过度过程</h2><p>ubuntu-&gt;deepin-&gt;manjaro-deepin-&gt;manjaro kde-&gt;manjaro-deepin</p><h2 id="在deepin过度到manjaro-deepin"><a href="#在deepin过度到manjaro-deepin" class="headerlink" title="在deepin过度到manjaro-deepin"></a>在deepin过度到manjaro-deepin</h2><p>deepin的dde有丶好用<del>（其实是不想 去重新熟悉一个新的环境，例如KDE）</del>真香。</p><h2 id="在windows下烧U盘"><a href="#在windows下烧U盘" class="headerlink" title="在windows下烧U盘"></a>在windows下烧U盘</h2><p> 要用<a href="https://rufus.ie/" target="_blank" rel="noopener">refus</a>，要用DD模式烧。用Universal USB Installer烧的话，会无法引导。</p><p>学校的drcom会占用XXshellXXX.dll，忘记具体名称了，会导致refus使用不了，关了就完事</p><h2 id="源"><a href="#源" class="headerlink" title="源"></a>源</h2><h3 id="国内源"><a href="#国内源" class="headerlink" title="国内源"></a>国内源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China  //改为国内源,在n弹出的框中选一个就好</span><br><span class="line">sudo pacman -Syy  //更新数据源</span><br></pre></td></tr></table></figure><h3 id="archlinuxcn"><a href="#archlinuxcn" class="headerlink" title="archlinuxcn"></a>archlinuxcn</h3><p>修改/etc/pacman.conf，在最后添加</p><p>下面选一个就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch  //添加清华源</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch //添加中科大源</span><br></pre></td></tr></table></figure><p>之后要添加PGP签名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><p>刷新缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syy</span><br></pre></td></tr></table></figure><p>我校园网用清华源能跑满带宽，中科大的不行，中科大的更新速度略快于清华。</p><h2 id="安装搜狗拼音"><a href="#安装搜狗拼音" class="headerlink" title="安装搜狗拼音"></a>安装搜狗拼音</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx-im</span><br><span class="line">sudo pacman -S fcitx-configtool</span><br><span class="line">sudo pacman -S fcitx-sogoupinyin</span><br></pre></td></tr></table></figure><p>修改配置文件~/.xprofile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=”@im=fcitx”</span><br></pre></td></tr></table></figure><h2 id="其他很多都能在manjaro的添加-删除软件里面找"><a href="#其他很多都能在manjaro的添加-删除软件里面找" class="headerlink" title="其他很多都能在manjaro的添加/删除软件里面找"></a>其他很多都能在manjaro的添加/删除软件里面找</h2><p>gugugu</p><h2 id="KDE"><a href="#KDE" class="headerlink" title="KDE"></a>KDE</h2><h3 id="baloo-file-extractor"><a href="#baloo-file-extractor" class="headerlink" title="baloo_file_extractor"></a>baloo_file_extractor</h3><p>就是这个家伙，总把我的CPU跑12%，用久之后占用3G的共享内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">mv /usr/bin/baloo_file_extractor /usr/bin/baloo_file_extractor.orig</span><br><span class="line">ln -s /bin/<span class="literal">true</span> /usr/bin/baloo_file_extractor</span><br></pre></td></tr></table></figure><p>这就完事</p><h2 id="ibus-rime"><a href="#ibus-rime" class="headerlink" title="ibus-rime"></a>ibus-rime</h2><p>fcitx后台也好像挺费CPU的，所以也换到ibus了，rime根据github上的来配置简体中文即可（要看看文档了）</p><hr><h1 id="updata：2019-04-06"><a href="#updata：2019-04-06" class="headerlink" title="updata：2019-04-06"></a>updata：2019-04-06</h1><p>我又从kde跳回deepin了，kde的设置太多了</p><hr><h1 id="update-2019-05-01"><a href="#update-2019-05-01" class="headerlink" title="update : 2019-05-01"></a>update : 2019-05-01</h1><p>尝试了三个flagship版(kde,xfce,gnome)的manjaro和15.10的deepin，本来想用回deepinos的，第一次装wechat什么的都可以的，第二次装就说依赖出问题了，不愧是基于debian的啊，然后又装回来了，晕死。不愧是基于arch的manjaro，xjb装就可以，很少考虑依赖的问题。</p><h2 id="ibus"><a href="#ibus" class="headerlink" title="ibus"></a>ibus</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ibus ibus-rime</span><br></pre></td></tr></table></figure><p>修改配置文件~/.xprofile</p><p>添加下面几行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=ibus</span><br><span class="line">export QT_IM_MODULE=ibus</span><br><span class="line">export XMODIFIERS=@im=ibus</span><br><span class="line">ibus-daemon -d -x</span><br></pre></td></tr></table></figure><p>修改配置文件~/.bashrc</p><p>添加下面几行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=ibus</span><br><span class="line">export XMODIFIERS=@im=ibus</span><br><span class="line">export QT_IM_MODULE=ibus</span><br></pre></td></tr></table></figure><p>感觉操作冗余了，dalao们教一教啊。</p><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下面两行选一个就行了，第一行为curl，第二行为wget，没装的自己装一下就行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br><span class="line">sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"</span><br></pre></td></tr></table></figure><p>.zshrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;agnoster&quot;</span><br><span class="line">plugins=(git autojump zsh-autosuggestions zsh-syntax-highlighting archlinux)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bayes&#39;theorem</title>
      <link href="/2019/03/10/bayes/"/>
      <url>/2019/03/10/bayes/</url>
      
        <content type="html"><![CDATA[<h3 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h3><p>$$<br>P(A_i|B)=\frac{P(A_i)P(B|A_i)}{\sum_{j=1}^{n}P(A_j)P(B|A_j)}<br>$$</p><p>一见面先抛公式。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>当公式左边的概率难以求得的时候，我们可以通过右面的公式求得左边的值，有点像反演的思想。</p><h4 id="推-倒-导"><a href="#推-倒-导" class="headerlink" title="推 倒 导"></a>推 <del>倒</del> 导</h4><p>前置技能</p><h5 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h5><p>当发生事件X的时候，发生事件Y的概率。</p><p>即是当两件事情同时发生的概率除以发生X发生的概率。<br>$$<br>P(Y|X)=\frac{P(XY)}{P(X)}<br>$$</p><h5 id="全概率公式"><a href="#全概率公式" class="headerlink" title="全概率公式"></a>全概率公式</h5><p>将样本空间划分成$n$件相互独立事件，求事件X的发生的概率，就是样本空间每件独立事件与事件X同时发生的概率乘每件事件发生的概率，然后全部加起来即可。<br>$$<br>P(X)=\sum_{i=1}^{n} {P(Y_i)P(X|Y_i)}<br>$$</p><h5 id="开冲！"><a href="#开冲！" class="headerlink" title="开冲！"></a>开冲！</h5><p>$$<br>P(A_i|B)=\frac{P(A_{i}B)}{P(B)}=\frac{P(A_i)P(B|A_i)}{\sum_{j=1}^{n}P(A_j)P(B|A_j)}<br>$$</p><p>就是下面用全概率公式即可推到得出贝叶斯公式。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
            <tag> Probability theory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTC Warning</title>
      <link href="/2019/03/09/FTC%20Warning/"/>
      <url>/2019/03/09/FTC%20Warning/</url>
      
        <content type="html"><![CDATA[<h2 id="FXXK-the-code"><a href="#FXXK-the-code" class="headerlink" title="FXXK the code"></a>FXXK the code</h2><h3 id="ACM"><a href="#ACM" class="headerlink" title="ACM"></a>ACM</h3><ul><li>检查全局变量和局部变量</li><li>改用int就不要用char，该用long long的时候就不要用int</li><li>switch一定要用break(不熟悉就别用)</li><li>跑线性逆元和阶乘的时候，从2开始跑。</li><li>BFS要注意入队情况</li></ul><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul><li>在有数学表达式的markdown文件里面不要用星号，会被解析为斜体，\cdot(点乘)，\times(叉乘)，\div(除以)。<br>$$<br>\cdot(点乘)，\times(叉乘)，\div(除以)<br>$$</li></ul>]]></content>
      
      
      <categories>
          
          <category> 错误记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mobius inversion formula</title>
      <link href="/2019/01/24/Mobius-inversion-formula/"/>
      <url>/2019/01/24/Mobius-inversion-formula/</url>
      
        <content type="html"><![CDATA[<h2 id="整除分块"><a href="#整除分块" class="headerlink" title="整除分块"></a>整除分块</h2><p>$$<br>\sum_{i=1}^{n} \lfloor \frac {n}{i}\rfloor<br>$$</p><table><thead><tr><th align="center">i</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th><th align="center">12</th><th align="center">13</th><th align="center">14</th><th align="center">15</th><th align="center">16</th><th align="center">17</th><th align="center">18</th><th align="center">19</th><th align="center">20</th></tr></thead><tbody><tr><td align="center">$\lfloor \frac {n}{i}\rfloor$</td><td align="center">20</td><td align="center">10</td><td align="center">6</td><td align="center">5</td><td align="center">4</td><td align="center">3</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><p>$n/(n/i)$</p><p>$n/i$就是要求的答案，$n(n/i)$就是满足大于等于答案的最大值$i_{max}$，每次根据这个范围去求就好了。$n/(n/i)=i_{max}$，就可以看成$k*(n/i)\le n$这个式子就k的最大值。</p><p>$O(2\sqrt{n})$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">r=n/(n/l);</span><br><span class="line">   ans+=(r-l+<span class="number">1</span>)*(n/l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><h3 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h3><p>$\gcd(x,y)=1$ $f(xy)=f(x)*f(y)$  欧拉函数 莫比乌斯函数</p><h3 id="完全积性函数"><a href="#完全积性函数" class="headerlink" title="完全积性函数"></a>完全积性函数</h3><p>$f(x\cdot y)=f(x)\cdot f(y)$  </p><p>Example:  $f(x)=x$</p><h3 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h3><p>两个数论函数<br>$$<br>(f*g)(n)=\sum_{d|n}f(d)g(\frac{n}{d})<br>$$</p><h4 id="单位元"><a href="#单位元" class="headerlink" title="单位元"></a>单位元</h4><p>$$<br>\varepsilon(n)=\mu \cdot 1=\sum_{d|n}\mu(d)=[n=1]<br>$$</p><p>$$<br>\varepsilon(n)= \begin{cases} 1&amp;n=1\ 0&amp;else \end{cases}<br>$$</p><p>$$<br>(\varepsilon*g)(n)=\sum_{d|n}\varepsilon(d)g(\frac{n}{d})=\varepsilon(1)g(\frac{n}{1})=g(n)<br>$$</p><p>恒等函数 1 ：   f(x)=1</p><h3 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h3><p>$$<br>\mu(n)= \begin{cases} 1&amp;n=1\ 0&amp;n\text{ 含有平方因子}\ (-1)^k&amp;k\text{ 为 }n\text{ 的本质不同质因子个数}\ \end{cases}<br>$$</p><p>$$<br>n=p_1^{k_1}p_2^{k_2}….p_t^{k_t}<br>$$</p><p>$$<br>\sum_{d|n}\mu(d)=[n=1]<br>$$<br> 假设一个n有k个质因子<br>$$<br>\sum_{d|n}\mu(d)=\sum_{i=0}^{k}C^i_k\times (-1)^i=\sum_{i=0}^{k}C^i_k\times (-1)^i\times 1^{k-i}=(1-1)^k=[k=0]<br>$$</p><h3 id="演"><a href="#演" class="headerlink" title="演"></a>演</h3><p>设两个函数f(x) g(x)<br>$$<br>f=f(n)=\sum_{d|n}g(d)=g\times 1<br>$$</p><p>$$<br>f*\mu=g\times 1\times \mu=g<br>$$</p><p>$$<br>g=f*\mu<br>$$</p><h4 id="两个演"><a href="#两个演" class="headerlink" title="两个演"></a>两个演</h4><p>$$<br>f(n)=\sum_{d|n}g(d)\to g(n)=\sum_{d|n}\mu(d)\times f(\frac{n}{d})<br>$$</p><p>$$<br>f(n)=\sum_{n|d}g(d)\to g(n)=\sum_{n|d}\mu(\frac{d}{n})\times f(d)<br>$$</p><p>下推第二个演</p><p>设$k=\frac{d}{n}$<br>$$<br>\sum_{n|d}\mu(\frac{d}{n})\cdot f(d)=\sum_{k}\mu(k)f(nk)=\sum_{k}\mu(k)\sum_{(nk)|t}g(t)=\sum_{k}\sum_{(nk)|t}\mu(k)g(t)=\sum_{t}g(t)\sum_{(nk)|t}\mu(k)<br>$$</p><p>$$<br>\sum_{n|d}\mu(\frac{d}{n})\cdot f(d)=\sum_{t}g(t)\sum_{(nk)|t}\mu(k)=\sum_{t}g(t)\varepsilon(\frac{t}{n})=g(n)<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primejudge</span><span class="params">(<span class="keyword">int</span> lim)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span> v);</span><br><span class="line">    pr = <span class="number">0</span>;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= lim; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!v[i]) &#123;</span><br><span class="line">            prime[pr++] = i;</span><br><span class="line">            v[i] = i;</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pr &amp;&amp; lim / i &gt;= prime[j]; j++) &#123;</span><br><span class="line">            v[i * prime[j]] = prime[j];</span><br><span class="line">            <span class="keyword">if</span> (v[i] &lt;= prime[j])<span class="keyword">break</span>;</span><br><span class="line">            mu[i * prime[j]] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>求这个值$1\le x \le$ a    $1 \le y \le b $求$gcd(x,y)=k$的种数<br>$$<br>\sum_{i=1}^a\sum_{j=1}^b=[gcd(i,j)=k]<br>$$</p><p>$$<br>\sum_{i=1}^{\lfloor \frac{a}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{b}{k} \rfloor}=[gcd(i,j)=1]<br>$$</p><p>$$<br>f(n)=\sum_{n|d}g(d)\to g(n)=\sum_{n|d}\mu(\frac d n)\cdot f({d})<br>$$</p><p>​                                            $\to$ 函数解释 ：  f(x)为x|gcd(i,j)的个数           g(x)    gcd(i,j)=x的个数<br>$$<br>f(m)=\lfloor \frac{a}{m}\rfloor \times \lfloor \frac{b}{m}\rfloor<br>$$</p><p>$$<br>g(1)=\sum_{1|d}\mu(\frac d 1)\cdot f({d})=\sum_{1|d}\mu(d)\cdot f({d})<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约瑟夫环问题</title>
      <link href="/2018/12/08/alg4/"/>
      <url>/2018/12/08/alg4/</url>
      
        <content type="html"><![CDATA[<p>推荐一个博客:<a href="https://blog.csdn.net/tingyun_say/article/details/52343897" target="_blank" rel="noopener">约瑟夫环问题详解</a></p><h3 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h3><p><strong>约瑟夫问题</strong>（有时也称为<strong>约瑟夫斯置换</strong>），是一个出现在计算机科学和数学中的问题。在计算机编程)的算法中，类似问题又称为<strong>约瑟夫环</strong>。</p><p>人们站在一个等待被处决的圈子里。 计数从圆圈中的指定点开始，并沿指定方向围绕圆圈进行。 在跳过指定数量的人之后，执行下一个人。 对剩下的人重复该过程，从下一个人开始，朝同一方向跳过相同数量的人，直到只剩下一个人，并被释放。</p><p>问题即，给定人数、起点、方向和要跳过的数字，选择初始圆圈中的位置以避免被处决。</p><h4 id="简单约瑟夫环问题"><a href="#简单约瑟夫环问题" class="headerlink" title="简单约瑟夫环问题"></a>简单约瑟夫环问题</h4><p>给出n个人,间隔k个人,请这个人出列,一直这样下去,最后出列的人是谁?</p><h5 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (fun(n<span class="number">-1</span>,k)+k)%n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面来解释一下,假设$k=3$</p><table><thead><tr><th>在环n的情况下</th><th>在环n-1的情况下</th></tr></thead><tbody><tr><td>0</td><td>n-3</td></tr><tr><td>1</td><td>n-2</td></tr><tr><td>2</td><td>被请出列了</td></tr><tr><td>3</td><td>0</td></tr><tr><td>4</td><td>1</td></tr><tr><td>…</td><td>2</td></tr><tr><td>n-3</td><td>3</td></tr><tr><td>n-2</td><td>4</td></tr><tr><td>n-1</td><td>5</td></tr></tbody></table><p>这里的fun都是对一个子问题的求解,强行解释为$f(n)=(f(n-1)+k)\mod n$.可以去上面推荐的博客看看,有图会看得更清楚.</p><h4 id="进阶约瑟夫环问题"><a href="#进阶约瑟夫环问题" class="headerlink" title="进阶约瑟夫环问题"></a>进阶约瑟夫环问题</h4><p>题目传送门:<a href="https://codeforces.com/gym/101955/problem/K" target="_blank" rel="noopener">Gym - 101955K</a></p><p>找出第M个出列的人</p><p>所以这是题解?(雾</p><p>第$m$个出列的人最后所在的环是$n-m+1$环,想知道算怎么来的?把$1$代进去验证一下就好了啊(逃.其实是因为把第$m$个人请出列之后就是一个$n-m$的环了.所以前一个就是第$m$个出列的人最后所在的环.</p><p>知道n-m+1的状态了,第$m$个出列的人在$n-m+1$环上是在(k-1)的位置上(像上面一样用子问题,倒推出主问题).所以用上面的直接跑?$10^{18}$你想用O(n)跑?做你的大头梦去.</p><p>如果要跨环的时候还是要用上面的跑的,其他的可以来神仙优化一下,在一个环下,一次跑完它,而不要一步一步跑.$((当前环长度-1)-(你所在的位置+1))$这个是你在当前环最多能跑的长度.怎么算的?(留坑).然后把这个数除以$k-1$就是你在这个环上一次能跑多少次.</p><p>为什么除以$k-1$?因为你往回推的时候,别人已经把位置为$k-1$的人给请出列了,所以你只能剩下$[0,k-2]$的人在这个环里面,所以你除以这个才能知道你在这个环上能跑多少次.倒推到n环就要退出了,所以你在跑一整个环的时候,要取个min值,当前还能跑得环数和当前环能跑的次数.</p><p>用上面的算法的时候,要特判一下$k$,$k=1$的时候直接输出就好了,不然会RE.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span> ( <span class="string">"%d"</span>, &amp;T );</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= T; kase++ ) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n, m, k;</span><br><span class="line">        <span class="built_in">scanf</span> ( <span class="string">"%lld %lld %lld"</span>, &amp;n, &amp;m, &amp;k );</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( k == <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="built_in">printf</span> ( <span class="string">"Case #%d: %lld\n"</span>, kase, m );</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans = ( k - <span class="number">1</span> ) % ( n - m + <span class="number">1</span> );</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">long</span> <span class="keyword">long</span> i = n - m + <span class="number">2</span>; i &lt;= n; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> ( ans + k &gt;= i ) &#123;</span><br><span class="line">                    ans = ( ans + k ) % i;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">long</span> <span class="keyword">long</span> t = min ( n - i + <span class="number">1</span>, ( i - ans <span class="number">-2</span> ) / (k<span class="number">-1</span>) );</span><br><span class="line">                    ans += t * k;</span><br><span class="line">                    i += t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span> ( <span class="string">"Case #%d: %lld\n"</span>, kase, ans + <span class="number">1</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gym-101955C题解</title>
      <link href="/2018/12/07/Gym-101955C/"/>
      <url>/2018/12/07/Gym-101955C/</url>
      
        <content type="html"><![CDATA[<p>题目传送门<a href="https://codeforces.com/gym/101955/problem/C" target="_blank" rel="noopener">C - Insertion Sort</a></p><p>不重复题意了，直接写解的过程，场上推不出来，赛后看题解才推出来的</p><p>网上题解说存在$k\ge n$的情况，然而我们特判$k+1\ge n$的时候就直接输出$n!$。</p><p>特判之后，必定是$k\lt n-1$。</p><p>现在来推一下,先不考虑前k项的$k!$,后面再乘一下就算完了.</p><p>1.整一个序列完全有序的情况只有1种</p><p>2.当前k个数都是$\left[1,k\right]$的情况,在后面$n-k$个数里面选一个数,不放在自己的位置上,根据乘法原理,算出来就是$(n-k)*(n-k-1)$</p><p>3.当前k个数不是$\left[1,k\right]$的情况下,而你又要保证最长上升子序列的长度是$n-1$,只能是一个完全有序的序列中,你在前k个数中拿一个数插入到$\left[k+1,n\right]$的其中一个位置中,有$n-k$种情况,根据乘法原理,算出来就是$(n-k)*k$.</p><p>最后就是</p><p>$$<br>ans=\begin{cases}<br>n!  &amp; \text{ $k+1\ge n $} \\<br>k!\times(1+(n-k)\times(n-k-1)+(n-k)\times k) &amp; \text{$1\le k\lt n-1$}<br>\end{cases}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 题解报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心灵电影注意事项</title>
      <link href="/2018/11/17/ggxx2/"/>
      <url>/2018/11/17/ggxx2/</url>
      
        <content type="html"><![CDATA[<h3 id="活动最好能在9点之前搞完"><a href="#活动最好能在9点之前搞完" class="headerlink" title="活动最好能在9点之前搞完"></a>活动最好能在9点之前搞完</h3><ul><li>因为9点之后有人过来确认电脑是否关了的。</li></ul><h3 id="教室电脑无法使用U盘怎么办"><a href="#教室电脑无法使用U盘怎么办" class="headerlink" title="教室电脑无法使用U盘怎么办"></a>教室电脑无法使用U盘怎么办</h3><ul><li>不用U盘<ul><li>在网盘或者云服务器上，把ppt给下载到学校的电脑上<br>用自己的电脑<br>  教室提供VGA接口</li></ul></li></ul><h3 id="电影画质要好"><a href="#电影画质要好" class="headerlink" title="电影画质要好"></a>电影画质要好</h3><ul><li>不要忽然绿一片的，忽然紫一片的，很影响观感</li></ul><h3 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h3><ul><li>先用指导老师的卡刷一下卡，自己摸索刷卡的地方。（应该在膝盖的位置）<br>   暴力一点把封印多媒体平台的盖子打开<br>   找开机键（红色绿色：一个开机，一个重启）忘记哪个对应哪个了，留坑，下次更新。</li></ul><h4 id="所以活动要的文件不要只给一个人负责，要学着给自己一条后路"><a href="#所以活动要的文件不要只给一个人负责，要学着给自己一条后路" class="headerlink" title="所以活动要的文件不要只给一个人负责，要学着给自己一条后路"></a>所以活动要的文件不要只给一个人负责，要学着给自己一条后路</h4>]]></content>
      
      
      <categories>
          
          <category> 工作记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inverse-Element</title>
      <link href="/2018/11/10/inverse-element/"/>
      <url>/2018/11/10/inverse-element/</url>
      
        <content type="html"><![CDATA[<h3 id="逆元定义"><a href="#逆元定义" class="headerlink" title="逆元定义"></a>逆元定义</h3><p>$a=\frac{1}{b}(mod\ p)$，也就是$a*b=1(mod\ p)$。表示$a$为$b$在$mod\ p$意义下的逆元</p><h4 id="快速幂求逆元"><a href="#快速幂求逆元" class="headerlink" title="快速幂求逆元"></a>快速幂求逆元</h4><p>$$a^p=a(mod\ p)$$</p><p>用二项式定理证明</p><p>$$a^p=((a-1)+1)^p=\sum_{i=0}^p{C_p^i*(a-1)^i}$$</p><p>来康康这里面的组合数鸭</p><p>$$C_n^m=\frac{n!}{m!*(n-m)!}$$</p><p>可以发现当n是素数的时候，在$1\le m\le n-1$的项里面都有$n$这个因子，所以所以模运算剩下的只有</p><p>$$C_p^0*(a-1)^0$$</p><p>$$C_p^p*(a-1)^p$$</p><p>也就是</p><p>$$a^p=(a-1)^p+1(mod\ p)$$</p><p>用数学归纳法就可得</p><p>$$a^p=a(mod\ p)$$</p><p>$$a^{p-1}=1(mod\ p)$$</p><p>$$a^{p-2}=\frac{1}{a}(mod\ p)$$</p><p>这样就得到$a$在$mod\ p$意义下的逆元了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary-Index-Tree</title>
      <link href="/2018/11/06/binary-index-tree/"/>
      <url>/2018/11/06/binary-index-tree/</url>
      
        <content type="html"><![CDATA[<p>注意!!!:这不是树状数组的详解,而是利用树状数组做区间修改的方法,当然能区间修改了也能单点修改</p><p>先来个简单的树状数组啊<br>功能:</p><ul><li>单点更新</li><li>区间查询(单点查询也就是特殊的区间查询啦)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> id)</span></span>&#123;<span class="comment">//id的位置上的数加上x</span></span><br><span class="line">    <span class="keyword">while</span>(id&lt;=n)&#123;</span><br><span class="line">        a[id]+=x;</span><br><span class="line">        id+=id&amp;(-id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;<span class="comment">//id位置的前缀和</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(id)&#123;</span><br><span class="line">        ans+=a[id];</span><br><span class="line">        id-=id&amp;(-id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间和区间更新"><a href="#区间和区间更新" class="headerlink" title="区间和区间更新"></a>区间和区间更新</h3><p>以前想区间更新的时候就要跑去写线段树了</p><p>但现在有了差分这种思想,就可以用树状数组去区间更新啦[滑稽]</p><p>我们对原数列$[1,n]$进行一些操作啊<br>$$d_i=a_i -a_{i-1}(a_0=0)$$<br>那么<br>$$a_x=\sum_{i=1}^x d_i$$<br>又可得<br>$$\sum_{i=1}^x a_i=\sum_{i=1}^x\sum_{j=1}^i d_j=\sum_{i=1}^x (x-i+1)d_i$$<br>显然(滑稽)<br>$$ \sum_{i=1}^x a_i=(x+1)\sum_{i=1}^x d_i - \sum_{i=1}^x d_i*i $$</p><p>所以这种要维护两个数组,一个维护$d_i$和一个$d <em>i$ $*$ $i$<br><del>快点进正题啊,怎么区间修改啊,我等不及了</del><br>进正题,区间修改就用到差分的性质了,先来康康这个式子<br>$$ a_x=\sum</em>{i=1}^x d_i $$<br>假设在区间$[L,R]$加$num$我们是不是只要在$d_L$加上$num$,在$R+1$上减去num.(没看懂的,自己想一下,很简单的啦)<del>笔者出来挨锤</del><br>抛个板子,<del>逃了逃了,怕挨锤</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a1[N],a2[N];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span></span>&#123;</span><br><span class="line">        n=_n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            a1[i]=<span class="number">0</span>;</span><br><span class="line">            a2[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=lowbit(i))&#123;</span><br><span class="line">            a1[i]+=y;</span><br><span class="line">            a2[i]+=<span class="number">1l</span>l*x*y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lradd</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        add(l,x);</span><br><span class="line">        add(r+<span class="number">1</span>,-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=lowbit(i))&#123;</span><br><span class="line">            ans+=<span class="number">1l</span>l*(x+<span class="number">1</span>)*a1[i]-a2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">lrsum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum(r)-sum(l<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;bits;</span><br></pre></td></tr></table></figure><h3 id="区间最值，单点更新，区间查询"><a href="#区间最值，单点更新，区间查询" class="headerlink" title="区间最值，单点更新，区间查询"></a>区间最值，单点更新，区间查询</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x &amp; (-x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> lx, i;</span><br><span class="line"><span class="keyword">while</span> (x &lt;= n)</span><br><span class="line">&#123;</span><br><span class="line">h[x] = a[x];</span><br><span class="line">lx = lowbit(x);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;lx; i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">h[x] = max(h[x], h[x-i]);</span><br><span class="line">x += lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (y &gt;= x)</span><br><span class="line">&#123;</span><br><span class="line">ans = max(a[y], ans);</span><br><span class="line">y --;</span><br><span class="line"><span class="keyword">for</span> (; y-lowbit(y) &gt;= x; y -= lowbit(y))</span><br><span class="line">ans = max(h[y], ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秘书部的主要工作</title>
      <link href="/2018/11/05/ggxx1/"/>
      <url>/2018/11/05/ggxx1/</url>
      
        <content type="html"><![CDATA[<p>2018/11/22<br>马上就要换网上审批了，要和师弟们从同学习申请了，下面的要作修改了，申请表文件也更新了</p><hr><h1 id="秘书部的主要工作"><a href="#秘书部的主要工作" class="headerlink" title="秘书部的主要工作"></a>秘书部的主要工作</h1><h3 id="申请活动场地"><a href="#申请活动场地" class="headerlink" title="申请活动场地"></a>申请活动场地</h3><ul><li>需要的东西<ul><li>学生组织活动审批表<br>  学生组织活动安全工作方案<br>  教室借用单（三联单）<br>  活动策划书（两份）<br>  影音作品播放申请表（心灵电影活动才需要）<br>  活动明细表（钉到策划书最后面，独占一页纸）<br>申请流程<br>  先给指导老师看看策划书有没有问题。<br>  跟指导老师说要申请教室。<br>  把老师申请的教室给填上申请资料上面。<br>  先把该打印的东西核对清楚，然后去打印。<ul><li>日期要准确<br> 地方不要搞错<br> 人数不要搞错<br> 同一个活动里面的资料要对应好<br> 如还有其他的挂了，请在这里添加，让后下次对着这里检查！！！<br>给指导老师签名、去盖章<br> 心协指导老师在工一223，去之前要跟老师约时间，老师很忙，而且这也是基本的礼貌。<br> 盖章在工一219，学生组织活动审批表、学生组织活动安全工作方案、教室借用单（三联单）。<ul><li>具体盖章的地方我已经说了。<br>去校团委审批<br>校团委工作时间是周一到周五（13：15~14：00）<br>需要给他看的东西<br>学生组织活动审批表<br>学生组织活动安全工作方案<br>教室借用单（三联单）<br>活动策划书（两份）<br>活动明细表（钉到策划书最后面，独占一页纸）<br>影音作品播放申请表（心灵电影活动才需要）<br>他会收走一份 ++策划书++ 和 ++学生组织活动审批表++<br>到时你另外一天来团委凭 ++回执++ 拿回 ++学生组织活动审批表++<br>去教务处（行政楼320）<br>教务处工作时间是周一到周五（09：00 ~ 12：00和13：30 ~ 16：00）<br>把东西放到盒子里面（三联单、活动审批表）<br>另一天拿回<br>去校安协办公室/保卫处（综合楼104）<br>校安协办公室/保卫处的办公室时间（上午08：30 ~ 12：00、下午14：30 ~ 16：00）<br>周一周四上午都有，且能交表和取表，周二只有上午，而且只能交表。<br>需要的东西<br>学生组织活动安全工作方案<br>活动策划书<br>去多媒体办公室<br>多媒体办公室工作时间是周一到周日（08：00 ~ 21：00）<br>把三联单的多媒体管理中心的那一联给那里的老师<br>活动当天去问指导老师要那个开教室电脑的卡<br>提前去调试好，防止出bug，就算出bug也能提早修复，尽早上线（雾）<br>活动后三天内去校团委备案<br>所以周五的活动一定要在星期一去备案<br>要复印一份学生组织活动审批表<br>原件和复印件都拿过去，自己保留一份他收一份<br>除了多媒体办公室的那里可以不按我打顺序，其他都要按这个流程跑。</li></ul></li></ul></li></ul></li></ul><h3 id="活动的签到"><a href="#活动的签到" class="headerlink" title="活动的签到"></a>活动的签到</h3><ul><li>懂我意思吧，你把笔拿出来，给别人在其拿到表上签名。<ul><li>所以你要提前30~45分钟去活动场地。</li></ul></li></ul><h3 id="活动现场的拍照"><a href="#活动现场的拍照" class="headerlink" title="活动现场的拍照"></a>活动现场的拍照</h3><ul><li>当然是用手机啦，有单反的话也可以上单反。<ul><li>怕手抖？让我蕉蕉你（气氛逐渐焦灼）</li></ul></li></ul><h3 id="活动新闻稿"><a href="#活动新闻稿" class="headerlink" title="活动新闻稿"></a>活动新闻稿</h3><ul><li>你写的东西是要被发到这里的噢。<a href="http://news.gdut.edu.cn/" target="_blank" rel="noopener">校内新闻通知网</a><br>   上面的那个网站需要神奇的账号和密码。<br>   300字左右就ojbk了</li></ul><h3 id="word和excel（WPS-（国外版没广告）或office-2016）"><a href="#word和excel（WPS-（国外版没广告）或office-2016）" class="headerlink" title="word和excel（WPS （国外版没广告）或office 2016）"></a>word和excel（WPS （国外版没广告）或office 2016）</h3><ul><li>签到表<br>   通讯录<br>   新闻稿</li></ul><h3 id="各种注意事项"><a href="#各种注意事项" class="headerlink" title="各种注意事项"></a>各种注意事项</h3><ul><li>骆导的明天给我<ul><li>意思就是明天早上上班时就要拿到</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秘书部的主要工作</title>
      <link href="/2018/11/05/ggxx1/"/>
      <url>/2018/11/05/ggxx1/</url>
      
        <content type="html"><![CDATA[<p>2019/03/13</p><h3 id="大锅"><a href="#大锅" class="headerlink" title="大锅"></a>大锅</h3><ul><li>申请摊位的时候，也要策划书和活动明细表</li><li>去线下校团委的时候，写的申请日期是线上申请的日期，不用带策划书</li><li>带物资(2019/03/22)</li><li>新闻稿配图片发骆导(2019/03/28)</li></ul><hr><h3 id="新审批流程-尽量两周"><a href="#新审批流程-尽量两周" class="headerlink" title="新审批流程(尽量两周)"></a>新审批流程(尽量两周)</h3><ul><li>跟活动部商量好时间，周五的活动建议在周一开始申请</li><li>跟骆导申请教室拿三联单(具体等巨巨们补充)：拿三联单去，老师会盖上名字，然后撕下来还给你</li><li>网上填好申请表，提醒一下骆导让叶展航老师确认一下</li><li>等啊等（玄学时间），等到全部搞好了，就打印，拿东西给校团委签名盖章（两天）</li><li>最后网上结束活动就可以了，点活动结束</li><li>教四301的投影仪有点绿(2019/03/22)</li></ul><hr><p>2018/11/22<br>马上就要换网上审批了，要和师弟们从同学习申请了，下面的要作修改了，申请表文件也更新了</p><hr><h1 id="秘书部的主要工作"><a href="#秘书部的主要工作" class="headerlink" title="秘书部的主要工作"></a>秘书部的主要工作</h1><h3 id="申请活动场地"><a href="#申请活动场地" class="headerlink" title="申请活动场地"></a>申请活动场地</h3><ul><li>需要的东西<ul><li>学生组织活动审批表<br>  学生组织活动安全工作方案<br>  教室借用单（三联单）<br>  活动策划书（两份）<br>  影音作品播放申请表（心灵电影活动才需要）<br>  活动明细表（钉到策划书最后面，独占一页纸）<br>申请流程<br>  先给指导老师看看策划书有没有问题。<br>  跟指导老师说要申请教室。<br>  把老师申请的教室给填上申请资料上面。<br>  先把该打印的东西核对清楚，然后去打印。<ul><li>日期要准确<br> 地方不要搞错<br> 人数不要搞错<br> 同一个活动里面的资料要对应好<br> 如还有其他的挂了，请在这里添加，让后下次对着这里检查！！！<br>给指导老师签名、去盖章<br> 心协指导老师在工一223，去之前要跟老师约时间，老师很忙，而且这也是基本的礼貌。<br> 盖章在工一219，学生组织活动审批表、学生组织活动安全工作方案、教室借用单（三联单）。<ul><li>具体盖章的地方我已经说了。<br>去校团委审批<br>校团委工作时间是周一到周五（13：15~14：00）<br>需要给他看的东西<br>学生组织活动审批表<br>学生组织活动安全工作方案<br>教室借用单（三联单）<br>活动策划书（两份）<br>活动明细表（钉到策划书最后面，独占一页纸）<br>影音作品播放申请表（心灵电影活动才需要）<br>他会收走一份 ++策划书++ 和 ++学生组织活动审批表++<br>到时你另外一天来团委凭 ++回执++ 拿回 ++学生组织活动审批表++<br>去教务处（行政楼320）<br>教务处工作时间是周一到周五（09：00 ~ 12：00和13：30 ~ 16：00）<br>把东西放到盒子里面（三联单、活动审批表）<br>另一天拿回<br>去校安协办公室/保卫处（综合楼104）<br>校安协办公室/保卫处的办公室时间（上午08：30 ~ 12：00、下午14：30 ~ 16：00）<br>周一周四上午都有，且能交表和取表，周二只有上午，而且只能交表。<br>需要的东西<br>学生组织活动安全工作方案<br>活动策划书<br>去多媒体办公室<br>多媒体办公室工作时间是周一到周日（08：00 ~ 21：00）<br>把三联单的多媒体管理中心的那一联给那里的老师<br>活动当天去问指导老师要那个开教室电脑的卡<br>提前去调试好，防止出bug，就算出bug也能提早修复，尽早上线（雾）<br>活动后三天内去校团委备案<br>所以周五的活动一定要在星期一去备案<br>要复印一份学生组织活动审批表<br>原件和复印件都拿过去，自己保留一份他收一份<br>除了多媒体办公室的那里可以不按我打顺序，其他都要按这个流程跑。</li></ul></li></ul></li></ul></li></ul><h3 id="活动的签到"><a href="#活动的签到" class="headerlink" title="活动的签到"></a>活动的签到</h3><ul><li>懂我意思吧，你把笔拿出来，给别人在其拿到表上签名。<ul><li>所以你要提前30~45分钟去活动场地。</li></ul></li></ul><h3 id="活动现场的拍照"><a href="#活动现场的拍照" class="headerlink" title="活动现场的拍照"></a>活动现场的拍照</h3><ul><li>当然是用手机啦，有单反的话也可以上单反。<ul><li>怕手抖？让我蕉蕉你（气氛逐渐焦灼）</li></ul></li></ul><h3 id="活动新闻稿"><a href="#活动新闻稿" class="headerlink" title="活动新闻稿"></a>活动新闻稿</h3><ul><li>你写的东西是要被发到这里的噢。<a href="http://news.gdut.edu.cn/" target="_blank" rel="noopener">校内新闻通知网</a><br>   上面的那个网站需要神奇的账号和密码。<br>   300字左右就ojbk了</li></ul><h3 id="word和excel（WPS-（国外版没广告）或office-2016）"><a href="#word和excel（WPS-（国外版没广告）或office-2016）" class="headerlink" title="word和excel（WPS （国外版没广告）或office 2016）"></a>word和excel（WPS （国外版没广告）或office 2016）</h3><ul><li>签到表<br>   通讯录<br>   新闻稿</li></ul><h3 id="各种注意事项"><a href="#各种注意事项" class="headerlink" title="各种注意事项"></a>各种注意事项</h3><ul><li>骆导的明天给我<ul><li>意思就是明天早上上班时就要拿到</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDQ分治</title>
      <link href="/2018/08/29/alg3/"/>
      <url>/2018/08/29/alg3/</url>
      
        <content type="html"><![CDATA[<p>陈丹琦神犇创造的算法,所以叫CDQ分治,可以用来解决三维偏序问题,好像可以嵌套CDQ来解决N维偏序问题.我苟蒻不会嵌套,据说也没必要嵌套,可以用bitset大法做n维偏序.</p><p>分时间更新,每天都有不一样的想法.</p><p>CDQ分治,我现在理解的是用排序和CDQ和树状数组维护三个维度的数据,苟蒻不敢瞎说话啊.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dance link X algorithm</title>
      <link href="/2018/08/28/alg2/"/>
      <url>/2018/08/28/alg2/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/grenet/p/3145800.html" target="_blank" rel="noopener">图文并茂的dance link X 算法讲解(点击我啊)</a></p><p>dance link X算法是用来解决精确覆盖问题,例如在一个01矩阵中,找n行,能使得每一列都只有一个1,其余全是0.</p><p>而怎么将求解数独转化为DLX能解决的问题呢?</p><p>假设是一个9<em>9的数独,每一行,每一列,每个宫都要有1~9这9个数,每一个格子都有9个状态,所以一共有9</em>9<em>9的状态,所以DLX要建729行,然后用9</em>9来表示每个格子都有数字了,每行每列每宫都要9<em>9来表示当前行/列/宫有数字k了.一共4</em>9*9列.<br>直接上题目吧<a href="http://poj.org/problem?id=3074" target="_blank" rel="noopener">POJ3074</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">9</span>; <span class="comment">//3*3 数独</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = N * N * N + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxM = N * N * <span class="number">4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxnode = MaxN * <span class="number">4</span> + MaxM + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> g[MaxN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, m, size;</span><br><span class="line">    <span class="keyword">int</span> U[maxnode], D[maxnode], R[maxnode], L[maxnode], Row[maxnode], Col[maxnode];</span><br><span class="line">    <span class="keyword">int</span> H[MaxN], S[MaxM];<span class="comment">//S维护每一列有多少个点,H维护每一行的头</span></span><br><span class="line">    <span class="keyword">int</span> ansd, ans[MaxN];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n, <span class="keyword">int</span> _m)</span> </span>&#123;<span class="comment">//m维护每一列,n维护每一行</span></span><br><span class="line">        n = _n;</span><br><span class="line">        m = _m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt;= m; i++) &#123;</span><br><span class="line">            S[i] = <span class="number">0</span>;</span><br><span class="line">            U[i] = D[i] = i;</span><br><span class="line">            L[i] = i - <span class="number">1</span>;</span><br><span class="line">            R[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        R[m] = <span class="number">0</span>; L[<span class="number">0</span>] = m;</span><br><span class="line">        size = m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &amp;lt;= n; i++)H[i] = - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        ++S[Col[++size] = c];<span class="comment">//size像是每个点的编号</span></span><br><span class="line">        Row[size] = r;</span><br><span class="line">        D[size] = D[c];</span><br><span class="line">        U[D[c]] = size;</span><br><span class="line">        U[size] = c;</span><br><span class="line">        D[c] = size;</span><br><span class="line">        <span class="keyword">if</span> (H[r] &amp;lt; <span class="number">0</span>)H[r] = L[size] = R[size] = size;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            R[size] = R[H[r]];</span><br><span class="line">            L[R[H[r]]] = size;</span><br><span class="line">            L[size] = H[r];</span><br><span class="line">            R[H[r]] = size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        L[R[c]] = L[c]; R[L[c]] = R[c];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = D[c]; i != c; i = D[i])</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = R[i]; j != i; j = R[j]) &#123;</span><br><span class="line">                U[D[j]] = U[j];<span class="comment">//断开j</span></span><br><span class="line">                D[U[j]] = D[j];</span><br><span class="line">                -- S[Col[j]];</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = U[c]; i != c; i = U[i])</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = L[i]; j != i; j = L[j])</span><br><span class="line">                ++S[Col[U[D[j]] = D[U[j]] = j]];</span><br><span class="line">        L[R[c]] = R[L[c]] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Dance</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (R[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; d; i++)g[(ans[i] - <span class="number">1</span>) / <span class="number">9</span>] = (ans[i] - <span class="number">1</span>) % <span class="number">9</span> + <span class="string">'1'</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; N * N; i++)<span class="built_in">printf</span>(<span class="string">"%c"</span>, g[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> c = R[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = R[<span class="number">0</span>]; i != <span class="number">0</span>; i = R[i])</span><br><span class="line">            <span class="keyword">if</span> (S[i] &amp;lt; S[c])</span><br><span class="line">                c = i;</span><br><span class="line">        remove(c);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = D[c]; i != c; i = D[i]) &#123;</span><br><span class="line">            ans[d] = Row[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = R[i]; j != i; j = R[j])remove(Col[j]);</span><br><span class="line">            <span class="keyword">if</span> (Dance(d + <span class="number">1</span>))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = L[i]; j != i; j = L[j])resume(Col[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        resume(c);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">place</span><span class="params">(<span class="keyword">int</span> &amp;amp;r, <span class="keyword">int</span> &amp;amp;c1, <span class="keyword">int</span> &amp;amp;c2, <span class="keyword">int</span> &amp;amp;c3, <span class="keyword">int</span> &amp;amp;c4, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    r = (i * N + j) * N + k;</span><br><span class="line">    c1 = i * N + j + <span class="number">1</span>;</span><br><span class="line">    c2 = N * N + i * N + k;</span><br><span class="line">    c3 = N * N * <span class="number">2</span> + j * N + k;</span><br><span class="line">    c4 = N * N * <span class="number">3</span> + ((i / <span class="number">3</span>) * <span class="number">3</span> + (j / <span class="number">3</span>)) * N + k;</span><br><span class="line">&#125;</span><br><span class="line">DLX dlx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, g) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(g, <span class="string">"end"</span>) == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        dlx.init(N * N * N, N * N * <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">int</span> r, c1, c2, c3, c4;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; N; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &amp;lt; N; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &amp;lt;= N; k++)</span><br><span class="line">                    <span class="keyword">if</span> (g[i * N + j] == <span class="string">'.'</span> || g[i * N + j] == <span class="string">'0'</span> + k) &#123;</span><br><span class="line">                        place(r, c1, c2, c3, c4, i, j, k);</span><br><span class="line">                        dlx.Link(r, c1);</span><br><span class="line">                        dlx.Link(r, c2);</span><br><span class="line">                        dlx.Link(r, c3);</span><br><span class="line">                        dlx.Link(r, c4);</span><br><span class="line">                    &#125;</span><br><span class="line">        dlx.Dance(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看nginx监听端口</title>
      <link href="/2018/03/22/nginx1/"/>
      <url>/2018/03/22/nginx1/</url>
      
        <content type="html"><![CDATA[<p>netstat -tlnup|grep nginx</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> web </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
