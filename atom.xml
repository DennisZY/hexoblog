<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dennis&#39;s Blog</title>
  
  <subtitle>Stay Hungry, Stay Foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.hzycjy.top/"/>
  <updated>2019-09-11T19:10:35.649Z</updated>
  <id>https://blog.hzycjy.top/</id>
  
  <author>
    <name>Dennis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>入坑QT_1-最简单的项目理解</title>
    <link href="https://blog.hzycjy.top/posts/qt1/"/>
    <id>https://blog.hzycjy.top/posts/qt1/</id>
    <published>2019-09-11T17:58:32.000Z</published>
    <updated>2019-09-11T19:10:35.649Z</updated>
    
    <content type="html"><![CDATA[<p>先上类图</p><p><img src="/images/qwidget1.svg" alt="img"></p><p>项目分为Forms、Sources、Headers，这只是再Qt Creator里面被分为这个样子，项目文件夹里面是没有分开的。</p><p>Qt先将ui文件生成为ui_xxxx.h，内含一个类Ui_xxx，提供setui函数，通过接收窗体指针来对UI进行修改，<del>有点抽象工厂的意思</del>，然后通过这个类派生出一个在命名空间Ui里的类，相当于一个配置类，谁需要这个配置就用这个类的setui来设置自己。</p>]]></content>
    
    <summary type="html">
    
      我好类啊
    
    </summary>
    
    
      <category term="Qt开发" scheme="https://blog.hzycjy.top/categories/Qt%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Qt" scheme="https://blog.hzycjy.top/tags/Qt/"/>
    
      <category term="c++" scheme="https://blog.hzycjy.top/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome automata</title>
    <link href="https://blog.hzycjy.top/posts/Palindrome-automata/"/>
    <id>https://blog.hzycjy.top/posts/Palindrome-automata/</id>
    <published>2019-09-08T15:01:57.000Z</published>
    <updated>2019-09-09T08:02:34.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>回文自动机是一个保存一个串中所有的回文串，从根节点到任一节点，所经过的边并起来就是一个回文串的一半，奇长度的与偶长度的根不一样，奇长度的回文串的第一条边所带表的字符只能算一次，也就是奇根到节点的边所表达的字符，其余情况都是算两次，构成一个回文串。</p><h3 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h3><p>两个根节点，奇根和偶根，还有其他节点，由代表某个字符边连接起来，还有fail指针连接回文串与这个回文串的后缀是回文串的最长串。</p><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>像其他自动机一样，动态插入字符进行构造。</p><p>从上一次插入字符对应的节点，假如插入新字符能够构成回文串，那就插入，如果已经有节点了，就无需重复插入，如果查找不到，就通过fail指针去转移。</p><h3 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW0vUDM2NDk=" title="https://www.luogu.org/problem/P3649">luogu3649<i class="fa fa-external-link"></i></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">int</span> ch[N][<span class="number">26</span>], fail[N], len[N], tot;</span><br><span class="line"><span class="keyword">int</span> last;</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    len[++tot] = l;</span><br><span class="line">    <span class="built_in">memset</span>(ch[tot], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[tot]);</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfail</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (s[pos - len[p] - <span class="number">1</span>] != s[pos])p = fail[p];</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> length = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    s[<span class="number">0</span>] = <span class="number">-1</span>, fail[<span class="number">0</span>] = <span class="number">1</span>, last = <span class="number">0</span>;</span><br><span class="line">    len[<span class="number">0</span>] = <span class="number">0</span>, len[<span class="number">1</span>] = <span class="number">-1</span>, tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= length; i++) &#123;</span><br><span class="line">        s[i] -= <span class="string">'a'</span>;</span><br><span class="line">        u = getfail(last, i);</span><br><span class="line">        <span class="keyword">if</span> (!ch[u][s[i]]) &#123;</span><br><span class="line">            v = newnode(len[u] + <span class="number">2</span>);</span><br><span class="line">            fail[v] = ch[getfail(fail[u], i)][s[i]];</span><br><span class="line">            ch[u][s[i]] = v;</span><br><span class="line">        &#125;</span><br><span class="line">        ++cnt[last = ch[u][s[i]]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = tot; i; --i) &#123;</span><br><span class="line">        cnt[fail[i]] += cnt[i];</span><br><span class="line">        ans = max(ans, <span class="number">1l</span>l * cnt[i] * len[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      回文自动机学习笔记
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.hzycjy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ACM" scheme="https://blog.hzycjy.top/tags/ACM/"/>
    
      <category term="data structure" scheme="https://blog.hzycjy.top/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>文章索引</title>
    <link href="https://blog.hzycjy.top/posts/blog-index/"/>
    <id>https://blog.hzycjy.top/posts/blog-index/</id>
    <published>2019-09-07T18:10:21.000Z</published>
    <updated>2019-09-08T16:24:37.517Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li><h4 id="SAM"><a href="#SAM" class="headerlink" title="SAM"></a><a href="/posts/SAM/">SAM</a></h4></li><li><h4 id="Palindrome-automata"><a href="#Palindrome-automata" class="headerlink" title="Palindrome automata"></a><a href="/posts/Palindrome-automata/">Palindrome automata</a></h4></li></ul><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul><li><h4 id="牛顿迭代法"><a href="#牛顿迭代法" class="headerlink" title="牛顿迭代法"></a><a href="/posts/Newton's-method/">牛顿迭代法</a></h4></li><li><h4 id="Beatty’s-theory"><a href="#Beatty’s-theory" class="headerlink" title="Beatty’s theory"></a><a href="/posts/Beatty/">Beatty’s theory</a></h4></li><li><h4 id="CRT-exCRT"><a href="#CRT-exCRT" class="headerlink" title="CRT/exCRT"></a><a href="/posts/crt/">CRT/exCRT</a></h4></li><li><h4 id="各种数学推论"><a href="#各种数学推论" class="headerlink" title="各种数学推论"></a><a href="/posts/mathmix/">各种数学推论</a></h4></li><li><h4 id="Bayes’theorem"><a href="#Bayes’theorem" class="headerlink" title="Bayes’theorem"></a><a href="/posts/bayes/">Bayes’theorem</a></h4></li><li><h4 id="Mobius-inversion-formula"><a href="#Mobius-inversion-formula" class="headerlink" title="Mobius inversion formula"></a><a href="/posts/Mobius-inversion-formula/">Mobius inversion formula</a></h4></li><li><h4 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a><a href="/posts/alg4/">约瑟夫环问题</a></h4></li><li><h4 id="Inverse-Element"><a href="#Inverse-Element" class="headerlink" title="Inverse-Element"></a><a href="/posts/inverse-element/">Inverse-Element</a></h4></li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li><h4 id="splay"><a href="#splay" class="headerlink" title="splay"></a><a href="/posts/splay/">splay</a></h4></li><li><h4 id="Binary-Index-Tree"><a href="#Binary-Index-Tree" class="headerlink" title="Binary-Index-Tree"></a><a href="/posts/binary-index-tree/">Binary-Index-Tree</a></h4></li></ul><h3 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h3><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><ul><li><h4 id="A-star不详解"><a href="#A-star不详解" class="headerlink" title="A_star不详解"></a><a href="/posts/A-star/">A_star不详解</a></h4></li><li><h4 id="dance-link-X-algorithm"><a href="#dance-link-X-algorithm" class="headerlink" title="dance link X algorithm"></a><a href="/posts/dlx/">dance link X algorithm</a></h4></li></ul><h3 id="离线算法"><a href="#离线算法" class="headerlink" title="离线算法"></a>离线算法</h3><ul><li><h4 id="CDQ分治"><a href="#CDQ分治" class="headerlink" title="CDQ分治"></a><a href="/posts/cdq/">CDQ分治</a></h4></li></ul><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><ul><li><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><ul><li><h5 id="Learning-C"><a href="#Learning-C" class="headerlink" title="Learning C++"></a><a href="/posts/cplusplus/">Learning C++</a></h5></li></ul></li><li><h4 id="go"><a href="#go" class="headerlink" title="go"></a>go</h4><ul><li><h5 id="golang"><a href="#golang" class="headerlink" title="golang"></a><a href="/posts/golang1/">golang</a></h5></li></ul></li></ul><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><ul><li><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><ul><li><h5 id="查看nginx监听端口"><a href="#查看nginx监听端口" class="headerlink" title="查看nginx监听端口"></a><a href="/posts/nginx1/">查看nginx监听端口</a></h5></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      只是个博文索引
    
    </summary>
    
    
      <category term="未分类" scheme="https://blog.hzycjy.top/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Update hexo-theme-NexT smoothly</title>
    <link href="https://blog.hzycjy.top/posts/update-hexo-theme-smoothly/"/>
    <id>https://blog.hzycjy.top/posts/update-hexo-theme-smoothly/</id>
    <published>2019-09-05T19:11:11.000Z</published>
    <updated>2019-09-05T19:53:15.957Z</updated>
    
    <content type="html"><![CDATA[<p>主题更新一直是个大问题，自己修改了主题的配置文件之后，就不能直接<code>git pull</code>来更新主题文件了，需要手动merge主题设置，太麻烦了，其实NexT官方给的文档里有写的，然而我现在才发现，还是要多看看文档啊。这是利用了Hexo3.0的特性。</p><h3 id="利用Hexo的方法"><a href="#利用Hexo的方法" class="headerlink" title="利用Hexo的方法"></a>利用Hexo的方法</h3><p>在Hexo-site的配置文件里写入自己主题需要的配置</p><ol><li>添加一行<code>theme_config:</code></li><li>把你需要的配置都复制到<code>theme_config:</code>下</li><li>注意要缩进，把所有主题配置都缩进两个空格</li></ol><p>如果存在<code>hexo/source/_data/next.yml</code>这个文件，请删掉它，如果有这个文件，将是使用NexT的方法来保存配置文件。</p><h3 id="利用NexT的方法"><a href="#利用NexT的方法" class="headerlink" title="利用NexT的方法"></a>利用NexT的方法</h3><p>在<code>hexo/source</code>文件夹中新建文件夹<code>_data</code>，创建<code>next.yml</code></p><p>如果你把配置文件的<code>override</code>设置为<code>true</code>，你只需要把所有的NexT配置复制到<code>next.yml</code>中即可；如果你把配置文件的<code>override</code>设置为<code>false</code>，你需要把你所需要的hexo配置和主题NexT的配置复制到<code>next.yml</code>内。</p><p>官方是推荐使用第一种方法的。</p><h3 id="事后"><a href="#事后" class="headerlink" title="事后"></a>事后</h3><p>调整好之后，请执行<code>hexo clean</code>把public文件夹清一下，再重新生成页面、部署等等。</p><p><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy9kb2NzL2dldHRpbmctc3RhcnRlZC9kYXRhLWZpbGVz" title="https://theme-next.org/docs/getting-started/data-files">官方文档<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      快速更新hexo主题NexT
    
    </summary>
    
    
      <category term="折腾笔记" scheme="https://blog.hzycjy.top/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Hexo" scheme="https://blog.hzycjy.top/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://blog.hzycjy.top/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>dogcom</title>
    <link href="https://blog.hzycjy.top/posts/dogcom/"/>
    <id>https://blog.hzycjy.top/posts/dogcom/</id>
    <published>2019-09-04T15:05:38.000Z</published>
    <updated>2019-09-04T16:27:01.772Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>linux版的drcom无法使用，为了使用校园网，我也是莫的办法，<del>逼良为娼</del>，</p><p>在linux上通过pppoe连接校园网，由于学校需要特定的心跳包，所以需要自己给服务器发心跳包来维持pppoe连接。</p><p>之前是通过python版本的程序来发送心跳包的，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RyY29tcy9kcmNvbS1nZW5lcmljL2Jsb2IvbWFzdGVyL2xhdGVzdC1wcHBvZS5weQ==" title="https://github.com/drcoms/drcom-generic/blob/master/latest-pppoe.py">源程序<i class="fa fa-external-link"></i></span>来源于<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RyY29tcy9kcmNvbS1nZW5lcmlj" title="https://github.com/drcoms/drcom-generic">drcoms/drcom-generic<i class="fa fa-external-link"></i></span></p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>python版本占的内存有点多，<del>才几十M，你真的是关心那几十M内存吗？况且换C程序，内存占用也没得到怎么样的优化</del></p><p>python版本的程序，在校园网连接掉了的时候，就会疯狂发送，直到连接正常，所以有时候一脚把网线踢掉的时候，电脑会起飞，发烫，疯狂log，有次它给我log到了11G，<del>我不会改啊，不是很熟悉python</del></p><h3 id="dogcom使用"><a href="#dogcom使用" class="headerlink" title="dogcom使用"></a>dogcom使用</h3><ol><li>windows打开drcom，打开wireshark，使用wireshark抓取drcom登录时的包，保存下来</li><li>打开<span class="exturl" data-url="aHR0cHM6Ly9kcmNvbXMuZ2l0aHViLmlvL2RyY29tLWdlbmVyaWMv" title="https://drcoms.github.io/drcom-generic/">Auto Configure<i class="fa fa-external-link"></i></span>，选择自己的drcom版本，点击open，选择你的抓包文件，得到配置文本，保存为<code>dogcom.conf</code></li><li>找个地方把仓库给克隆下来，运行<code>git clone https://github.com/mchome/dogcom.git</code></li><li>进入项目文件夹，编译，运行命令<code>make force_encrypt=y</code>，过亿亿亿亿亿亿亿亿亿会你就拥有了dogcom文件了，这是linux的操作，windows的操作请看项目主页</li><li>把<code>dogcom</code>文件和<code>dogcom.conf</code>文件放到你一个你想运行的文件夹中</li><li>运行，比如我是通过pppoe上网的，就运行<code>dogcom -m pppoe -c dogcom.conf</code></li></ol><p>更多的参数配置，请到项目官网查看，<del>其实我不会</del></p><h3 id="python版本心跳包使用"><a href="#python版本心跳包使用" class="headerlink" title="python版本心跳包使用"></a>python版本心跳包使用</h3><p>也差不多，通过抓包文件得到配置文本之后，修改<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RyY29tcy9kcmNvbS1nZW5lcmljL2Jsb2IvbWFzdGVyL2xhdGVzdC1wcHBvZS5weQ==" title="https://github.com/drcoms/drcom-generic/blob/master/latest-pppoe.py">python源程序<i class="fa fa-external-link"></i></span>的<code>server</code> <code>pppoe_flag</code>  <code>keep_alive2_flag</code>的指即可，我以前运行的是python2版本的，运行命令<code>python2 latest-pppoe.py</code>即可，它会在你的运行目录生成一个log文件</p>]]></content>
    
    <summary type="html">
    
      使用C语言版本的心跳包程序
    
    </summary>
    
    
      <category term="折腾笔记" scheme="https://blog.hzycjy.top/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://blog.hzycjy.top/tags/linux/"/>
    
      <category term="drcom" scheme="https://blog.hzycjy.top/tags/drcom/"/>
    
      <category term="dogcom" scheme="https://blog.hzycjy.top/tags/dogcom/"/>
    
  </entry>
  
  <entry>
    <title>Netlify</title>
    <link href="https://blog.hzycjy.top/posts/netlify-blog/"/>
    <id>https://blog.hzycjy.top/posts/netlify-blog/</id>
    <published>2019-09-03T17:58:16.000Z</published>
    <updated>2019-09-09T16:39:57.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><ul><li>想折腾一下</li><li>githubpage还是留给项目页面用吧<del>(你哪有什么项目)</del></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>登录注册netlify</li><li>绑定你的github的仓库</li></ol><p>然后它自己会部署，部署好之后，你之后就会有一个<code>.netlify.com</code>的网址，你可以通过这个访问你hexo生成的网站，<del>这个域名会很丑，难以记忆，最好自己绑个域名，会好看许多。</del>可以自己修改的，还是可以用的。</p><p>所以这个方法指建议有自己域名的人使用，有时候还感觉会反向加速，速度不如githubpage。</p><p>疯起来还真的啥都折腾。</p>]]></content>
    
    <summary type="html">
    
      使用netlify自动部署静态网站
    
    </summary>
    
    
      <category term="折腾笔记" scheme="https://blog.hzycjy.top/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Hexo" scheme="https://blog.hzycjy.top/tags/Hexo/"/>
    
      <category term="github" scheme="https://blog.hzycjy.top/tags/github/"/>
    
      <category term="Netlify" scheme="https://blog.hzycjy.top/tags/Netlify/"/>
    
  </entry>
  
  <entry>
    <title>Using Accesser</title>
    <link href="https://blog.hzycjy.top/posts/using-accesser/"/>
    <id>https://blog.hzycjy.top/posts/using-accesser/</id>
    <published>2019-09-02T07:41:47.000Z</published>
    <updated>2019-09-02T15:10:10.844Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Accesser是一个解决SNI RST导致维基百科、Pixiv等站点无法访问的工具</p></blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1VSZW5rby9BY2Nlc3Nlcg==" title="https://github.com/URenko/Accesser">官方repo<i class="fa fa-external-link"></i></span></p><h3 id="SNI"><a href="#SNI" class="headerlink" title="SNI"></a>SNI</h3><p>Server Name Indication(SNI)是一个TLS的一个扩展，可以让一个ip拥有多个证书，也就可以让一个ip内可以架设多个通过https访问的网站。这个功能看起来与虚拟主机十分类似，但是对于https来说，原始的SNI扩展是没对这个段进行加密的，那么就是说可以被中间人所窃听的。</p><p>GFW也是利用了这个点封禁了很多网站，有更加狠的封禁就是直接封禁ip，详情看谷歌等等。</p><h3 id="Accesser原理"><a href="#Accesser原理" class="headerlink" title="Accesser原理"></a>Accesser原理</h3><p>不清楚，py代码看得不太懂。就不秀智商下限了</p><h3 id="Accesser使用"><a href="#Accesser使用" class="headerlink" title="Accesser使用"></a>Accesser使用</h3><p>我只能说我在manjaro下的使用了，其他linux应该也差不多的</p><h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/URenko/Accesser.git</span><br></pre></td></tr></table></figure><h4 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h4><h4 id="安装pip3"><a href="#安装pip3" class="headerlink" title="安装pip3"></a>安装pip3</h4><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyopenssl tld dnspython tornado</span><br></pre></td></tr></table></figure><p>后面加<code>--user</code>就只为自己这个用户安装，否则就全局安装，哪个用户都可以用，windows可以忽略，况且windows能直接下载<code>.exe</code>文件直接跑</p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 accesser.py</span><br></pre></td></tr></table></figure><h3 id="添加能通过Accesser反代的网站"><a href="#添加能通过Accesser反代的网站" class="headerlink" title="添加能通过Accesser反代的网站"></a>添加能通过Accesser反代的网站</h3><p>在<code>./template/pac</code>里面修改<code>var domains</code>的列表即可</p>]]></content>
    
    <summary type="html">
    
      利用反向代理避开SNI检测
    
    </summary>
    
    
      <category term="折腾笔记" scheme="https://blog.hzycjy.top/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://blog.hzycjy.top/tags/linux/"/>
    
      <category term="Accesser" scheme="https://blog.hzycjy.top/tags/Accesser/"/>
    
  </entry>
  
  <entry>
    <title>Using hexo</title>
    <link href="https://blog.hzycjy.top/posts/hexo-blog/"/>
    <id>https://blog.hzycjy.top/posts/hexo-blog/</id>
    <published>2019-08-26T05:55:34.000Z</published>
    <updated>2019-09-05T19:16:33.790Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初步认识"><a href="#初步认识" class="headerlink" title="初步认识"></a>初步认识</h3><p>hexo是一个博客框架，通过node.js将你的markdown文件转换为一片博文，搭配风格各异的主题来构建你自己的静态博客。</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv" title="https://hexo.io">hexo官网<i class="fa fa-external-link"></i></span></p></blockquote><h4 id="入门配置"><a href="#入门配置" class="headerlink" title="入门配置"></a>入门配置</h4><h4 id="安装hexo-cli"><a href="#安装hexo-cli" class="headerlink" title="安装hexo-cli"></a>安装hexo-cli</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h4 id="初始化hexo目录"><a href="#初始化hexo目录" class="headerlink" title="初始化hexo目录"></a>初始化hexo目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>这里可以在<code>npm install</code>前修改hexo目录下的package.json，添加你所需要的依赖，或者<code>npm install</code>之后再执行下面的操作。</p><p>初始化后目录结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>scaffolds 文件夹保存着你的模板文件，你可以通过<code>hexo new [layout] &lt;title&gt;</code>来利用模板文件来生成你需要的markdown文件，详细请看<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvd3JpdGluZw==" title="https://hexo.io/zh-cn/docs/writing">官网文档<i class="fa fa-external-link"></i></span> </p><p>例如我用<code>hexo new &quot;title&quot;</code>来生成一个即将发表的文件。</p><h4 id="安装部署器并部署到github"><a href="#安装部署器并部署到github" class="headerlink" title="安装部署器并部署到github"></a>安装部署器并部署到github</h4><h5 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h5 id="在-config-yml设置"><a href="#在-config-yml设置" class="headerlink" title="在_config.yml设置"></a>在<code>_config.yml</code>设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: ##你的github仓库</span><br><span class="line">  branch: master ##你github仓库做githubpage的分支</span><br><span class="line">  message: ##缺省时，commit的message为部署的时间</span><br></pre></td></tr></table></figure><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p><code>hexo g</code>可以生成整个网站，保存在public文件夹中</p><p><code>hexo d</code>可以部署网站到远端，当然可以部署到github</p><p><code>hexo g -d</code>和<code>hexo d -g</code>都能做到生成后并部署到远端。</p><h3 id="进阶选项-可选"><a href="#进阶选项-可选" class="headerlink" title="进阶选项(可选)"></a>进阶选项(可选)</h3><h4 id="安装feed插件"><a href="#安装feed插件" class="headerlink" title="安装feed插件"></a>安装feed插件</h4><h5 id="安装命令-1"><a href="#安装命令-1" class="headerlink" title="安装命令"></a>安装命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h5 id="在-config-yml设置-1"><a href="#在-config-yml设置-1" class="headerlink" title="在_config.yml设置"></a>在<code>_config.yml</code>设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content: true</span><br><span class="line">  content_limit: 20</span><br><span class="line">  content_limit_delim: &apos; &apos;</span><br><span class="line">  order_by: -date</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWdlbmVyYXRvci1mZWVk" title="https://github.com/hexojs/hexo-generator-feed">feed详细设置<i class="fa fa-external-link"></i></span></p><h4 id="获得置顶功能"><a href="#获得置顶功能" class="headerlink" title="获得置顶功能"></a>获得置顶功能</h4><h5 id="安装命令-2"><a href="#安装命令-2" class="headerlink" title="安装命令"></a>安装命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><h5 id="在-config-yml设置-2"><a href="#在-config-yml设置-2" class="headerlink" title="在_config.yml设置"></a>在<code>_config.yml</code>设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  path: &apos;&apos;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25ldGNhbi9oZXhvLWdlbmVyYXRvci1pbmRleC1waW4tdG9w" title="https://github.com/netcan/hexo-generator-index-pin-top">置顶插件详细设置<i class="fa fa-external-link"></i></span></p><p>如果某篇文章需要置顶，需要在文章的<code>Front-matter</code>中添加<code>top: true</code>，否则<code>top: false</code></p><h4 id="获得搜索功能"><a href="#获得搜索功能" class="headerlink" title="获得搜索功能"></a>获得搜索功能</h4><h5 id="安装命令-3"><a href="#安装命令-3" class="headerlink" title="安装命令"></a>安装命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h5 id="在-config-yml设置-3"><a href="#在-config-yml设置-3" class="headerlink" title="在_config.yml设置"></a>在<code>_config.yml</code>设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d6cGFuL2hleG8tZ2VuZXJhdG9yLXNlYXJjaA==" title="https://github.com/wzpan/hexo-generator-search">搜索功能详细设置<i class="fa fa-external-link"></i></span></p><h4 id="生成站点地图"><a href="#生成站点地图" class="headerlink" title="生成站点地图"></a>生成站点地图</h4><p>可以提交给搜索引擎，加快搜索引擎收录</p><h5 id="安装命令-4"><a href="#安装命令-4" class="headerlink" title="安装命令"></a>安装命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h5 id="在-config-yml设置-4"><a href="#在-config-yml设置-4" class="headerlink" title="在_config.yml设置"></a>在<code>_config.yml</code>设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">    template:</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWdlbmVyYXRvci1zaXRlbWFw" title="https://github.com/hexojs/hexo-generator-sitemap">站点地图插件详细设置<i class="fa fa-external-link"></i></span></p><h4 id="计算文章长度和估算阅读时间"><a href="#计算文章长度和估算阅读时间" class="headerlink" title="计算文章长度和估算阅读时间"></a>计算文章长度和估算阅读时间</h4><h5 id="安装命令-5"><a href="#安装命令-5" class="headerlink" title="安装命令"></a>安装命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><h5 id="在-config-yml设置-5"><a href="#在-config-yml设置-5" class="headerlink" title="在_config.yml设置"></a>在<code>_config.yml</code>设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: true</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by1zeW1ib2xzLWNvdW50LXRpbWU=" title="https://github.com/theme-next/hexo-symbols-count-time">插件详细配置<i class="fa fa-external-link"></i></span></p><h3 id="主题NexT配置"><a href="#主题NexT配置" class="headerlink" title="主题NexT配置"></a>主题NexT配置</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0" title="https://github.com/theme-next/hexo-theme-next">官方repo<i class="fa fa-external-link"></i></span></p><h4 id="加载条安装"><a href="#加载条安装" class="headerlink" title="加载条安装"></a>加载条安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-pace source/lib/pace</span><br></pre></td></tr></table></figure><h4 id="炫酷的canvas-nest"><a href="#炫酷的canvas-nest" class="headerlink" title="炫酷的canvas-nest"></a>炫酷的canvas-nest</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></table></figure><p>克隆之后，还要在NexT的配置文件里进行对应的配置，配置文件中已经说明每个功能的依赖和信息，更多的请根据NexT内的<code>_config.yml</code>进行配置</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>这不是教程，这个只是记录我自己是怎么配置的，更多炫酷的配置需要去发掘，比如魔改theme内的.swig文件等等。</p><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><p>我的<code>post.md</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">copyright: right</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">mathjax: true</span><br><span class="line">top: false</span><br><span class="line">categories:</span><br><span class="line">description:</span><br><span class="line">tags:</span><br><span class="line">id: </span><br><span class="line">layout: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      use hexo and github page to build your own static blog
    
    </summary>
    
    
      <category term="折腾笔记" scheme="https://blog.hzycjy.top/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Hexo" scheme="https://blog.hzycjy.top/tags/Hexo/"/>
    
      <category term="github page" scheme="https://blog.hzycjy.top/tags/github-page/"/>
    
  </entry>
  
  <entry>
    <title>WebUI-Aria2</title>
    <link href="https://blog.hzycjy.top/posts/webui-aria2/"/>
    <id>https://blog.hzycjy.top/posts/webui-aria2/</id>
    <published>2019-08-17T16:13:36.000Z</published>
    <updated>2019-09-01T18:37:23.586Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ppYWhhbXphL3dlYnVpLWFyaWEy" title="https://github.com/ziahamza/webui-aria2">github repo<i class="fa fa-external-link"></i></span></p><h3 id="前端用法"><a href="#前端用法" class="headerlink" title="前端用法"></a>前端用法</h3><p>官方给出的用法</p><ul><li>下载整个仓库，然后从 <code>docs</code> 文件夹中打开index.html</li><li>通过访问 <span class="exturl" data-url="aHR0cHM6Ly96aWFoYW16YS5naXRodWIuaW8vd2VidWktYXJpYTI=" title="https://ziahamza.github.io/webui-aria2">https://ziahamza.github.io/webui-aria2<i class="fa fa-external-link"></i></span> 来下载文件</li><li>在项目文件夹内通过<code>node node-server.js</code>来创建一个服务</li></ul><h3 id="后端用法"><a href="#后端用法" class="headerlink" title="后端用法"></a>后端用法</h3><p>通过以下命令启动aria2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c --enable-rpc --rpc-listen-all</span><br></pre></td></tr></table></figure><p>因为默认端口为6800，如果是部署在云端服务器的话，可以通过配置文件更改端口，或者在服务器商开启特定端口，使得服务正常使用。</p><h3 id="将aria2设置为开机自启"><a href="#将aria2设置为开机自启" class="headerlink" title="将aria2设置为开机自启"></a>将aria2设置为开机自启</h3><p>创建/修改文件<code>/lib/systemd/system/aria2.service</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description= aria2</span><br><span class="line">After=network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/aria2c --conf-path=***************</span><br><span class="line">ExecStop=/bin/kill $MAINPID</span><br><span class="line">RestartSec=always</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable aria2.service</span><br><span class="line">systemctl start aria2.service</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果你是通过https访问的话，aria2的rpc服务可能也需要开启SSL/TLS加密，我是直接用网站的https的证书就ojbk了。</p><h3 id="aria2-bt下载加速"><a href="#aria2-bt下载加速" class="headerlink" title="aria2 bt下载加速"></a>aria2 bt下载加速</h3><p>在<code>aria2.conf</code>的目录内运行这个sh文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">killall aria2c</span><br><span class="line">list=`wget -qO- https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt|awk NF|sed &quot;:a;N;s/\n/,/g;ta&quot;`</span><br><span class="line">if [ -z &quot;`grep &quot;bt-tracker&quot; ./aria2.conf`&quot; ]; then</span><br><span class="line">    sed -i &apos;$a bt-tracker=&apos;$&#123;list&#125; /root/.aria2/aria2.conf</span><br><span class="line">    echo add......</span><br><span class="line">else</span><br><span class="line">    sed -i &quot;s@bt-tracker.*@bt-tracker=$list@g&quot; ./aria2.conf</span><br><span class="line">    echo update......</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>如果无法运行请给它改为可运行文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./trackers-list-aria2.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      在自己的服务器上折腾一个离线下载服务
    
    </summary>
    
    
      <category term="折腾笔记" scheme="https://blog.hzycjy.top/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://blog.hzycjy.top/tags/linux/"/>
    
      <category term="aria2" scheme="https://blog.hzycjy.top/tags/aria2/"/>
    
  </entry>
  
  <entry>
    <title>牛顿迭代法</title>
    <link href="https://blog.hzycjy.top/posts/Newton&#39;s-method/"/>
    <id>https://blog.hzycjy.top/posts/Newton&#39;s-method/</id>
    <published>2019-08-15T18:42:53.000Z</published>
    <updated>2019-09-01T18:32:47.250Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么会牛顿迭代法"><a href="#为什么会牛顿迭代法" class="headerlink" title="为什么会牛顿迭代法"></a>为什么会牛顿迭代法</h3><p>伽罗瓦用群论证明了高于四次的方程不存在求根公式，那么需要一种快速求方程根的做法了。</p><p>牛顿迭代法是求方程根的重要方法之一，其最大优点是在方程的单根附近具有<a href="[当我们谈论收敛速度时，我们都在谈什么？](https://zhuanlan.zhihu.com/p/27644403)">平方收敛</a>，比二分求根快了很door。</p><h3 id="牛顿迭代的原理"><a href="#牛顿迭代的原理" class="headerlink" title="牛顿迭代的原理"></a>牛顿迭代的原理</h3><p><del>随便</del>选取一个点，做函数的切线，你可以计算出这条切线与x轴上的交点的x坐标，显然是要靠近根了，做多几遍就会越靠近了。</p><h3 id="牛顿迭代的公式"><a href="#牛顿迭代的公式" class="headerlink" title="牛顿迭代的公式"></a>牛顿迭代的公式</h3><p>上面的描述，先选取一个$x_0$，做切线找与x轴上的交点，$x_1=x_0-\frac{f(x_0)}{f’(x_0)}$，也就是按照$x_i=x_{i-1}-\frac{f(x_{i-1})}{f’(x_{i-1})}$一直迭代，可以按照精度迭代，也可以自定数量迭代。</p><p><img src="https://i.loli.net/2019/08/29/W3F1X7KC5tQHos8.gif" alt="NewtonIteration.gif"></p><h3 id="牛顿迭代适用范围"><a href="#牛顿迭代适用范围" class="headerlink" title="牛顿迭代适用范围"></a>牛顿迭代适用范围</h3><ul><li>只能用来求方程的一个根，可导即可。</li><li>多根函数可能会出大锅，而且对初始值有要求</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="开平方"><a href="#开平方" class="headerlink" title="开平方"></a>开平方</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans=x*<span class="number">0.5</span>;</span><br><span class="line">   <span class="keyword">while</span> (<span class="built_in">abs</span>(ans*ans-x)&gt;<span class="number">1e-7</span>) &#123;</span><br><span class="line">    ans-=(ans*ans-x)/(<span class="number">2</span>*ans);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> x0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>对于$e^b=x$，我们需要求x时，你可以设函数为$y=x-e^b$，但你先不正要求这个$e^b$吗？所以你需要把函数设成$y=ln(x)-b$来做牛顿迭代。</p><p>设函数为$y=\ln(x)-b$，求得根时，我们就知道$e^x$的值。</p>]]></content>
    
    <summary type="html">
    
      牛顿迭代法，一个快速求根的方法
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.hzycjy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="math" scheme="https://blog.hzycjy.top/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Privacy</title>
    <link href="https://blog.hzycjy.top/posts/privacy/"/>
    <id>https://blog.hzycjy.top/posts/privacy/</id>
    <published>2019-08-07T13:32:49.000Z</published>
    <updated>2019-09-01T18:35:57.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS加密，使用DoH加密域名解析请求。</p><p>使用Cloudflare的公共DNS，不让DNS记录你的域名解析内容。</p><h3 id="Search-Engine"><a href="#Search-Engine" class="headerlink" title="Search Engine"></a>Search Engine</h3><p>使用<span class="exturl" data-url="aHR0cHM6Ly9kdWNrZHVja2dvLmNvbS8=" title="https://duckduckgo.com/">DuckDuckGo<i class="fa fa-external-link"></i></span>或者<span class="exturl" data-url="aHR0cHM6Ly9taWppc291LmNvbS8=" title="https://mijisou.com/">秘迹搜索<i class="fa fa-external-link"></i></span>，进行搜索，不记录你的搜索记录。</p><h3 id="Password"><a href="#Password" class="headerlink" title="Password"></a>Password</h3><p>少依赖电子程序或者电子文档去记录密码，可以利用电子程序去生成随机密码，尽量用纸笔记录帐号密码，这有利于你知道你在哪些网站注册过，销号容易，换手机号码也方便。</p>]]></content>
    
    <summary type="html">
    
      你总会不知不觉地用你的隐私交换成方便
    
    </summary>
    
    
      <category term="折腾笔记" scheme="https://blog.hzycjy.top/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="privacy" scheme="https://blog.hzycjy.top/tags/privacy/"/>
    
  </entry>
  
  <entry>
    <title>墙裂推荐Firefox</title>
    <link href="https://blog.hzycjy.top/posts/recommend-using-firefox/"/>
    <id>https://blog.hzycjy.top/posts/recommend-using-firefox/</id>
    <published>2019-08-07T13:28:19.000Z</published>
    <updated>2019-09-01T18:36:40.048Z</updated>
    
    <content type="html"><![CDATA[<p>Firefox的速度还是比不上chrome，这没得说，内存比chrome占用少，但是Firefox在隐私这方面比chrome好，而且现在能设置DoH了，Firefox68能在网络设置界面设置DoH了，用着还算舒服，还有不用神奇的上网方式就能用官方的方式同步标签、装插件，很舒服。<del>github上有破解版的插件装在chrome上就能访问google，使用官方的同步。</del></p><p>chrome是基于chromium内核的浏览器，而且现在越来越多浏览器使用chromium内核，基于chromium内核的浏览器的份额越来越大，巨硬的edge也开始用chromium内核了，一家独大的话，标准的制定就很难起作用了，因为只需要对chromium适配就ojbk，chromium成为了标准，万维网联盟(W3C)会被架空了？导致更多人去使用基于chromium内核的浏览器，第二个IE?而且google公司就能拥有更多的用户，更多用户数据，隐私问题lei了，毕竟google是个广告公司，通过打标签给你推送特定的广告自己能获得更多的收入，也是个正常的行为，毕竟谷歌大部分的收入都来自广告。</p><p><del>你甚至可以使用Tor-browser</del></p>]]></content>
    
    <summary type="html">
    
      需要Firefox来制衡Chromium
    
    </summary>
    
    
      <category term="安全" scheme="https://blog.hzycjy.top/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="privacy" scheme="https://blog.hzycjy.top/tags/privacy/"/>
    
      <category term="browser" scheme="https://blog.hzycjy.top/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>DNS-over-HTTPS</title>
    <link href="https://blog.hzycjy.top/posts/dns-over-https/"/>
    <id>https://blog.hzycjy.top/posts/dns-over-https/</id>
    <published>2019-08-07T11:32:43.000Z</published>
    <updated>2019-09-07T18:49:54.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>一个帮我们将记住对应域名所指向IP地址的服务器，的确很方便，我们不用去记住一些晦涩难懂的IP地址。</p><h2 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h2><p>通过劫持DNS来修改某些域名的解析记录，从而使访问该域名的人得到错误的IP，导致我们无法访问一些网站，当然有些网站不应该由DNS背锅，那是有别的一些原因导致的。</p><h2 id="DNS污染"><a href="#DNS污染" class="headerlink" title="DNS污染"></a>DNS污染</h2><p>让用户得到虚拟目标主机的IP，因为DNS没有认证机制，通常基于UDP，速度的确快，但是会被篡改。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="解决DNS劫持"><a href="#解决DNS劫持" class="headerlink" title="解决DNS劫持"></a>解决DNS劫持</h3><p>将DNS换成公共DNS就ojbk。</p><h3 id="解决DNS污染"><a href="#解决DNS污染" class="headerlink" title="解决DNS污染"></a>解决DNS污染</h3><p>改Hosts、加密DNS请求。</p><h3 id="如何加密DNS请求呢？"><a href="#如何加密DNS请求呢？" class="headerlink" title="如何加密DNS请求呢？"></a>如何加密DNS请求呢？</h3><h4 id="dnscrypt"><a href="#dnscrypt" class="headerlink" title="dnscrypt"></a><span class="exturl" data-url="aHR0cHM6Ly9kbnNjcnlwdC5pbmZvLw==" title="https://dnscrypt.info/">dnscrypt<i class="fa fa-external-link"></i></span></h4><p>我没用过，不会用QAQ。</p><h4 id="DoT"><a href="#DoT" class="headerlink" title="DoT"></a>DoT</h4><p>DNS-over-TLS，TLS(Transport Layer Security)，通过853端口，但是有个很神奇的东西，当你使用853端口的时候，就有人知道你在用DoT，当然，你也可以改端口号。</p><h4 id="DoH"><a href="#DoH" class="headerlink" title="DoH"></a>DoH</h4><p>DNS-over-HTTPS，通过443端口，与HTTPS同端口(废话)，我正在使用，用了之后能访问ddg，dde(deepin desktop environment)+ddg更配噢，差个ddf♂(雾</p><h2 id="公共DNS"><a href="#公共DNS" class="headerlink" title="公共DNS"></a>公共DNS</h2><table><thead><tr><th>Name</th><th>DNS1</th><th align="left">DNS2</th></tr></thead><tbody><tr><td>Cloudflare DNS</td><td>1.1.1.1</td><td align="left">1.0.0.1</td></tr><tr><td>ALIDNS</td><td>223.5.5.5</td><td align="left">223.6.6.6</td></tr><tr><td>google DNS</td><td>8.8.8.8</td><td align="left">8.8.4.4</td></tr></tbody></table><p>Cloudflare DNS是Cloudflare与APNIC合作新推出的公共DNS。</p><blockquote><p>原来，Cloudflare 并不拥有 1.1.1.1 和 1.0.0.1 这两个 IP，而是从 APNIC 那里得到了使用权。APNIC  全称 Asia-Pacific Network Information  Centre，亚太网络信息中心，是世界五大区域互联网注册机构之一。它管理亚洲以及太平洋地区的互联网资源，其中我们最熟悉的就是 IP  地址了。APNIC 作为分配 IP 地址的官方，持有几个靓号自然是合情合理了。</p><p>靓号虽好，可不是谁都能用的。如果不是数字简单，方便记忆，1.1.1.1  其实只是几十亿 IPv4 中的普通一个。它也不属于标准规定的保留地址（配置过路由器的同学，多少遇到过 192.168.x.x  这样的为内网或其他用途保留的号段）。但就是因为它太好记，并且一直没有被使用，所以很多网络运维测试需要随便填一个 IP 时就顺手填了个  1.1.1.1。甚至有些黑客也用 1.1.1.1 来测试其僵尸网络。于是，1.1.1.1  就被来自世界各地的垃圾信息洪流淹没了，几乎是一场永不停息的 DDoS 攻击。</p><p>这个时候，主角 Cloudflare  登场了。Cloudflare 的主营业务就是网络安全，应对 DDoS 更是看家本领。所以他们主动找上了  APNIC，提出了自己建立一个隐私优先、速度极致的 DNS 服务的设想。APNIC 十分感动，同意了 Cloudflare  的提议。从此，Cloudflare 要用自己的网络来承受原本指向 1.1.1.1 的“垃圾”信息，也换得了在靓号上运行 DNS  解析服务器的机会。</p><p>来自<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjE2OTE1Mw==" title="https://zhuanlan.zhihu.com/p/36169153">用上 ip 靓号1.1.1.1，Cloudflare 花了多少钱？<i class="fa fa-external-link"></i></span></p><p>This work is licensed under a <span class="exturl" data-url="aHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnkvNC4wLw==" title="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License<i class="fa fa-external-link"></i></span>.</p></blockquote><h2 id="如何在Firefox上使用DoH"><a href="#如何在Firefox上使用DoH" class="headerlink" title="如何在Firefox上使用DoH"></a>如何在Firefox上使用DoH</h2><ol><li>在Firefox的地址栏输入 <code>about:config</code>，并确认了解此风险，不了解就不使用DoH呗</li><li>搜索<code>network.trr</code></li><li>将<code>network.trr.mode</code>修改为2，意为首选DoH，实在不行就用平常的DNS查询方法</li><li><code>network.ttr.uri</code>是<code>https://mozilla.cloudflare-dns.com/dns-query</code>就OK了，当然你也可以改成其他支持DoH的服务器网址。支持的好像不多，感觉这个已经比较快了。</li><li>修改<code>network.trr.bootstrapAddress</code>为一个后备的DNS，我就改为了1.0.0.1，因为我这1.1.1.1是不能用的。</li><li>进入网址<span class="exturl" data-url="aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vc3NsL2VuY3J5cHRlZC1zbmkv" title="https://www.cloudflare.com/ssl/encrypted-sni/">Browsing Experience Security Check<i class="fa fa-external-link"></i></span>,cloudflare给的一个检查DNS服务是否走cloudflare的，Check My Browser后，看到最右边是Secure DNS就OK了。</li></ol><h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><p>访问国内的网站有点慢，国外的网站就感觉快了一丢丢，github不会因为DNS污染而访问不了了，我自己也难得一个个地去改Hosts了，重要的是能上ddg了，再不不需要百毒了，注意，还是用不了谷歌的，别想一些有的没的。</p>]]></content>
    
    <summary type="html">
    
      通过DoH来防止DNS污染
    
    </summary>
    
    
      <category term="折腾笔记" scheme="https://blog.hzycjy.top/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="dns" scheme="https://blog.hzycjy.top/tags/dns/"/>
    
      <category term="DoH" scheme="https://blog.hzycjy.top/tags/DoH/"/>
    
  </entry>
  
  <entry>
    <title>NPM Install Error</title>
    <link href="https://blog.hzycjy.top/posts/npm-install-error/"/>
    <id>https://blog.hzycjy.top/posts/npm-install-error/</id>
    <published>2019-08-02T18:56:32.000Z</published>
    <updated>2019-09-07T18:33:41.389Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9yZXNvbHZpbmctZWFjY2VzLXBlcm1pc3Npb25zLWVycm9ycy13aGVuLWluc3RhbGxpbmctcGFja2FnZXMtZ2xvYmFsbHk=" title="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">Resolving EACCES permissions errors when installing packages globally<i class="fa fa-external-link"></i></span></p></blockquote><blockquote><p>Note: This section does not apply to Microsoft Windows.</p></blockquote><p>Just follow the next few steps:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.npm-global</span><br><span class="line">npm config set prefix '~/.npm-global'</span><br></pre></td></tr></table></figure><p>Open your editor to edit ‘~/.profile’. If this file doesn’t exist, just create it. And add this line:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=~/.npm-global/bin:$PATH</span><br></pre></td></tr></table></figure><p>Update your system variables:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><p>If you use cnpm, just change npm to cnpm.</p>]]></content>
    
    <summary type="html">
    
      npm权限不足的解决方法
    
    </summary>
    
    
      <category term="折腾笔记" scheme="https://blog.hzycjy.top/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="npm" scheme="https://blog.hzycjy.top/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>2019-Nowcoder-Multi-University-Training-Camp-3</title>
    <link href="https://blog.hzycjy.top/posts/2019nowcoder3/"/>
    <id>https://blog.hzycjy.top/posts/2019nowcoder3/</id>
    <published>2019-07-29T13:18:37.000Z</published>
    <updated>2019-09-07T18:49:16.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="B-Crazy-Binary-String"><a href="#B-Crazy-Binary-String" class="headerlink" title="B Crazy Binary String"></a>B Crazy Binary String</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给你一个串，找出01个数相同的子串和子序列最长的长度为多少。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>对于子串，把0换成-1，如果$s[l,r]$的01个数相同，那么前缀和$a[r]-a[l-1]=0$</p><p>对于子序列，$\min(count(‘0’),count(‘1’))$就是答案。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100010</span>];</span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> minn=min(n,m);</span><br><span class="line">    ll l=<span class="number">1</span>,r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=minn; i++) &#123;</span><br><span class="line">        l=l*(n--)/i;</span><br><span class="line">        r=r*(m--)/i;</span><br><span class="line">        ans+=l*r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;tmp) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(x!=tmp.x)<span class="keyword">return</span> x&lt;tmp.x;</span><br><span class="line">        <span class="keyword">return</span> id&lt;tmp.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; no[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    no[<span class="number">0</span>].x=<span class="number">0</span>;</span><br><span class="line">    no[<span class="number">0</span>].id=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        a[i]=(s[i]==<span class="string">'0'</span>)?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">        a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line">        no[i].x=a[i];</span><br><span class="line">        no[i].id=i;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'0'</span>)x++;</span><br><span class="line">        <span class="keyword">else</span> y++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    sort(no,no+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(r&lt;=n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(no[r+<span class="number">1</span>].x==no[l].x) &#123;</span><br><span class="line">            r++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r=l=r+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(ans,no[r].id-no[l].id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans,min(x,y)&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-Planting-Trees"><a href="#F-Planting-Trees" class="headerlink" title="F Planting Trees"></a>F Planting Trees</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给你n*n的矩阵，找出最大的矩阵，使得找出的矩阵最大值减最小值&lt;=m。</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>枚举上下边界，枚举右边界，用两个数组保存上下边界内每一列的最大值和最小值，用两个单调队列维护从L列的R列的最大值和最小值，这样可以找出枚举的右边界对应的左边界。注意，有可能出现找不到左边界，所以此时应该枚举下一个右边界。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;e</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;(-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N =<span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> esp = <span class="number">1e-7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, Map[N][N],Max[N],Min[N],q[N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,ans;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Map[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &lt;= n; p++) &#123;</span><br><span class="line">                Max[p] = Map[i][p], Min[p] = Map[i][p];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">                    Max[k] = max(Max[k],Map[j][k]);</span><br><span class="line">                    Min[k] = min(Min[k], Map[j][k]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>, ql = <span class="number">1</span>, qr = <span class="number">1</span>, pl = <span class="number">1</span>,pr = <span class="number">1</span>;</span><br><span class="line">                q[<span class="number">1</span>] = <span class="number">1</span>, p[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (r &lt;= n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (l==r+<span class="number">1</span>||Max[q[ql]] - Min[p[pl]] &lt;= m) &#123;</span><br><span class="line">                        ans = max(ans,(j-i+<span class="number">1</span>)*(r-l+<span class="number">1</span>));</span><br><span class="line">                        r++;</span><br><span class="line">                        <span class="keyword">while</span> (ql &lt;= qr &amp;&amp; Max[q[qr]] &lt;= Max[r])</span><br><span class="line">                            qr--;</span><br><span class="line">                        q[++qr] = r;</span><br><span class="line">                        <span class="keyword">while</span> (pl &lt;= pr &amp;&amp; Min[p[pr]] &gt;= Min[r])</span><br><span class="line">                            pr--;</span><br><span class="line">                        p[++pr] = r;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (q[ql] == l)</span><br><span class="line">                            ql++;</span><br><span class="line">                        <span class="keyword">if</span> (p[pl] == l)</span><br><span class="line">                            pl++;</span><br><span class="line">                        l++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-Magic-Line"><a href="#H-Magic-Line" class="headerlink" title="H Magic Line"></a>H Magic Line</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给你n个点，n为偶数，你要作一条线使得n个点恰好平分在两边，给出这条线过的两个点。</p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>对点双关键字排序，然后把前$\frac{n}{2}$个点划分到一边，其余的划分到另一边，只要直接足够直，就不会穿过给出的点。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> x10,x20,y10,y20;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;tmp)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(x!=tmp.x)<span class="keyword">return</span> x&lt;tmp.x;</span><br><span class="line">        <span class="keyword">return</span> y&lt;tmp.y;</span><br><span class="line">    &#125;    len=<span class="number">0</span>;<span class="comment">//使用的是手写堆，所    len=0;//使用的是手写堆，所以这里我要每次清零。可以忽略以这里我要每次清零。可以忽略</span></span><br><span class="line"></span><br><span class="line">&#125; no[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1010</span>],y[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)    len=<span class="number">0</span>;<span class="comment">//使用的是手写堆，所以这里我要每次清零。可以忽略 &#123;</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">            no[i].x=x[i];</span><br><span class="line">            no[i].y=y[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(no+<span class="number">1</span>,no+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> mid = n&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(no[mid].x!=no[mid+<span class="number">1</span>].x) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d 100000000 %d -100000000\n"</span>,no[mid].x,no[mid+<span class="number">1</span>].x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = (no[mid+<span class="number">1</span>].y+no[mid].y)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> l=tmp+<span class="number">100000000</span>,r=tmp<span class="number">-100000000</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(no[mid].y-no[mid+<span class="number">1</span>].y)==<span class="number">1</span>)r++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>,no[mid].x<span class="number">-1</span>,l,no[mid].x+<span class="number">1</span>,r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;(-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N =<span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> esp = <span class="number">1e-7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t,n,m,op,v;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="built_in">list</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&gt;::iterator&gt;M;</span><br><span class="line">        M.clear();</span><br><span class="line">        <span class="built_in">list</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;L;</span><br><span class="line">        L.clear();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; op &gt;&gt; s &gt;&gt; v;</span><br><span class="line">            pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; p = make_pair(s, v);</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (M.find(p.first) == M.end()) &#123;</span><br><span class="line">                    L.push_back(p);</span><br><span class="line">                    M[p.first] = --L.end();</span><br><span class="line">                    <span class="keyword">if</span> (L.size() &gt; m) &#123;</span><br><span class="line">                        M.erase(L.front().first);</span><br><span class="line">                        L.pop_front();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    p = *M[p.first];</span><br><span class="line">                    L.erase(M[p.first]);</span><br><span class="line">                    L.push_back(p);</span><br><span class="line">                    M[p.first] =--L.end();</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p.second);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="number">2019</span>年<span class="number">7</span>月<span class="number">29</span>日 (一) <span class="number">11</span>:<span class="number">00</span>的版本</span><br><span class="line">                <span class="keyword">if</span> (M.find(p.first) == M.end()) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Invalid\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">list</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;::iterator id=M[p.first];</span><br><span class="line">                    <span class="keyword">if</span> ((id == L.begin() &amp;&amp; v == <span class="number">-1</span>) || (id == --L.end() &amp;&amp; v == <span class="number">1</span>)) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Invalid\n"</span>);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (v == <span class="number">-1</span>)</span><br><span class="line">                        id--;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (v == <span class="number">1</span>)</span><br><span class="line">                        id++;</span><br><span class="line">                    p = *id;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p.second);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      2019牛客多校第三场题解
    
    </summary>
    
    
      <category term="题解报告" scheme="https://blog.hzycjy.top/categories/%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="algorithm" scheme="https://blog.hzycjy.top/tags/algorithm/"/>
    
      <category term="2019-Multi-University-Training-Contest" scheme="https://blog.hzycjy.top/tags/2019-Multi-University-Training-Contest/"/>
    
  </entry>
  
  <entry>
    <title>Template</title>
    <link href="https://blog.hzycjy.top/posts/acmtemplate/"/>
    <id>https://blog.hzycjy.top/posts/acmtemplate/</id>
    <published>2019-07-28T18:24:02.000Z</published>
    <updated>2019-09-07T18:49:27.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introducing"><a href="#Introducing" class="headerlink" title="Introducing"></a>Introducing</h3><p>We are working on a new ACMtemplate for preparing the coming contest. But it is a long job. We need to take some time to collect template and refactor it in order to make it useful. It has two versions. One is made from markdown by using typora, another one is made from $\LaTeX$ by using $\TeX{studio}$.</p><p>This is the <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Rlbm5pc1pZL0FDTXRlbXBsYXRl" title="https://github.com/DennisZY/ACMtemplate">github repo<i class="fa fa-external-link"></i></span>. I would be happy to have your template contributed.</p><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><h4 id="source-code"><a href="#source-code" class="headerlink" title="source code"></a>source code</h4><ul><li><span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0Rlbm5pc1pZL0FDTXRlbXBsYXRlL21hc3Rlci9BQ00tdGVtcGxhdGUtbWFya2Rvd24tdmVyc2lvbi5tZA==" title="https://raw.githubusercontent.com/DennisZY/ACMtemplate/master/ACM-template-markdown-version.md">markdown<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0Rlbm5pc1pZL0FDTXRlbXBsYXRlL21hc3Rlci9BQ00tdGVtcGxhdGUtbGF0ZXgtdmVyc2lvbi50ZXg=" title="https://raw.githubusercontent.com/DennisZY/ACMtemplate/master/ACM-template-latex-version.tex">latex<i class="fa fa-external-link"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      ACM常用算法模板
    
    </summary>
    
    
      <category term="资源" scheme="https://blog.hzycjy.top/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="algorithm" scheme="https://blog.hzycjy.top/tags/algorithm/"/>
    
      <category term="template" scheme="https://blog.hzycjy.top/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>2019-Nowcoder-Multi-University-Training-Camp-2</title>
    <link href="https://blog.hzycjy.top/posts/2019nowcoder2/"/>
    <id>https://blog.hzycjy.top/posts/2019nowcoder2/</id>
    <published>2019-07-28T17:47:27.000Z</published>
    <updated>2019-09-07T18:49:11.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="A-Eddy-Walker"><a href="#A-Eddy-Walker" class="headerlink" title="A Eddy Walker"></a>A Eddy Walker</h3><p>题意：有个长度为n的环，每次从0开始，把所有格子走完的时候所在的地方为m的概率。</p><p>题解：在环上，总有点是对称的，那么在对称的点上结束的概率是一样的，如果换一个点为起点，就会找到另外的对称点，又因为不能在0点位结束，所以每个点的概率都为$\frac{1}{n-1}$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll n)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=(ans*a)%mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=(a*a)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        ll n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;m==<span class="number">0</span>)&#123;</span><br><span class="line">            ans*=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">0</span>)&#123;</span><br><span class="line">            ans*=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans*=qpow(n<span class="number">-1</span>,mod<span class="number">-2</span>);</span><br><span class="line">            ans%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-Eddy-Walker2"><a href="#B-Eddy-Walker2" class="headerlink" title="B Eddy Walker2"></a>B Eddy Walker2</h3><p>题意：每次走1到k间的一个值，问走到n的概率，n为-1表示正无穷。</p><p>题解：设f[i]表示走到i的概率，则$f[i]$由$\frac{f[i-k-1]}{k}+…+\frac{f[i-1]}{k}$更新，设s[i]表示前缀概率和，则可写为 $f[i]=(s[i-1]-s[i-1-k])*(1/k)$,线性递推，由于数据太大，矩阵快速幂会超时，故用BM。当n为无穷时，暴力可看出，概率为$\frac{2}{k+2}$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;(-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for (int i=a;i&lt;n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,n) for (int i=n-1;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll f[N], s[N];</span><br><span class="line"><span class="function">ll <span class="title">powmod</span><span class="params">(ll a, ll b)</span> </span>&#123; ll res = <span class="number">1</span>; a %= mod; assert(b &gt;= <span class="number">0</span>); <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>) &#123; <span class="keyword">if</span> (b &amp; <span class="number">1</span>)res = res * a%mod; a = a * a%mod; &#125;<span class="keyword">return</span> res; &#125;</span><br><span class="line"><span class="comment">// head</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> _, n;</span><br><span class="line"><span class="keyword">namespace</span> linear_seq &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line">    ll res[N], base[N], _c[N], _md[N];</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Md;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        rep(i, <span class="number">0</span>, k + k) _c[i] = <span class="number">0</span>;</span><br><span class="line">        rep(i, <span class="number">0</span>, k) <span class="keyword">if</span> (a[i]) rep(j, <span class="number">0</span>, k) _c[i + j] = (_c[i + j] + a[i] * b[j]) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k + k - <span class="number">1</span>; i &gt;= k; i--) <span class="keyword">if</span> (_c[i])</span><br><span class="line">            rep(j, <span class="number">0</span>, SZ(Md)) _c[i - k + Md[j]] = (_c[i - k + Md[j]] - _c[i] * _md[Md[j]]) % mod;</span><br><span class="line">        rep(i, <span class="number">0</span>, k) a[i] = _c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(ll n, VI a, VI b)</span> </span>&#123; </span><br><span class="line">        ll ans = <span class="number">0</span>, pnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = SZ(a);</span><br><span class="line">        assert(SZ(a) == SZ(b));</span><br><span class="line">        rep(i, <span class="number">0</span>, k) _md[k - <span class="number">1</span> - i] = -a[i]; _md[k] = <span class="number">1</span>;</span><br><span class="line">        Md.clear();</span><br><span class="line">        rep(i, <span class="number">0</span>, k) <span class="keyword">if</span> (_md[i] != <span class="number">0</span>) Md.push_back(i);</span><br><span class="line">        rep(i, <span class="number">0</span>, k) res[i] = base[i] = <span class="number">0</span>;</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1l</span>l &lt;&lt; pnt) &lt;= n) pnt++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p = pnt; p &gt;= <span class="number">0</span>; p--) &#123;</span><br><span class="line">            mul(res, res, k);</span><br><span class="line">            <span class="keyword">if</span> ((n &gt;&gt; p) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) res[i + <span class="number">1</span>] = res[i]; res[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                rep(j, <span class="number">0</span>, SZ(Md)) res[Md[j]] = (res[Md[j]] - res[k] * _md[Md[j]]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i, <span class="number">0</span>, k) ans = (ans + res[i] * b[i]) % mod;</span><br><span class="line">        <span class="keyword">if</span> (ans &lt; <span class="number">0</span>) ans += mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">VI <span class="title">BM</span><span class="params">(VI s)</span> </span>&#123;</span><br><span class="line">        VI C(1, 1), B(1, 1);</span><br><span class="line">        <span class="keyword">int</span> L = <span class="number">0</span>, m = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">        rep(n, <span class="number">0</span>, SZ(s)) &#123;</span><br><span class="line">            ll d = <span class="number">0</span>;</span><br><span class="line">            rep(i, <span class="number">0</span>, L + <span class="number">1</span>) d = (d + (ll)C[i] * s[n - i]) % mod;</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="number">0</span>) ++m;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> * L &lt;= n) &#123;</span><br><span class="line">                VI T = C;</span><br><span class="line">                ll c = mod - d * powmod(b, mod - <span class="number">2</span>) % mod;</span><br><span class="line">                <span class="keyword">while</span> (SZ(C) &lt; SZ(B) + m) C.pb(<span class="number">0</span>);</span><br><span class="line">                rep(i, <span class="number">0</span>, SZ(B)) C[i + m] = (C[i + m] + c * B[i]) % mod;</span><br><span class="line">                L = n + <span class="number">1</span> - L; B = T; b = d; m = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ll c = mod - d * powmod(b, mod - <span class="number">2</span>) % mod;</span><br><span class="line">                <span class="keyword">while</span> (SZ(C) &lt; SZ(B) + m) C.pb(<span class="number">0</span>);</span><br><span class="line">                rep(i, <span class="number">0</span>, SZ(B)) C[i + m] = (C[i + m] + c * B[i]) % mod;</span><br><span class="line">                ++m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(VI a, ll n)</span> </span>&#123;</span><br><span class="line">        VI c = BM(a);</span><br><span class="line">        c.erase(c.begin());</span><br><span class="line">        rep(i, <span class="number">0</span>, SZ(c)) c[i] = (mod - c[i]) % mod;</span><br><span class="line">        <span class="keyword">return</span> solve(n, c, VI(a.begin(), a.begin() + SZ(c)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = ans * a%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a%mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll k, n;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;k,&amp;n);</span><br><span class="line">        ll invk = qpow(k, mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="number">2</span>*qpow(k+<span class="number">1</span>,mod<span class="number">-2</span>)%mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            f[<span class="number">0</span>] = <span class="number">1</span>, s[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt;=k) &#123;</span><br><span class="line">                    f[i] = invk * s[i - <span class="number">1</span>] % mod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    f[i] = invk * (s[i - <span class="number">1</span>] - s[i - k - <span class="number">1</span>] + mod) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">                s[i] = (s[i - <span class="number">1</span>] + f[i]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">                v.push_back(f[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, linear_seq::gao(v, n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-Partition-problem"><a href="#F-Partition-problem" class="headerlink" title="F Partition problem"></a>F Partition problem</h3><p>题意：给你一个n，给出$2n\times2n$的矩阵，$v_{ij}$表示$i$与$j$之间的边权，让你把$2n$个人分为两组，使得一组人与另一组人的所有的边权的和最大。</p><p>题解：枚举每种状态，每一步更新更新一次，能把$O(n^2)$的查询时间压为$O(n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mmp[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> n,nn;</span><br><span class="line"><span class="keyword">int</span> l[<span class="number">20</span>],r[<span class="number">20</span>];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> cnt1,<span class="keyword">int</span> cnt2,ll res)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt1==n&amp;&amp;cnt2==n)&#123;</span><br><span class="line">        ans=max(ans,res);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll tmp;</span><br><span class="line">    <span class="keyword">if</span>(cnt1&lt;n)&#123;</span><br><span class="line">        tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt2;i++)&#123;</span><br><span class="line">            tmp+=mmp[r[i]][pos];</span><br><span class="line">        &#125;</span><br><span class="line">        l[cnt1]=pos;</span><br><span class="line">        dfs(pos+<span class="number">1</span>,cnt1+<span class="number">1</span>,cnt2,res+tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt2&lt;n)&#123;</span><br><span class="line">        tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt1;i++)&#123;</span><br><span class="line">            tmp+=mmp[l[i]][pos];</span><br><span class="line">        &#125;</span><br><span class="line">        r[cnt2]=pos;</span><br><span class="line">        dfs(pos+<span class="number">1</span>,cnt1,cnt2+<span class="number">1</span>,res+tmp);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    nn=n&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nn;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nn;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;mmp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    l[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-Second-Large-Rectangle"><a href="#H-Second-Large-Rectangle" class="headerlink" title="H Second Large Rectangle"></a>H Second Large Rectangle</h3><p>题意：计算次大全为1的长方形的面积大小</p><p>题解：用单调栈维护全为1的长方形面积最大和次大两个值即可。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> mmp[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> sta[<span class="number">1010</span>],w[<span class="number">1010</span>],top;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)<span class="keyword">return</span> (x<span class="number">-1</span>)*y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (y<span class="number">-1</span>)*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;mmp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(mmp[i][j])mmp[i][j]+=mmp[i<span class="number">-1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> ans1=<span class="number">0</span>,ans2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        top=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m+<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> weight=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(top&amp;&amp;sta[top]&gt;mmp[i][j]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(sta[top]*(w[top]+weight)&gt;=ans1) &#123;</span><br><span class="line">                    ans2=max(ans1,work(sta[top],(w[top]+weight)));</span><br><span class="line">                    ans1=sta[top]*(w[top]+weight);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sta[top]*(w[top]+weight)&gt;=ans2) &#123;</span><br><span class="line">                    ans2=sta[top]*(w[top]+weight);</span><br><span class="line">                &#125;</span><br><span class="line">                weight+=w[top];</span><br><span class="line">                top--;</span><br><span class="line">            &#125;</span><br><span class="line">            sta[++top]=mmp[i][j];</span><br><span class="line">            w[top]=weight+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      2019牛客多校第二场题解
    
    </summary>
    
    
      <category term="题解报告" scheme="https://blog.hzycjy.top/categories/%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="algorithm" scheme="https://blog.hzycjy.top/tags/algorithm/"/>
    
      <category term="2019-Multi-University-Training-Contest" scheme="https://blog.hzycjy.top/tags/2019-Multi-University-Training-Contest/"/>
    
  </entry>
  
  <entry>
    <title>2019-Nowcoder-Multi-University-Training-Camp-1</title>
    <link href="https://blog.hzycjy.top/posts/2019nowcoder1/"/>
    <id>https://blog.hzycjy.top/posts/2019nowcoder1/</id>
    <published>2019-07-28T09:44:16.000Z</published>
    <updated>2019-09-07T18:49:08.364Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="A-Equivalent-Prefixes"><a href="#A-Equivalent-Prefixes" class="headerlink" title="A Equivalent Prefixes"></a>A Equivalent Prefixes</h3><p>题意：给你ab两个数组，让你找出[1,p]区间使得他们任一区间的最小值的位置是一样的，求最大的p。</p><p>题解：二分答案，分别建立笛卡尔树，树形一样则正确。</p><h3 id="B-Integration"><a href="#B-Integration" class="headerlink" title="B Integration"></a>B Integration</h3><p>题意：知道$$\int_{0}^{\infty} \frac{1}{1+x^2}dx=\frac{\pi}{2}$$，求$$\int_{0}^{\infty} \frac{1}{\prod_{i=1}^n{a_i^2+x^2}}dx$$，可以证明这个一定是分数，要我们用分子乘分母逆元的方式来表示它。</p><p>题解：将连乘转换为累加，我们知道</p><p>$$<br>\frac{1}{xy}=\frac{1}{y-x}\times\frac{y-x}{xy}=\frac{1}{y-x}\times(\frac{1}{x}-\frac{1}{y})<br>$$</p><p>对于上面的连乘可以转换为</p><p>$$<br>\int_{0}^{\infty} \frac{1}{(a^2+x^2)\times(b^2+x^2)}dx=\int_{0}^{\infty} \frac{1}{b^2-a^2}\times(\frac{1}{a^2+x^2}-\frac{1}{b^2+x^2})dx=\frac{1}{b^2-a^2}\int_{0}^{\infty} \frac{1}{a^2+x^2}-\frac{1}{b^2+x^2}dx<br>$$</p><p>$$<br>\int_{0}^{\infty} \frac{1}{(b^2+x^2)\times(c^2+x^2)}dx=\frac{1}{c^2-b^2}\int_{0}^{\infty} \frac{1}{b^2+x^2}-\frac{1}{c^2+x^2}dx<br>$$</p><p>$$<br>\int_{0}^{\infty} \frac{1}{(a^2+x^2)\times(b^2+x^2)\times{(c^2+x^2)}}dx=\int_{0}^{\infty} \frac{1}{c^2-a^2}\times(\frac{1}{(a^2+x^2)\times(b^2+x^2)}-\frac{1}{(b^2+x^2)\times(c^2+x^2)})dx<br>$$</p><p>由此我们可以简略证明出</p><p>$$<br>\int_{0}^{\infty} \frac{1}{\prod_{i=n}^m{a_i^2+x^2}}dx(n \lneq m)<br>$$</p><p>可以由</p><p>$$<br>\int_{0}^{\infty} \frac{1}{\prod_{i=n+1}^m{a_i^2+x^2}}dx$$和$$\int_{0}^{\infty} \frac{1}{\prod_{i=n}^{m-1}{a_i^2+x^2}}dx<br>$$</p><p>得到。</p><p>而如果不预处理的话，直接爆搜会导致$$O(2^n)$$的时间复杂度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll n)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=ans*a%mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll a[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==x)<span class="keyword">continue</span>;</span><br><span class="line">        ans=ans*((a[i]*a[i]-a[x]*a[x])%mod)%mod;</span><br><span class="line">        ans=(ans+mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,a+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            ans=(ans+qpow(<span class="number">2</span>*a[i],mod<span class="number">-2</span>)*qpow(get(i),mod<span class="number">-2</span>))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-ABBA"><a href="#E-ABBA" class="headerlink" title="E ABBA"></a>E ABBA</h3><p>题意：给你两个数$n$和$m$,找出$2(n+m)$长度的只包含字母A和B的字符串符合有n个AB子序列和m个BA子序列的字符串有多少种方案。每个字母自能用一次。</p><p>题解：动态规划，dp[i,j]定义为字符串前缀(i+j)长度时候，有i个字母A和j个字母B的方案数，对于转移方程，对字母B的数量比需要的B的数量多的时候和字母A出现相同情况的状态作为非法状态，不对非法状态进行转移，通过计算当前状态是否能加上字母A或者字母B,如果可以的话，就进行对应的状态转移。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> &amp;a,<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line">    a+=x;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=mod)a-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> s = n+m;</span><br><span class="line">        <span class="comment">//memset(dp,0,sizeof dp);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=s;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=s;j++)&#123;</span><br><span class="line">                dp[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=s;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=s;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> ca=<span class="number">0</span>,cb=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> xy=max(n-i,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">int</span> x=min(i,n)-max(j-m,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                ca+=xy;</span><br><span class="line">                cb+=x;</span><br><span class="line">                 </span><br><span class="line">                xy=max(m-j,<span class="number">0</span>);</span><br><span class="line">                x=min(j,m)-max(i-n,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                cb+=xy;</span><br><span class="line">                ca+=x;</span><br><span class="line">         </span><br><span class="line">                <span class="keyword">if</span>(ca&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    add(dp[i+<span class="number">1</span>][j],dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cb&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    add(dp[i][j+<span class="number">1</span>],dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[s][s]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure><h3 id="F-Random-Point-in-Triangle"><a href="#F-Random-Point-in-Triangle" class="headerlink" title="F Random Point in Triangle"></a>F Random Point in Triangle</h3><p>题意：给你三角形的三个点，在三角形中均匀地取点P，求$$E = \max {S_{PAB},S_{PBC},S_{PCA}}$$的期望。</p><p>题解：手动作了个正三角形，手动算出三角形面积和期望x36的关系，然后就过了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vec</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,y;</span><br><span class="line">    vec(<span class="keyword">long</span> <span class="keyword">long</span> _x=<span class="number">0</span>,<span class="keyword">long</span> <span class="keyword">long</span> _y=<span class="number">0</span>):x(_x),y(_y)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">corss</span><span class="params">(<span class="keyword">const</span> vec &amp;tt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*tt.y-y*tt.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x1,x2,x3,y1,y2,y3;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld%lld"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2,&amp;x3,&amp;y3))&#123;</span><br><span class="line">        vec a(x2-x1,y2-y1),b(x3-x1,y3-y1);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans= <span class="built_in">abs</span>(a.corss(b)*<span class="number">11</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-XOR"><a href="#H-XOR" class="headerlink" title="H XOR"></a>H XOR</h3><p>题意：给你$$n$$个数字，作为一个集合的元素，找出子集异或为0的大小的和。</p><p>题解：线性基</p><p>对于集合大小求和会有点难以求得，我们可以将问题转换为计算每个数的贡献，先找出整个集合构成线性基的$k$个数，那么在$n-k$个数构成的集合中任一非空集合都能在线性基找到若干个数使得异或为$0$，所以在$n-k$个数，每个数都能参与$2^{n-k-1}$个集合的构造，所以$n-k$个数的贡献都为$2^{n-k-1}$，那么剩余那k个数需要计算贡献，用$n-k$个数建立另外一个线性基，每次先把$k$个数中的$k-1$个插入第二个线性基，然后检查第二个线性基是否需要这唯一的数来构造生成整个数组的线性基，如果不需要，这唯一的数也能参与到异或为$0$的子集中的构造，那么由于线性基的性质，相同集合的线性基都能由同样数量的k个数来构造，那么这唯一的数的贡献也就是$^{n-k-1}$了，然后把k个数都试一遍就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXL=<span class="number">62</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">basis</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a[MAXL+<span class="number">1</span>];</span><br><span class="line">    basis() &#123;</span><br><span class="line">        reset();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=MAXL; i&gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(x&gt;&gt;i)&amp;<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(a[i])x^=a[i];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)<span class="keyword">if</span>((x&gt;&gt;j)&amp;<span class="number">1</span>)x^=a[j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=MAXL; j++)<span class="keyword">if</span>((a[j]&gt;&gt;i)&amp;<span class="number">1</span>)a[j]^=x;</span><br><span class="line">                a[i]=x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qmax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=MAXL; i++)ans^=a[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a,b,c;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans,w,tmp;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=ans*a%mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> aa[MAXL+<span class="number">10</span>],top;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">        a.reset();</span><br><span class="line">        b.reset();</span><br><span class="line">        top=ans=w=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;tmp);</span><br><span class="line">            <span class="keyword">if</span>(a.insert(tmp)) &#123;</span><br><span class="line">                w++;</span><br><span class="line">                aa[++top]=tmp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                b.insert(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=(n-w);</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=top; i++) &#123;</span><br><span class="line">            c=b;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=top; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=j)c.insert(aa[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!c.insert(aa[i])) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans*qpow(<span class="number">2l</span>l,n<span class="number">-1</span>-w)%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="J-Fraction-Comparision"><a href="#J-Fraction-Comparision" class="headerlink" title="J Fraction Comparision"></a>J Fraction Comparision</h3><p>题意：<br>比较两个分数的大小，其中分子范围1e18，分母1e9</p><p>题解:<br>将两分数分别分为整除数与模数，再比较大小即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS=<span class="number">1e-9</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">panduan</span><span class="params">(<span class="keyword">long</span> <span class="keyword">double</span> x,<span class="keyword">long</span> <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x-y)&lt;EPS)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,y,a,b;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;x,&amp;a,&amp;y,&amp;b)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x/a&gt;y/b) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x/a&lt;y/b) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"&lt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x%=a;</span><br><span class="line">            y%=b;</span><br><span class="line">            <span class="keyword">if</span>(x*b&gt;y*a)<span class="built_in">puts</span>(<span class="string">"&gt;"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x*b&lt;y*a)<span class="built_in">puts</span>(<span class="string">"&lt;"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      2019牛客多校第一场题解
    
    </summary>
    
    
      <category term="题解报告" scheme="https://blog.hzycjy.top/categories/%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="algorithm" scheme="https://blog.hzycjy.top/tags/algorithm/"/>
    
      <category term="2019-Multi-University-Training-Contest" scheme="https://blog.hzycjy.top/tags/2019-Multi-University-Training-Contest/"/>
    
  </entry>
  
  <entry>
    <title>2019-Multi-University-Training-Contest-1</title>
    <link href="https://blog.hzycjy.top/posts/2019hdumutc1/"/>
    <id>https://blog.hzycjy.top/posts/2019hdumutc1/</id>
    <published>2019-07-28T09:19:45.000Z</published>
    <updated>2019-09-07T18:49:03.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="E-Path"><a href="#E-Path" class="headerlink" title="E.Path"></a>E.Path</h3><p>题意：给你n个点和m条边，让你断开若干条边，使得从1到n的最短路长度变大或者不连通，求最小花费的花费为多少。断开一条边花费为对应边的长度(边权)。</p><p>题解：跑最短路算法，求出能够构成最短路的边，根据这些边建一个新图，跑最小鸽。</p><p>我写这个的时候人都傻了，找最短路的边的bfs写歪了，然后就超时了QAQ。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">namespace</span> dijk &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">    <span class="keyword">typedef</span> pair&lt;ll,<span class="keyword">int</span>&gt; PLI;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line">    <span class="keyword">int</span> Head[N],nxt[N],ver[N];</span><br><span class="line">    ll c[N],d[N];</span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tot=<span class="number">1</span>;</span><br><span class="line">        fill(Head,Head+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span> </span>&#123;</span><br><span class="line">        ver[tot]=v;</span><br><span class="line">        c[tot]=w;</span><br><span class="line">        nxt[tot]=Head[u];</span><br><span class="line">        Head[u]=tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fill(d+<span class="number">1</span>,d+n+<span class="number">1</span>,<span class="number">0x3f3f3f3f3f3f3f3f</span>);</span><br><span class="line">        fill(vis,vis+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;PLI,<span class="built_in">vector</span>&lt;PLI&gt;,greater&lt;PLI&gt;&gt;q;</span><br><span class="line">        q.push(make_pair(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">            PLI tmp = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">int</span> u = tmp.second;</span><br><span class="line">            <span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">            vis[u]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[u]; i; i=nxt[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = ver[i];</span><br><span class="line">                <span class="keyword">if</span>(d[v]&gt;d[u]+c[i]) &#123;</span><br><span class="line">                    d[v]=tmp.first+c[i];</span><br><span class="line">                    q.push(make_pair(d[v],v));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISAP</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">int</span> tot,n,m,s,t;</span><br><span class="line">    <span class="keyword">int</span> carc[N],gap[N];</span><br><span class="line">    <span class="keyword">int</span> pre[N];</span><br><span class="line">    <span class="keyword">int</span> Head[N],nxt[M],ver[M];</span><br><span class="line">    ll flow[M];</span><br><span class="line">    <span class="keyword">int</span> d[N];</span><br><span class="line">    <span class="keyword">bool</span> visited[N];</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n,<span class="keyword">int</span> _m,<span class="keyword">int</span> _s,<span class="keyword">int</span> <span class="keyword">_t</span>)</span> </span>&#123;</span><br><span class="line">        tot=<span class="number">1</span>;</span><br><span class="line">        n=_n,m=_m,s=_s,t=<span class="keyword">_t</span>;</span><br><span class="line">        fill(Head,Head+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span> </span>&#123;</span><br><span class="line">        ver[++tot]=v;</span><br><span class="line">        flow[tot]=w;</span><br><span class="line">        nxt[tot]=Head[u];</span><br><span class="line">        Head[u]=tot;</span><br><span class="line"></span><br><span class="line">        ver[++tot]=u;</span><br><span class="line">        flow[tot]=<span class="number">0</span>;</span><br><span class="line">        nxt[tot]=Head[v];</span><br><span class="line">        Head[v]=tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fill(visited,visited+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">        visited[t]=<span class="number">1</span>;</span><br><span class="line">        d[t]=<span class="number">0</span>;</span><br><span class="line">        q.push(t);</span><br><span class="line">        <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = Head[u]; i; i=nxt[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = ver[i];</span><br><span class="line">                <span class="keyword">if</span>(i&amp;<span class="number">1</span>&amp;&amp;!visited[v]) &#123;</span><br><span class="line">                    visited[v]=<span class="literal">true</span>;</span><br><span class="line">                    d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> visited[s];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">aug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u=t;</span><br><span class="line">        ll df=INF;</span><br><span class="line">        <span class="keyword">while</span>(u!=s) &#123;</span><br><span class="line">            df=min(df,flow[pre[u]]);</span><br><span class="line">            u=ver[pre[u]^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        u=t;</span><br><span class="line">        <span class="keyword">while</span>(u!=s) &#123;</span><br><span class="line">            flow[pre[u]]-=df;</span><br><span class="line">            flow[pre[u]^<span class="number">1</span>]+=df;</span><br><span class="line">            u=ver[pre[u]^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> df;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">maxflow</span><span class="params">()</span></span>;</span><br><span class="line">&#125; flow;</span><br><span class="line">ll ISAP :: maxflow() &#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    fill(gap,gap+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    copy(Head+<span class="number">1</span>,Head+n+<span class="number">1</span>,carc+<span class="number">1</span>);</span><br><span class="line">    bfs();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)gap[d[i]]++;</span><br><span class="line">    <span class="keyword">int</span> u = s;</span><br><span class="line">    <span class="keyword">while</span>(d[s]&lt;=n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(u==t) &#123;</span><br><span class="line">            ans+=aug();</span><br><span class="line">            u=s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> advanced=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=carc[u]; i; i=nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flow[i]&amp;&amp;d[u]==d[ver[i]]+<span class="number">1</span>) &#123;</span><br><span class="line">                advanced=<span class="literal">true</span>;</span><br><span class="line">                pre[ver[i]]=i;</span><br><span class="line">                carc[u]=i;<span class="comment">//carc</span></span><br><span class="line">                u=ver[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!advanced) &#123;</span><br><span class="line">            <span class="keyword">int</span> mindep=n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[u]; i; i=nxt[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(flow[i]) &#123;</span><br><span class="line">                    mindep=min(mindep,d[ver[i]]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(--gap[d[u]]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            gap[d[u]=mindep+<span class="number">1</span>]++;</span><br><span class="line"></span><br><span class="line">            carc[u]=Head[u];</span><br><span class="line">            <span class="keyword">if</span>(u!=s)u=ver[pre[u]^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        dijk::init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y; i&lt;=m; i++) &#123;</span><br><span class="line">            ll z;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            dijk::add(x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">        dijk::dijk();</span><br><span class="line">        <span class="keyword">if</span>(dijk::d[n]==<span class="number">0x3f3f3f3f3f3f3f3f</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        flow.init(n,<span class="number">10000</span>,<span class="number">1</span>,n);</span><br><span class="line">        &#123;</span><br><span class="line">            fill(vis,vis+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">            q.push(<span class="number">1</span>);</span><br><span class="line">            vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=dijk::Head[u]; i; i=dijk::nxt[i]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = dijk::ver[i];</span><br><span class="line">                    <span class="keyword">if</span>(dijk::d[u]+dijk::c[i]==dijk::d[v]) &#123;</span><br><span class="line">                        flow.addedge(u,v,dijk::c[i]);</span><br><span class="line">                        <span class="keyword">if</span>(!vis[v])q.push(v);</span><br><span class="line">                        vis[v]=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;#<span class="meta"># feature test</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans=flow.maxflow();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans==<span class="number">0</span>?<span class="number">-1</span>:ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      2019杭电多校第一场题解
    
    </summary>
    
    
      <category term="题解报告" scheme="https://blog.hzycjy.top/categories/%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="algorithm" scheme="https://blog.hzycjy.top/tags/algorithm/"/>
    
      <category term="2019-Multi-University-Training-Contest" scheme="https://blog.hzycjy.top/tags/2019-Multi-University-Training-Contest/"/>
    
  </entry>
  
  <entry>
    <title>Beatty&#39;s theory</title>
    <link href="https://blog.hzycjy.top/posts/Beatty/"/>
    <id>https://blog.hzycjy.top/posts/Beatty/</id>
    <published>2019-07-15T14:44:37.000Z</published>
    <updated>2019-09-07T18:49:38.396Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>当正无理数$x$、$y$满足下列式子时<br>$$<br>\frac{1}{x}+\frac{1}{y}=1<br>$$<br>会有$P={\lfloor{nx}\rfloor|n \in N^+}$,$Q={\lfloor{ny}\rfloor|n \in N^+}$,使得集合P和集合Q正好是$Z^+$的一个划分,即$P\cup Q=Z^+$、$P\cap Q=\emptyset$.</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><h4 id="1-一个正整数在集合P或集合Q中至多出现一次"><a href="#1-一个正整数在集合P或集合Q中至多出现一次" class="headerlink" title="1.一个正整数在集合P或集合Q中至多出现一次"></a>1.一个正整数在集合P或集合Q中至多出现一次</h4><p>因为$x&gt;1$、$y&gt;1$，所以$\lfloor{nx}\rfloor$不会存在相同的正整数，$\lfloor{ny}\rfloor$亦然。</p><h4 id="2-P-cap-Q-emptyset"><a href="#2-P-cap-Q-emptyset" class="headerlink" title="2.$P\cap Q=\emptyset$"></a>2.$P\cap Q=\emptyset$</h4><p>反证法来一手，假设有正整数n、m、k使得$\lfloor{nx}\rfloor=\lfloor{my}\rfloor=k$，即<br>$$<br>k&lt;nx&lt;k+1<br>$$</p><p>$$<br>k&lt;my&lt;k+1<br>$$</p><p>转化一下<br>$$<br>\frac{n}{k+1}&lt;\frac{1}{x}&lt;\frac{n}{k}<br>$$</p><p>$$<br>\frac{m}{k+1}&lt;\frac{1}{y}&lt;\frac{m}{k}<br>$$</p><p>两式相加<br>$$<br>\frac{n+m}{k+1}&lt;\frac{1}{x}+\frac{1}{y}=1&lt;\frac{n+m}{k}<br>$$<br>再转化一下<br>$$<br>k&lt;n+m&lt;k+1<br>$$<br>因为n、m是正整数，所以不符合，所以$P\cap Q=\emptyset$</p><h4 id="3-P-cup-Q-Z"><a href="#3-P-cup-Q-Z" class="headerlink" title="3.$P\cup Q=Z^+$"></a>3.$P\cup Q=Z^+$</h4><p>继续反证法，假设有正整数n、m、k使得$\lfloor{nx}\rfloor&lt;k&lt;\lfloor{(n+1)x}\rfloor$、$\lfloor{my}\rfloor&lt;k&lt;\lfloor{(m+1)y}\rfloor$</p><p>再进一步说<br>$$<br>\lfloor{nx}\rfloor&lt;nx&lt;k\le\lfloor{(n+1)x}\rfloor-1&lt;(n+1)x-1&lt;\lfloor{(n+1)x}\rfloor<br>$$<br>类似<br>$$<br>\lfloor{my}\rfloor&lt;my&lt;k\le\lfloor{(m+1)y}\rfloor-1&lt;(m+1)y-1&lt;\lfloor{(m+1)y}\rfloor<br>$$<br>取出下列不等式构成不等式组<br>$$<br>nx&lt;k&lt;(n+1)x-1<br>$$</p><p>$$<br>my&lt;k&lt;(m+1)y-1<br>$$</p><p>转换一下<br>$$<br>\frac{n}{k}&lt;\frac{1}{x}&lt;\frac{n+1}{k+1}<br>$$</p><p>$$<br>\frac{m}{k}&lt;\frac{1}{y}&lt;\frac{m+1}{k+1}<br>$$</p><p>两式相加<br>$$<br>\frac{n+m}{k}&lt;\frac{1}{x}+\frac{1}{y}=1&lt;\frac{n+m+2}{k+1}<br>$$<br>转换一下<br>$$<br>n+m&lt;k&lt;k+1&lt;n+m+2<br>$$<br>因为n、m是正整数，所以不符合，所以$P\cup Q=Z^+$</p>]]></content>
    
    <summary type="html">
    
      贝蒂定理学习笔记
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://blog.hzycjy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="math" scheme="https://blog.hzycjy.top/tags/math/"/>
    
  </entry>
  
</feed>
