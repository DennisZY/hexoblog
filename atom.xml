<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dennis&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://denniszy.github.io/"/>
  <updated>2019-07-28T10:02:04.531Z</updated>
  <id>https://denniszy.github.io/</id>
  
  <author>
    <name>Dennis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019-Nowcoder-Multi-University-Training-Camp-1</title>
    <link href="https://denniszy.github.io/2019/07/28/2019nowcoder1/"/>
    <id>https://denniszy.github.io/2019/07/28/2019nowcoder1/</id>
    <published>2019-07-28T09:44:16.000Z</published>
    <updated>2019-07-28T10:02:04.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="A-Equivalent-Prefixes"><a href="#A-Equivalent-Prefixes" class="headerlink" title="A Equivalent Prefixes"></a>A Equivalent Prefixes</h3><p>题意：给你ab两个数组，让你找出[1,p]区间使得他们任一区间的最小值的位置是一样的，求最大的p。</p><p>题解：二分答案，分别建立笛卡尔树，树形一样则正确。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2
        
      
    
    </summary>
    
      <category term="题解报告" scheme="https://denniszy.github.io/categories/%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="algorithm" scheme="https://denniszy.github.io/tags/algorithm/"/>
    
      <category term="2019-Multi-University-Training-Contest" scheme="https://denniszy.github.io/tags/2019-Multi-University-Training-Contest/"/>
    
  </entry>
  
  <entry>
    <title>2019-Multi-University-Training-Contest-1</title>
    <link href="https://denniszy.github.io/2019/07/28/2019hdumutc1/"/>
    <id>https://denniszy.github.io/2019/07/28/2019hdumutc1/</id>
    <published>2019-07-28T09:19:45.000Z</published>
    <updated>2019-07-28T09:41:48.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="E-Path"><a href="#E-Path" class="headerlink" title="E.Path"></a>E.Path</h3><p>题意：给你n个点和m条边，让你断开若干条边，使得从1到n的最短路长度变大或者不连通，求最小花费的花费为多少。断开一条边花费为对应边的长度(边权)。</p><p>题解：跑最短路算法，求出能够构成最短路的边，根据这些边建一个新图，跑最小鸽。</p><p>我写这个的时候人都傻了，找最短路的边的bfs写歪了，然后就超时了QAQ。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">namespace</span> dijk &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">    <span class="keyword">typedef</span> pair&lt;ll,<span class="keyword">int</span>&gt; PLI;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line">    <span class="keyword">int</span> Head[N],nxt[N],ver[N];</span><br><span class="line">    ll c[N],d[N];</span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tot=<span class="number">1</span>;</span><br><span class="line">        fill(Head,Head+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span> </span>&#123;</span><br><span class="line">        ver[tot]=v;</span><br><span class="line">        c[tot]=w;</span><br><span class="line">        nxt[tot]=Head[u];</span><br><span class="line">        Head[u]=tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fill(d+<span class="number">1</span>,d+n+<span class="number">1</span>,<span class="number">0x3f3f3f3f3f3f3f3f</span>);</span><br><span class="line">        fill(vis,vis+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;PLI,<span class="built_in">vector</span>&lt;PLI&gt;,greater&lt;PLI&gt;&gt;q;</span><br><span class="line">        q.push(make_pair(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">            PLI tmp = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">int</span> u = tmp.second;</span><br><span class="line">            <span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">            vis[u]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[u]; i; i=nxt[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = ver[i];</span><br><span class="line">                <span class="keyword">if</span>(d[v]&gt;d[u]+c[i]) &#123;</span><br><span class="line">                    d[v]=tmp.first+c[i];</span><br><span class="line">                    q.push(make_pair(d[v],v));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISAP</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">int</span> tot,n,m,s,t;</span><br><span class="line">    <span class="keyword">int</span> carc[N],gap[N];</span><br><span class="line">    <span class="keyword">int</span> pre[N];</span><br><span class="line">    <span class="keyword">int</span> Head[N],nxt[M],ver[M];</span><br><span class="line">    ll flow[M];</span><br><span class="line">    <span class="keyword">int</span> d[N];</span><br><span class="line">    <span class="keyword">bool</span> visited[N];</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n,<span class="keyword">int</span> _m,<span class="keyword">int</span> _s,<span class="keyword">int</span> <span class="keyword">_t</span>)</span> </span>&#123;</span><br><span class="line">        tot=<span class="number">1</span>;</span><br><span class="line">        n=_n,m=_m,s=_s,t=<span class="keyword">_t</span>;</span><br><span class="line">        fill(Head,Head+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span> </span>&#123;</span><br><span class="line">        ver[++tot]=v;</span><br><span class="line">        flow[tot]=w;</span><br><span class="line">        nxt[tot]=Head[u];</span><br><span class="line">        Head[u]=tot;</span><br><span class="line"></span><br><span class="line">        ver[++tot]=u;</span><br><span class="line">        flow[tot]=<span class="number">0</span>;</span><br><span class="line">        nxt[tot]=Head[v];</span><br><span class="line">        Head[v]=tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fill(visited,visited+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">        visited[t]=<span class="number">1</span>;</span><br><span class="line">        d[t]=<span class="number">0</span>;</span><br><span class="line">        q.push(t);</span><br><span class="line">        <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = Head[u]; i; i=nxt[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = ver[i];</span><br><span class="line">                <span class="keyword">if</span>(i&amp;<span class="number">1</span>&amp;&amp;!visited[v]) &#123;</span><br><span class="line">                    visited[v]=<span class="literal">true</span>;</span><br><span class="line">                    d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> visited[s];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">aug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u=t;</span><br><span class="line">        ll df=INF;</span><br><span class="line">        <span class="keyword">while</span>(u!=s) &#123;</span><br><span class="line">            df=min(df,flow[pre[u]]);</span><br><span class="line">            u=ver[pre[u]^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        u=t;</span><br><span class="line">        <span class="keyword">while</span>(u!=s) &#123;</span><br><span class="line">            flow[pre[u]]-=df;</span><br><span class="line">            flow[pre[u]^<span class="number">1</span>]+=df;</span><br><span class="line">            u=ver[pre[u]^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> df;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">maxflow</span><span class="params">()</span></span>;</span><br><span class="line">&#125; flow;</span><br><span class="line">ll ISAP :: maxflow() &#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    fill(gap,gap+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    copy(Head+<span class="number">1</span>,Head+n+<span class="number">1</span>,carc+<span class="number">1</span>);</span><br><span class="line">    bfs();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)gap[d[i]]++;</span><br><span class="line">    <span class="keyword">int</span> u = s;</span><br><span class="line">    <span class="keyword">while</span>(d[s]&lt;=n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(u==t) &#123;</span><br><span class="line">            ans+=aug();</span><br><span class="line">            u=s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> advanced=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=carc[u]; i; i=nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flow[i]&amp;&amp;d[u]==d[ver[i]]+<span class="number">1</span>) &#123;</span><br><span class="line">                advanced=<span class="literal">true</span>;</span><br><span class="line">                pre[ver[i]]=i;</span><br><span class="line">                carc[u]=i;<span class="comment">//carc</span></span><br><span class="line">                u=ver[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!advanced) &#123;</span><br><span class="line">            <span class="keyword">int</span> mindep=n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[u]; i; i=nxt[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(flow[i]) &#123;</span><br><span class="line">                    mindep=min(mindep,d[ver[i]]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(--gap[d[u]]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            gap[d[u]=mindep+<span class="number">1</span>]++;</span><br><span class="line"></span><br><span class="line">            carc[u]=Head[u];</span><br><span class="line">            <span class="keyword">if</span>(u!=s)u=ver[pre[u]^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        dijk::init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y; i&lt;=m; i++) &#123;</span><br><span class="line">            ll z;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            dijk::add(x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">        dijk::dijk();</span><br><span class="line">        <span class="keyword">if</span>(dijk::d[n]==<span class="number">0x3f3f3f3f3f3f3f3f</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        flow.init(n,<span class="number">10000</span>,<span class="number">1</span>,n);</span><br><span class="line">        &#123;</span><br><span class="line">            fill(vis,vis+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">            q.push(<span class="number">1</span>);</span><br><span class="line">            vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=dijk::Head[u]; i; i=dijk::nxt[i]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = dijk::ver[i];</span><br><span class="line">                    <span class="keyword">if</span>(dijk::d[u]+dijk::c[i]==dijk::d[v]) &#123;</span><br><span class="line">                        flow.addedge(u,v,dijk::c[i]);</span><br><span class="line">                        <span class="keyword">if</span>(!vis[v])q.push(v);</span><br><span class="line">                        vis[v]=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;#<span class="meta"># feature test</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans=flow.maxflow();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans==<span class="number">0</span>?<span class="number">-1</span>:ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2
        
      
    
    </summary>
    
      <category term="题解报告" scheme="https://denniszy.github.io/categories/%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="algorithm" scheme="https://denniszy.github.io/tags/algorithm/"/>
    
      <category term="2019-Multi-University-Training-Contest" scheme="https://denniszy.github.io/tags/2019-Multi-University-Training-Contest/"/>
    
  </entry>
  
  <entry>
    <title>Beatty&#39;s theory</title>
    <link href="https://denniszy.github.io/2019/07/15/Beatty/"/>
    <id>https://denniszy.github.io/2019/07/15/Beatty/</id>
    <published>2019-07-15T14:44:37.000Z</published>
    <updated>2019-07-16T11:31:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>当正无理数$x$、$y$满足下列式子时</p><script type="math/tex; mode=display">\frac{1}{x}+\frac{1}{y}=1</script><p>会有$P=\{\lfloor{nx}\rfloor|n \in N^+\}$,$Q=\{\lfloor{ny}\rfloor|n \in N^+\}$,使得集合P和集合Q正好是$Z^+$的一个划分,即$P\cup Q=Z^+$、$P\cap Q=\emptyset$.</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><h4 id="1-一个正整数在集合P或集合Q中至多出现一次"><a href="#1-一个正整数在集合P或集合Q中至多出现一次" class="headerlink" title="1.一个正整数在集合P或集合Q中至多出现一次"></a>1.一个正整数在集合P或集合Q中至多出现一次</h4><p>因为$x&gt;1$、$y&gt;1$，所以$\lfloor{nx}\rfloor$不会存在相同的正整数，$\lfloor{ny}\rfloor$亦然。</p><h4 id="2-P-cap-Q-emptyset"><a href="#2-P-cap-Q-emptyset" class="headerlink" title="2.$P\cap Q=\emptyset$"></a>2.$P\cap Q=\emptyset$</h4><p>反证法来一手，假设有正整数n、m、k使得$\lfloor{nx}\rfloor=\lfloor{my}\rfloor=k$，即</p><script type="math/tex; mode=display">k<nx<k+1</script><script type="math/tex; mode=display">k<my<k+1</script><p>转化一下</p><script type="math/tex; mode=display">\frac{n}{k+1}<\frac{1}{x}<\frac{n}{k}</script><script type="math/tex; mode=display">\frac{m}{k+1}<\frac{1}{y}<\frac{m}{k}</script><p>两式相加</p><script type="math/tex; mode=display">\frac{n+m}{k+1}<\frac{1}{x}+\frac{1}{y}=1<\frac{n+m}{k}</script><p>再转化一下</p><script type="math/tex; mode=display">k<n+m<k+1</script><p>因为n、m是正整数，所以不符合，所以$P\cap Q=\emptyset$</p><h4 id="3-P-cup-Q-Z"><a href="#3-P-cup-Q-Z" class="headerlink" title="3.$P\cup Q=Z^+$"></a>3.$P\cup Q=Z^+$</h4><p>继续反证法，假设有正整数n、m、k使得$\lfloor{nx}\rfloor&lt;k&lt;\lfloor{(n+1)x}\rfloor$、$\lfloor{my}\rfloor&lt;k&lt;\lfloor{(m+1)y}\rfloor$</p><p>再进一步说</p><script type="math/tex; mode=display">\lfloor{nx}\rfloor<nx<k\le\lfloor{(n+1)x}\rfloor-1<(n+1)x-1<\lfloor{(n+1)x}\rfloor</script><p>类似</p><script type="math/tex; mode=display">\lfloor{my}\rfloor<my<k\le\lfloor{(m+1)y}\rfloor-1<(m+1)y-1<\lfloor{(m+1)y}\rfloor</script><p>取出下列不等式构成不等式组</p><script type="math/tex; mode=display">nx<k<(n+1)x-1</script><script type="math/tex; mode=display">my<k<(m+1)y-1</script><p>转换一下</p><script type="math/tex; mode=display">\frac{n}{k}<\frac{1}{x}<\frac{n+1}{k+1}</script><script type="math/tex; mode=display">\frac{m}{k}<\frac{1}{y}<\frac{m+1}{k+1}</script><p>两式相加</p><script type="math/tex; mode=display">\frac{n+m}{k}<\frac{1}{x}+\frac{1}{y}=1<\frac{n+m+2}{k+1}</script><p>转换一下</p><script type="math/tex; mode=display">n+m<k<k+1<n+m+2</script><p>因为n、m是正整数，所以不符合，所以$P\cup Q=Z^+$</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;定理&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://denniszy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="math" scheme="https://denniszy.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>manjaro下使用tenda-U12</title>
    <link href="https://denniszy.github.io/2019/07/13/manjaro2/"/>
    <id>https://denniszy.github.io/2019/07/13/manjaro2/</id>
    <published>2019-07-13T09:07:25.000Z</published>
    <updated>2019-07-13T09:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h3><p>在manjaro上搜索<a href="https://www.realtek.com/en/products/communications-network-ics/item/rtl8812au" target="_blank" rel="noopener">rtl8812au</a>的驱动装一下，我装的名字是rtl8812au-dkms-git(在archlinuxcn的仓库下，可以自己添加一下仓库)，然后把网卡插进去就能识别使用了。</p><h3 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h3><p>官网有这个网卡的windows/linux/macos的驱动包，然而这个包根本不能编译成功，我的内核也在他要求的范围之内，要求是2.6.18至4.4，我的是……4……….19打扰了，然后自己上网找找教程，上github找找对应的驱动clone下来编译安装？找了一个编译一下，编译失败，忽然想到去aur上看看有没有，用yay搜了一下，发现archlinuxcn库里面有，就装了，就完事了。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;一句话&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="折腾笔记" scheme="https://denniszy.github.io/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://denniszy.github.io/tags/linux/"/>
    
      <category term="manjaro" scheme="https://denniszy.github.io/tags/manjaro/"/>
    
  </entry>
  
  <entry>
    <title>Learning C++</title>
    <link href="https://denniszy.github.io/2019/05/29/cplusplus/"/>
    <id>https://denniszy.github.io/2019/05/29/cplusplus/</id>
    <published>2019-05-29T06:37:09.000Z</published>
    <updated>2019-05-29T07:25:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-primer-第5版-读书笔记"><a href="#C-primer-第5版-读书笔记" class="headerlink" title="C++primer(第5版)读书笔记"></a>C++primer(第5版)读书笔记</h1><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>对于指针来说才会有顶层const和底层const之分</p><h3 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h3><p>顶层const指的是指针是常量，就是指针里存的地址是不可改变的。</p><h3 id="底层const"><a href="#底层const" class="headerlink" title="底层const"></a>底层const</h3><p>底层const指的是指针所指的变量是常量，不能修改所指的常量。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var1 = <span class="number">1</span>；</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> var2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> *p1 = var1;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p2 = var2;<span class="comment">//这个指针也可以指向var1的，但是不能通过这个指针区修改所指的变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p3 <span class="keyword">const</span> = var2;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*p2和p3的区别：</span></span><br><span class="line"><span class="comment">*p2能够重新指向别的变量，也就是能够改变指针的值</span></span><br><span class="line"><span class="comment">*p3不能都重新指向别的变量，需要在声明的时候就必须初始化，也就是不能改变指针的值</span></span><br><span class="line"><span class="comment">*也就是顶层const是对于指针的修饰</span></span><br><span class="line"><span class="comment">*底层const是对指针权力的一个限制，就是不允许有底层const的指针修改所指变量的值。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="constexpr-C-11"><a href="#constexpr-C-11" class="headerlink" title="constexpr(C++11)"></a>constexpr(C++11)</h3><p>常量表达式是用编译的时候就能知道对应表达式的值的表达式，constexpr对变量的一个修饰，要求他是一个常量，而且只能通过常量来初始化它，当然这个也可以用来修饰指针，但对于指针来说，只有是在函数体外的变量(全局变量,在堆空间里的变量)才能用constexpr来修饰，如果是在函数体内的变量(局部变量,在栈空间里的变量)只有申请之后才会知道准确的地址，也就是每次运行的时候的地址都是不确定的，这就违反了cosntexpr一定要通过常量表达式来初始化的这个规定。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://denniszy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C++" scheme="https://denniszy.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>SAM</title>
    <link href="https://denniszy.github.io/2019/05/07/SAM/"/>
    <id>https://denniszy.github.io/2019/05/07/SAM/</id>
    <published>2019-05-07T09:15:20.000Z</published>
    <updated>2019-05-11T17:04:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Suffix-automaton"><a href="#Suffix-automaton" class="headerlink" title="Suffix automaton"></a>Suffix automaton</h1><p>后缀自动机，由一个parent树和一个DAG构成。DAG的边连接着状态转移的两点，点就是状态。</p><p>每个节点就是一个endpos等价类，每条parent树的边代表的是endpos等价类包含的关系。DAG就是状态转移的过程。</p><p>解析一下代码，个人感觉讲得不太好，可以移步看一下<a href="https://www.luogu.org/blog/Kesdiael3/hou-zhui-zi-dong-ji-yang-xie" target="_blank" rel="noopener">史上最通俗的后缀自动机详解</a>和<a href="https://oi-wiki.org/string/sam/" target="_blank" rel="noopener">oi-wiki上的SAM</a>，了解一下endpos类等等的定义。</p><p><a href="https://www.luogu.org/problemnew/show/P3804" target="_blank" rel="noopener">luogu3804</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unordered_set&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> c[N],dfn[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span>&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> CHAR_SET_SIZE=<span class="number">26</span>;</span><br><span class="line">    <span class="comment">//这里的&lt;&lt;1，是因为后缀自动机的状态的个数是线性的，必定小于2*n，我就不证了(我不会证)。</span></span><br><span class="line">    <span class="comment">//ch是每个节点转移的下一个状态，fa是parent树的父节点，len是当前状态的串的长度。siz是每个节点的对应的串出现的次数</span></span><br><span class="line">    <span class="keyword">int</span> ch[N&lt;&lt;<span class="number">1</span>][CHAR_SET_SIZE],fa[N&lt;&lt;<span class="number">1</span>],len[N&lt;&lt;<span class="number">1</span>],siz[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> tot,last;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ++tot;</span><br><span class="line">        <span class="built_in">memset</span>(ch[tot],<span class="number">0</span>,<span class="keyword">sizeof</span> ch[tot]);</span><br><span class="line">        fa[tot]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化，把最开始的空状态给搞出来</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        tot=<span class="number">1</span>;</span><br><span class="line">        last=<span class="number">1</span>;<span class="comment">//记录上次的节点，下次在这后面增量构造SAM</span></span><br><span class="line">        len[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ch[<span class="number">1</span>],<span class="number">0</span>,<span class="keyword">sizeof</span> ch[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">memset</span>(siz,<span class="number">0</span>,<span class="keyword">sizeof</span> siz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = last,newpos=newnode();</span><br><span class="line">        last = newpos;</span><br><span class="line">        siz[newpos]=<span class="number">1</span>;<span class="comment">//后面需要这个来计算每个节点的串出现的次数</span></span><br><span class="line">        len[newpos]=len[pos]+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//更新父节点的等价类，让没有转移到当前字符的节点转移到当前字符，</span></span><br><span class="line">        <span class="keyword">while</span>(pos&amp;&amp;!ch[pos][x])&#123;ch[pos][x]=newpos;pos=fa[pos];&#125;</span><br><span class="line">     <span class="comment">//如果！pos就是根本没出现过这个字符，那么这个等价类的就是新的，连到根节点。</span></span><br><span class="line">        <span class="keyword">if</span>(!pos)fa[newpos]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果有父节点连接到x这个状态，我们对此进行判断</span></span><br><span class="line">            <span class="keyword">int</span> oldpos=ch[pos][x];</span><br><span class="line">            <span class="comment">//如果这个父节点的儿子的长度跟父节点的长度相差1，那么我们新的这个等价类的父节点就是这个父节点的儿子了，因为我们必定比父节点的儿子要更长，肯定是再被划分出来的。</span></span><br><span class="line">            <span class="keyword">if</span>(len[oldpos]==len[pos]+<span class="number">1</span>)fa[newpos]=oldpos;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//否则，我们就创建一个新的状态的长度是父节点的长度+1的。让祖先们的x转移为原父亲x转移的都改为对新状态的转移，让原父亲x转移的状态改为对新状态的转移。</span></span><br><span class="line">                <span class="keyword">int</span> anp=newnode();</span><br><span class="line">                <span class="built_in">memcpy</span>(ch[anp],ch[oldpos],<span class="keyword">sizeof</span> ch[anp]);</span><br><span class="line">                fa[anp]=fa[oldpos];</span><br><span class="line">                len[anp]=len[pos]+<span class="number">1</span>;</span><br><span class="line">                fa[oldpos]=fa[newpos]=anp;</span><br><span class="line">                <span class="keyword">while</span>(pos&amp;&amp;ch[pos][x]==oldpos)&#123;</span><br><span class="line">                    ch[pos][x]=anp;</span><br><span class="line">                    pos=fa[pos];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//暴力更新每个节点的字符串出现的次数，然后对出现次数&gt;1的更新答案。</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)c[len[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)dfn[c[len[i]]--]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=tot;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">int</span> now = dfn[i];</span><br><span class="line">            siz[fa[now]]+=siz[now];</span><br><span class="line">            <span class="keyword">if</span>(siz[now]&gt;<span class="number">1</span>)ans=max(ans,<span class="number">1l</span>l*len[now]*siz[now]);</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>))&#123;</span><br><span class="line">        freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        freopen(<span class="string">"out.txt"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sam.init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)sam.add(s[i]-<span class="string">'a'</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sam.solve());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://denniszy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="data structure" scheme="https://denniszy.github.io/tags/data-structure/"/>
    
      <category term="SAM" scheme="https://denniszy.github.io/tags/SAM/"/>
    
  </entry>
  
  <entry>
    <title>splay</title>
    <link href="https://denniszy.github.io/2019/04/23/ds1/"/>
    <id>https://denniszy.github.io/2019/04/23/ds1/</id>
    <published>2019-04-23T04:23:34.000Z</published>
    <updated>2019-07-26T02:43:45.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="来感受Splay的魅力8"><a href="#来感受Splay的魅力8" class="headerlink" title="来感受Splay的魅力8"></a>来感受Splay的魅力8</h2><p>话说这个树也是<a href="https://en.wikipedia.org/wiki/Robert_Tarjan" target="_blank" rel="noopener">Tarjan</a>巨巨和其他巨巨发明的，凸轮已经在Tarjan巨巨的支配中了，然而其他领域也在他的支配中。</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>可以说它也是棵自平衡的二叉查找树，但是不是十分平衡，存在有O(n)的操作情况，但均摊的操作效率被巨巨们证明为O(logn)的。Splay是通过伸展操作调整自身的，使自己变得比较平衡。而Splay规定每访问节点，就把它伸展(Splay)到根节点(方便查找?)。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li><p>插入</p></li><li><p>删除</p></li><li><p>查找</p></li><li><p>区间翻转</p></li><li><p>(未完待续)</p></li></ul><h3 id="需要维护的东西"><a href="#需要维护的东西" class="headerlink" title="需要维护的东西"></a>需要维护的东西</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">ch</span>[2]，<span class="title">fa</span>;</span><span class="comment">//左孩子、右孩子、父亲</span></span><br><span class="line">    <span class="keyword">int</span> inv;<span class="comment">//翻转操作的lazy标记</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> size;<span class="comment">//当前树的大小</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当然,这也可以用多个数组维护</span></span><br></pre></td></tr></table></figure><h4 id="旋转操作-小天才用符号画图"><a href="#旋转操作-小天才用符号画图" class="headerlink" title="旋转操作(小天才用符号画图)"></a>旋转操作(小天才用符号画图)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">       a           右旋             b</span></span><br><span class="line"><span class="comment">     /   \         -&gt;             / \</span></span><br><span class="line"><span class="comment">    b     c                      d   a</span></span><br><span class="line"><span class="comment">   / \             &lt;-               / \</span></span><br><span class="line"><span class="comment">  d   e            左旋             e   c</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>看起来，这个旋转操作一点意思都没有嘛，感觉没个卵用，又不能减少树高。</p><p>等等党：等等，单旋看起来莫得什么用，双旋来帮锤。</p><h4 id="双旋操作-小天才用符号画图"><a href="#双旋操作-小天才用符号画图" class="headerlink" title="双旋操作(小天才用符号画图)"></a>双旋操作(小天才用符号画图)</h4><h5 id="一字型"><a href="#一字型" class="headerlink" title="一字型"></a>一字型</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        a           d to a             d</span></span><br><span class="line"><span class="comment">       / \           -&gt;               / \</span></span><br><span class="line"><span class="comment">      b   c                          f   a</span></span><br><span class="line"><span class="comment">     / \             &lt;-                 / \</span></span><br><span class="line"><span class="comment">    d   e          a to d              b   c</span></span><br><span class="line"><span class="comment">   / \                                / \</span></span><br><span class="line"><span class="comment">  f   g                              g   e</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//这样旋是会被卡的,应先旋父亲再旋自己</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*                          优化  旧链 a-b-d-g d-a-b-g</span></span><br><span class="line"><span class="comment">                                 d to a</span></span><br><span class="line"><span class="comment">        a           b to a             b                    d</span></span><br><span class="line"><span class="comment">       / \           -&gt;              /   \                /   \</span></span><br><span class="line"><span class="comment">      b   c                         d     a    d to a    f     b</span></span><br><span class="line"><span class="comment">     / \                           / \   / \      -&gt;          / \</span></span><br><span class="line"><span class="comment">    d   e                         f   g e   c                g   a</span></span><br><span class="line"><span class="comment">   / \                                                          / \</span></span><br><span class="line"><span class="comment">  f   g                                                        e   c</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>(不还是对高度莫得影响么)</p><p>等等党：看下面的操作，很直观的。</p><h5 id="之字型"><a href="#之字型" class="headerlink" title="之字型"></a>之字型</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">         a           e to a               e</span></span><br><span class="line"><span class="comment">       /   \           -&gt;               /   \</span></span><br><span class="line"><span class="comment">      b     c                          b     a</span></span><br><span class="line"><span class="comment">     / \                              / \   / \</span></span><br><span class="line"><span class="comment">    d   e                            d   f g   c</span></span><br><span class="line"><span class="comment">       / \</span></span><br><span class="line"><span class="comment">      f   g</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//左右对称，自行脑补，这个不能双箭头，我也很无奈，但是真的有肉眼能看到的压缩啊</span></span><br></pre></td></tr></table></figure><h4 id="区间操作"><a href="#区间操作" class="headerlink" title="区间操作"></a>区间操作</h4><p>有Splay操作(伸展操作)的支持，区间操作就很简单的啦。</p><p>比如你想翻转一个$[1,a]$的区间，你只要找到比$a$大的一个点，让它旋到根节点，那么根节点的左子树就是[1,a]的区间了。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://denniszy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="data structure" scheme="https://denniszy.github.io/tags/data-structure/"/>
    
      <category term="splay" scheme="https://denniszy.github.io/tags/splay/"/>
    
  </entry>
  
  <entry>
    <title>A_star不详解</title>
    <link href="https://denniszy.github.io/2019/04/23/A-star/"/>
    <id>https://denniszy.github.io/2019/04/23/A-star/</id>
    <published>2019-04-22T17:44:26.000Z</published>
    <updated>2019-04-22T18:06:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul><li>优先队列bfs</li><li>单源最短路算法</li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>当我们选择一条最短的路的时候，我们总是走估计路的距离最短的路，我们中途发现道路堵塞的时候，觉得走其他路可能会更快，而不是走直线。这其实跟A_star算法很像啦(不敢说一样啊)。</p><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><p>A_star需要一个估价函数，估计当前状态到目标的花费，然后每次根据当前花费+估计的花费进行优先队列bfs，保证每次取出的是当前花费+估计的花费最小的，然后去扩展下一个状态，就是每次保证当前花费+估计的花费最小的，而且我们要保证估价出来的花费要小于等于实际花费，不然就会跑错，如果到达终点了，那个花费必然是最小的。</p><h3 id="来道题目吧"><a href="#来道题目吧" class="headerlink" title="来道题目吧"></a>来道题目吧</h3><p><a href="http://poj.org/problem?id=2449" target="_blank" rel="noopener">POJ2449-Remmarguts’ Date</a>求k短路。</p><p>按照A_star算法，第k次访问终点的时候就是K短路的花费啦。估价函数也很容易设计，一个点到终点的估价跑个单源最短路就OK了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> tot,n,m;</span><br><span class="line"><span class="keyword">int</span> Head[<span class="number">1010</span>],nxt[N&lt;&lt;<span class="number">1</span>],ver[N&lt;&lt;<span class="number">1</span>],w[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    ver[tot]=v;</span><br><span class="line">    w[tot]=d;</span><br><span class="line">    nxt[tot]=Head[u];</span><br><span class="line">    Head[u]=tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> v[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;,greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &gt;q;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">    q.push(make_pair(<span class="number">0</span>,s));</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; tmp = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = tmp.second;</span><br><span class="line">        <span class="keyword">if</span>(v[u])<span class="keyword">continue</span>;</span><br><span class="line">        v[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[u],v; i; i=nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">            v=ver[i];</span><br><span class="line">            <span class="keyword">if</span>(d[v]&gt;d[u]+w[i])&#123;</span><br><span class="line">                d[v]=d[u]+w[i];</span><br><span class="line">                q.push(make_pair(d[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s,t,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;s,&amp;t,&amp;k);</span><br><span class="line">    <span class="keyword">if</span>(s==t)k++;</span><br><span class="line">    dijk(t);</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;,greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &gt;q;</span><br><span class="line">    q.push(make_pair(d[s],s));</span><br><span class="line">    <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; tmp = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = tmp.second;</span><br><span class="line">        ++cnt[u];</span><br><span class="line">        <span class="keyword">if</span>(cnt[t]==k) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tmp.first);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[u],v; i; i=nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                v=ver[i];</span><br><span class="line">                <span class="keyword">if</span>(cnt[v]!=k)q.push(make_pair(tmp.first-d[u]+w[i]+d[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(Head,<span class="number">0</span>,<span class="keyword">sizeof</span> Head);</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z; i&lt;=m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        add(x,y,z);</span><br><span class="line">        add(y,x,z);</span><br><span class="line">    &#125;</span><br><span class="line">    kth();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;前置知识&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://denniszy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="algorithm" scheme="https://denniszy.github.io/tags/algorithm/"/>
    
      <category term="ACM" scheme="https://denniszy.github.io/tags/ACM/"/>
    
      <category term="A_star" scheme="https://denniszy.github.io/tags/A-star/"/>
    
  </entry>
  
  <entry>
    <title>[POJ3085]Nightmare Ⅱ 题解报告</title>
    <link href="https://denniszy.github.io/2019/04/23/POJ3085/"/>
    <id>https://denniszy.github.io/2019/04/23/POJ3085/</id>
    <published>2019-04-22T17:32:45.000Z</published>
    <updated>2019-04-22T18:06:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3085" target="_blank" rel="noopener">传送门</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一个女孩，一个男孩和两个幽灵，女孩每秒走一步，男孩每秒走三步，幽灵每秒走两步(无视墙体)，问他们多少秒后会相遇。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然双BFS，想一下什么的bfs能控制步数，幽灵没必要bfs，算一下人与幽灵的哈密顿距离与时间乘2即可。</p><p>控制步数的bfs不会啊，QAQ，那就跑3次每次走一步的BFS。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">806</span>;</span><br><span class="line"><span class="keyword">char</span> s[N][N];</span><br><span class="line"><span class="keyword">bool</span> v1[N][N], v2[N][N];</span><br><span class="line"><span class="keyword">int</span> n, m, bx, by, gx, gy, px, py, qx, qy, s1, s2;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">0</span> || x &gt; n || y &lt;= <span class="number">0</span> || y &gt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(x - px) + <span class="built_in">abs</span>(y - py) &lt;= <span class="number">2</span> * k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(x - qx) + <span class="built_in">abs</span>(y - qy) &lt;= <span class="number">2</span> * k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (s[x][y] == <span class="string">'X'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q1, q2;</span><br><span class="line">px = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="keyword">if</span> (s[i][j] == <span class="string">'M'</span>) &#123;</span><br><span class="line">bx = i;</span><br><span class="line">by = j;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i][j] == <span class="string">'G'</span>) &#123;</span><br><span class="line">gx = i;</span><br><span class="line">gy = j;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i][j] == <span class="string">'Z'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!px) &#123;</span><br><span class="line">px = i;</span><br><span class="line">py = j;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">qx = i;</span><br><span class="line">qy = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(v1, <span class="number">0</span>, <span class="keyword">sizeof</span>(v1));</span><br><span class="line"><span class="built_in">memset</span>(v2, <span class="number">0</span>, <span class="keyword">sizeof</span>(v2));</span><br><span class="line">v1[bx][by] = <span class="number">1</span>;</span><br><span class="line">v2[gx][gy] = <span class="number">1</span>;</span><br><span class="line">q1.push(make_pair(bx, by));</span><br><span class="line">q2.push(make_pair(gx, gy));</span><br><span class="line"><span class="keyword">while</span> (q1.size() || q2.size()) &#123;</span><br><span class="line">ans++;</span><br><span class="line">s1 = q1.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s1; i++) &#123;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; now = q1.front();</span><br><span class="line">q1.pop();</span><br><span class="line"><span class="keyword">if</span> (!pd(now.first,now.second,ans)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = now.first + dx[j];</span><br><span class="line"><span class="keyword">int</span> ny = now.second + dy[j];</span><br><span class="line"><span class="keyword">if</span> (pd(nx,ny,ans) &amp;&amp; !v1[nx][ny]) &#123;</span><br><span class="line">v1[nx][ny] = <span class="number">1</span>;</span><br><span class="line">q1.push(make_pair(nx, ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s1 = q1.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s1; i++) &#123;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; now = q1.front();</span><br><span class="line">q1.pop();</span><br><span class="line"><span class="keyword">if</span> (!pd(now.first,now.second,ans)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = now.first + dx[j];</span><br><span class="line"><span class="keyword">int</span> ny = now.second + dy[j];</span><br><span class="line"><span class="keyword">if</span> (pd(nx,ny,ans) &amp;&amp; !v1[nx][ny]) &#123;</span><br><span class="line">v1[nx][ny] = <span class="number">1</span>;</span><br><span class="line">q1.push(make_pair(nx, ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s1 = q1.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s1; i++) &#123;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; now = q1.front();</span><br><span class="line">q1.pop();</span><br><span class="line"><span class="keyword">if</span> (!pd(now.first,now.second,ans)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = now.first + dx[j];</span><br><span class="line"><span class="keyword">int</span> ny = now.second + dy[j];</span><br><span class="line"><span class="keyword">if</span> (pd(nx,ny,ans) &amp;&amp; !v1[nx][ny]) &#123;</span><br><span class="line">v1[nx][ny] = <span class="number">1</span>;</span><br><span class="line">q1.push(make_pair(nx, ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s2 = q2.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s2; i++) &#123;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; now = q2.front();</span><br><span class="line">q2.pop();</span><br><span class="line"><span class="keyword">if</span> (!pd(now.first,now.second,ans)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = now.first + dx[j];</span><br><span class="line"><span class="keyword">int</span> ny = now.second + dy[j];</span><br><span class="line"><span class="keyword">if</span> (pd(nx,ny,ans) &amp;&amp; !v2[nx][ny]) &#123;</span><br><span class="line"><span class="keyword">if</span> (v1[nx][ny]) <span class="keyword">return</span> ans;</span><br><span class="line">v2[nx][ny] = <span class="number">1</span>;</span><br><span class="line">q2.push(make_pair(nx, ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i] + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bfs() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="题解报告" scheme="https://denniszy.github.io/categories/%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="ACM" scheme="https://denniszy.github.io/tags/ACM/"/>
    
      <category term="BFS" scheme="https://denniszy.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>[POJ3635]Full Tank题解报告</title>
    <link href="https://denniszy.github.io/2019/04/22/POJ3635/"/>
    <id>https://denniszy.github.io/2019/04/22/POJ3635/</id>
    <published>2019-04-22T15:04:05.000Z</published>
    <updated>2019-04-22T18:06:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=3635" target="_blank" rel="noopener">传送门</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你n个点，m条边，每个点的加油站的油的价格不同，每段路要消耗d升油。给你q个询问，你的油箱最大容量为c，从s到t的最少花费。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>优先队列bfs，每个状态有两种转移的方式。</p><ol><li><p>如果当前状态加一升油比这个状态多一升的状态所花费更少，就转移过去，有点绕啊。看看代码8。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(d[u][fuel+<span class="number">1</span>]&gt;d[u][fuel]+p[u])</span><br><span class="line">d[u][fuel+<span class="number">1</span>]=d[u][fuel]+p[u];</span><br></pre></td></tr></table></figure></li><li><p>如果在这个点有能够走的路就路上的另外一个点去转移。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(d[v][fuel-z]&gt;d[u][fuel])</span><br><span class="line">d[v][fuel-z]&gt;d[u][fuel];</span><br></pre></td></tr></table></figure></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">1010</span>][<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> Head[<span class="number">1010</span>],nxt[<span class="number">20020</span>],ver[<span class="number">20020</span>],w[<span class="number">20020</span>];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">1010</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cost,u,fuel;</span><br><span class="line">    node(<span class="keyword">int</span> _cost=<span class="number">0</span>,<span class="keyword">int</span> _u=<span class="number">0</span>,<span class="keyword">int</span> _fuel=<span class="number">0</span>):cost(_cost),u(_u),fuel(_fuel)&#123;&#125;;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;x)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cost&gt;x.cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    ver[tot]=v;</span><br><span class="line">    w[tot]=d;</span><br><span class="line">    nxt[tot]=Head[u];</span><br><span class="line">    Head[u]=tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> v[<span class="number">1010</span>][<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">    q.push(node(<span class="number">0</span>,s,<span class="number">0</span>));</span><br><span class="line">    d[s][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        node tmp = q.top();q.pop();</span><br><span class="line">        <span class="keyword">if</span>(tmp.u==t)<span class="keyword">return</span> tmp.cost;</span><br><span class="line">        <span class="keyword">int</span> city = tmp.u;</span><br><span class="line">        <span class="keyword">int</span> fuel = tmp.fuel;</span><br><span class="line">        <span class="keyword">if</span>(v[city][fuel])<span class="keyword">continue</span>;</span><br><span class="line">        v[city][fuel]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(fuel&lt;c&amp;&amp;d[city][fuel+<span class="number">1</span>]&gt;d[city][fuel]+p[city])&#123;</span><br><span class="line">            d[city][fuel+<span class="number">1</span>]=d[city][fuel]+p[city];</span><br><span class="line">            q.push(node(d[city][fuel+<span class="number">1</span>],city,fuel+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Head[city],v;i;i=nxt[i])&#123;</span><br><span class="line">            v=ver[i];</span><br><span class="line">            <span class="keyword">if</span>(w[i]&lt;=fuel&amp;&amp;d[v][tmp.fuel-w[i]]&gt;d[city][tmp.fuel])&#123;</span><br><span class="line">                d[v][tmp.fuel-w[i]]=d[city][tmp.fuel];</span><br><span class="line">                q.push(node(tmp.cost,v,fuel-w[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">        tot=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,p+i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            add(x,y,z);</span><br><span class="line">            add(y,x,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="keyword">int</span> c,s,t;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;c,&amp;s,&amp;t);</span><br><span class="line">            <span class="keyword">int</span> ans=bfs(c,s,t);</span><br><span class="line">            <span class="keyword">if</span>(ans==<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"impossible"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>在用优先队列bfs的时候，虽然维护了像普通bfs那样的有序，但是还是有点不同的。不要因为它是优先队列就猛地迈大步，还是要像普通bfs一样一步一步地走，不能迈大的步伐。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="题解报告" scheme="https://denniszy.github.io/categories/%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="ACM" scheme="https://denniszy.github.io/tags/ACM/"/>
    
      <category term="BFS" scheme="https://denniszy.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>20190413华工赛 题解报告</title>
    <link href="https://denniszy.github.io/2019/04/19/2019huagong/"/>
    <id>https://denniszy.github.io/2019/04/19/2019huagong/</id>
    <published>2019-04-19T13:28:27.000Z</published>
    <updated>2019-04-22T17:05:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/625#question" target="_blank" rel="noopener">比赛链接</a></p><h2 id="A-NB群友"><a href="#A-NB群友" class="headerlink" title="A.NB群友"></a>A.NB群友</h2><blockquote><p>CC是著名的算法竞赛选手，他不仅人长得帅，而且技术了得，自然而然就有了许多粉丝。</p><p>为了能帮助粉丝们提高竞技水平，CC建立了一个粉丝群，每天CC都会在粉丝群里和群友深入交流黑科技。然而，有些群友老是不努力训练，成天想着复读，比如当CC在群里面发了个整数0，那紧接着就会有群友发整数1，然后又会有群友发整数2……这引起了CC的不满，于是CC决定踢掉一些群友。</p><p>CC的粉丝群人数为无穷大。当CC发出整数0后，其他群友就会跟着轮流发整数1, 2, 3, 4, …，依此类推。需要注意的是，每个群友都会恰好发一次整数，每个群友发的整数两两不同。CC认为，在不考虑前导零的情况下，如果某个群友发的整数在十进制表示下的各位数字不含0及1，那么这个群友就是NB的，否则就是不NB的。例如，群友A发的整数是3482，该数的各位数字分别为3、4、8、2，其中不含0、1，因此群友A是NB的；另一方面，群友B发的整数402，而该数的十位数字是0，因此群友B是不NB的。</p><p>现在CC决定，踢掉所有不NB的群友。于是经过一番奥妙重重的踢人操作后，粉丝群里只剩下NB群友。然而，CC觉得剩下的这些NB群友还是too naive，因此他打算邀请一些NB群友参加线下训练营（来现场教做人）。具体来说，CC会给出两个正整数L,R，然后他会邀请发出的整数的各位数字之积在区间[L,R]内的NB群友。</p><p>举例来说，假如CC给出的区间为L = 50, R = 300，那么发了567的群友会被邀请线下参赛，因为5×6×7=210；同理，发了255的群友也会被邀请，因为2×5×5=50。但是，发了328的群友则不会收到邀请，因为3×2×8=48∉[50,300]。</p></blockquote><h3 id="题意简化-读题读死人"><a href="#题意简化-读题读死人" class="headerlink" title="题意简化(读题读死人)"></a>题意简化(读题读死人)</h3><p>在[L,R]的这个范围里面找有多少个数是只通过[2,9]这些因子组成的。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>爆搜就好，枚举每个因子的数量就行</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> lim = <span class="number">1l</span>l&lt;&lt;<span class="number">32</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l,r;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> fac[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> fac_1[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> res,<span class="keyword">int</span> pre,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res&gt;r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pre==<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res&gt;=l&amp;&amp;res!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> ttt=fac[len];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">                ttt=ttt*fac_1[num[i]]%mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ttt;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> kk=<span class="number">1</span>;</span><br><span class="line">    num[pre]=<span class="number">0</span>;</span><br><span class="line">    ans+=dfs(res,pre+<span class="number">1</span>,len);</span><br><span class="line">    <span class="keyword">if</span>(ans&gt;=mod)ans-=mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">32</span>;i++)&#123;</span><br><span class="line">        kk*=pre;</span><br><span class="line">        <span class="keyword">if</span>(res*kk&lt;=r)&#123;</span><br><span class="line">            num[pre]=i;</span><br><span class="line">            ans+=dfs(res*kk,pre+<span class="number">1</span>,len+i);</span><br><span class="line">            <span class="keyword">if</span>(ans&gt;=mod)ans-=mod;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    fac[<span class="number">1</span>]=fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    fac_1[<span class="number">0</span>]=fac_1[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">40</span>;i++)&#123;</span><br><span class="line">        fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        fac_1[i]=(mod-(mod/i))*fac_1[mod%i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">40</span>;i++)&#123;</span><br><span class="line">        fac_1[i]=fac_1[i<span class="number">-1</span>]*fac_1[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dfs(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-翻牌游戏"><a href="#F-翻牌游戏" class="headerlink" title="F.翻牌游戏"></a>F.翻牌游戏</h2><blockquote><p><a href="https://ac.nowcoder.com/acm/contest/625/F" target="_blank" rel="noopener">题目链接</a></p></blockquote><h3 id="题意简化"><a href="#题意简化" class="headerlink" title="题意简化"></a>题意简化</h3><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>概率dp</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,(n&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>);<span class="built_in">puts</span>(<span class="string">".00"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Parco-Love-GCD"><a href="#H-Parco-Love-GCD" class="headerlink" title="H.Parco_Love_GCD"></a>H.Parco_Love_GCD</h2><blockquote><p><a href="https://ac.nowcoder.com/acm/contest/625/H" target="_blank" rel="noopener">题目链接</a></p></blockquote><h3 id="题意简化-1"><a href="#题意简化-1" class="headerlink" title="题意简化"></a>题意简化</h3><p>给你一段数字，把所有的区间的GCD的和求出来。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>数据出水了？$O(n^2)$的代码过了。</p><p>正解是$O(nlogn)$，做个GCD的ST表，枚举左端点，二分找gcd连续的一段来贡献答案。(嘴炮打码)</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500010</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> D;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,a+i);</span><br><span class="line">    D=a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)D=__gcd(D,a[i]);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> tmp=a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)&#123;</span><br><span class="line">            tmp=__gcd(tmp,a[j]);</span><br><span class="line">            ans+=tmp;</span><br><span class="line">            <span class="keyword">if</span>(ans&gt;=mod)ans-=mod;</span><br><span class="line">            <span class="keyword">if</span>(tmp==D)&#123;</span><br><span class="line">                (ans+=(n-j)*D)%=mod;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>技能前摇过长警告</del></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="题解报告" scheme="https://denniszy.github.io/categories/%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="algorithm" scheme="https://denniszy.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CRT/exCRT</title>
    <link href="https://denniszy.github.io/2019/04/15/math3/"/>
    <id>https://denniszy.github.io/2019/04/15/math3/</id>
    <published>2019-04-14T18:15:36.000Z</published>
    <updated>2019-04-22T16:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CRT-中国剩余定理"><a href="#CRT-中国剩余定理" class="headerlink" title="CRT(中国剩余定理)"></a>CRT(中国剩余定理)</h2><p>给你一个方程组</p><script type="math/tex; mode=display">x=a_1 \mod {m_1}</script><script type="math/tex; mode=display">x=a_2 \mod{m_2}</script><script type="math/tex; mode=display">x=a_3 \mod{m_3}</script><p>保证每个$m_i​$两两互质，求$x​$。</p><p>我们先臆想一个神奇的解出来，</p><p>设$m=\prod_{1}^{n}{m_i}$，$M_i=m / m_i$，$t_i\times M_i=1(\mod m_i)$。</p><p>得 $x=\sum_{i=1}^{n}a_i\times M_i\times t_i$</p><p>得出的$x​$是在M范围内的唯一解。</p><h3 id="假装证明"><a href="#假装证明" class="headerlink" title="假装证明"></a>假装证明</h3><p>当求$x\mod m_i$的时候，其他的$a_j\times M_j\times t_j(j\neq i)$都会有$m_i$的这个因子，所以只需考虑$a_i\times M_i\times t_i$这个式子。因为$M_i\times t_i= 1(\mod m_i)$，所以 $ x=a_i(\mod m_i) $ 。证毕。</p><p>当然这只是其中一个解啦。</p><h2 id="exCRT-留坑"><a href="#exCRT-留坑" class="headerlink" title="exCRT(留坑)"></a>exCRT(留坑)</h2><p>不保证每个$m_i​$两两互质，求$x​$。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://denniszy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="math" scheme="https://denniszy.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>MIOJ_142_数学等式题解报告</title>
    <link href="https://denniszy.github.io/2019/04/08/MIOJ142/"/>
    <id>https://denniszy.github.io/2019/04/08/MIOJ142/</id>
    <published>2019-04-08T15:46:41.000Z</published>
    <updated>2019-04-22T16:59:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><script type="math/tex; mode=display">a*{x_1}^3+b*{x_2}^3+c*{x_3}^3=d*{x_4}^3+e*{x_5}^3</script><p>给你这个式子，给你$abcde$ 这5个数，你找出满足这条式子的($x_1,x_2,x_3,x_4,x_5$)的组数。而且$x,a,b,c,d,e$均在$[-50,50]$的范围里面。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>无脑暴力$O(n^5)$是不行的。</p><p>优雅的暴力$O(n^3)$，先把左边的全部数值给暴力出来，再做右边的数，看看有没有数在左边的数值中出现过。我写了二分查找，好像也可以直接计数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num[<span class="number">1040000</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n3[<span class="number">120</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">-50</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line">        n3[i+<span class="number">50</span>]=i*i*i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a,b,c,d,e;</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld"</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">-50</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">-50</span>;j&lt;=<span class="number">50</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">-50</span>;k&lt;=<span class="number">50</span>;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(k==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                num[top]=(a*n3[i+<span class="number">50</span>]+b*n3[j+<span class="number">50</span>]+c*n3[k+<span class="number">50</span>]);</span><br><span class="line">                top++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>,tmp;</span><br><span class="line">    sort(num,num+top);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">-50</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">-50</span>;j&lt;=<span class="number">50</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            tmp=d*n3[i+<span class="number">50</span>]+e*n3[j+<span class="number">50</span>];</span><br><span class="line">            ans+=upper_bound(num,num+top,tmp)-lower_bound(num,num+top,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开num数组的时候想着是$100<em>100</em>100$，编译器已经给warning了，然后跑了一下RE，后面才发现是$101<em>101</em>101$，我佛了。</p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>这里有一个比较重要的思想：MITM(meet in the middle)</p><p><a href="https://www.zhihu.com/people/ruan-xing-zhi/activities" target="_blank" rel="noopener">阮行止聚聚的知乎</a></p><p><a href="https://ruanx.pw/post/MEET-IN-THE-MIDDLE.html" target="_blank" rel="noopener">阮行止聚聚的课件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;题意&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="题解报告" scheme="https://denniszy.github.io/categories/%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="MITM" scheme="https://denniszy.github.io/tags/MITM/"/>
    
  </entry>
  
  <entry>
    <title>MIOJ_140_贪吃的细胞题解报告</title>
    <link href="https://denniszy.github.io/2019/04/08/MIOJ140/"/>
    <id>https://denniszy.github.io/2019/04/08/MIOJ140/</id>
    <published>2019-04-08T12:12:06.000Z</published>
    <updated>2019-04-22T16:58:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://code.mi.com/problem/list/view?id=140" target="_blank" rel="noopener">传送门</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有一个细胞在‘S’处，一个细胞每吃到$k$ml培养液，就会分裂成k+1个细胞，求吃完所有培养液的时间，每一秒只有一个细胞可以动。如果不能吃完就输出-1。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>有限制的最小生成树。</p><p>首先S只能有一个度，有$k​$ml培养液的点最多有k+2个度，一个是细胞进入培养液的，吃完培养液之后就可以有k+1个细胞从这个点出去。按照这个限制跑个最小生成树即可，保证只生成一个最小生成树就是能够全部吃完。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>目前还不保证正确，mioj出锅了，还没官宣std，这是从神奇的std改过来的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) (a&gt;b?a:b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">250005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,l;</span><br><span class="line">&#125;k[maxn];</span><br><span class="line"><span class="keyword">int</span> t,m,n,lm,d[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> mm[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    k[lm].x=u;</span><br><span class="line">    k[lm].y=v;</span><br><span class="line">    k[lm].l=w;</span><br><span class="line">    lm++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    node a,b;</span><br><span class="line">    a.x=x,a.y=y,a.l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> vis[<span class="number">105</span>][<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    vis[a.x][a.y]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt;qu;</span><br><span class="line">    qu.push(a);</span><br><span class="line">    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">        a=qu.front();</span><br><span class="line">        qu.pop();</span><br><span class="line">        <span class="keyword">if</span>((mm[a.x][a.y]&gt;=<span class="string">'1'</span>&amp;&amp;mm[a.x][a.y]&lt;=<span class="string">'9'</span>)||mm[a.x][a.y]==<span class="string">'S'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.l)add(s,a.x*<span class="number">100</span>+a.y,a.l);</span><br><span class="line">        &#125;</span><br><span class="line">        b.l=a.l+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            b.x=a.x+d[i][<span class="number">0</span>];</span><br><span class="line">            b.y=a.y+d[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(b.x&gt;=<span class="number">0</span>&amp;&amp;b.x&lt;n&amp;&amp;b.y&gt;=<span class="number">0</span>&amp;&amp;b.y&lt;m&amp;&amp;!vis[b.x][b.y]&amp;&amp;mm[b.x][b.y]!=<span class="string">'#'</span>)&#123;</span><br><span class="line">                vis[b.x][b.y]=<span class="number">1</span>;</span><br><span class="line">                qu.push(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_adge</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="keyword">if</span>(mm[i][j]!=<span class="string">'#'</span>&amp;&amp;mm[i][j]!=<span class="string">'.'</span>)</span><br><span class="line">                bfs(i*<span class="number">100</span>+j,i,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fi</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[n]=r[n]==n?n:fi(r[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.l&lt;y.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> vis[<span class="number">10005</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">        r[i]=i;</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(k,k+lm,cmp);</span><br><span class="line">    <span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lm;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> fx=fi(k[i].x);</span><br><span class="line">        <span class="keyword">int</span> fy=fi(k[i].y);</span><br><span class="line">        <span class="keyword">if</span>((mm[k[i].x/<span class="number">100</span>][k[i].x%<span class="number">100</span>]-<span class="string">'0'</span>)+<span class="number">2</span>==vis[k[i].x])<span class="keyword">continue</span> ;</span><br><span class="line">        <span class="keyword">if</span>((mm[k[i].y/<span class="number">100</span>][k[i].y%<span class="number">100</span>]-<span class="string">'0'</span>)+<span class="number">2</span>==vis[k[i].y])<span class="keyword">continue</span> ;</span><br><span class="line">        <span class="keyword">if</span>(mm[k[i].x/<span class="number">100</span>][k[i].x%<span class="number">100</span>]==<span class="string">'S'</span>&amp;&amp;vis[k[i].x])<span class="keyword">continue</span> ;</span><br><span class="line">        <span class="keyword">if</span>(mm[k[i].y/<span class="number">100</span>][k[i].y%<span class="number">100</span>]==<span class="string">'S'</span>&amp;&amp;vis[k[i].y])<span class="keyword">continue</span> ;</span><br><span class="line">        <span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">            r[fx]=fy;</span><br><span class="line">            vis[k[i].x]++;</span><br><span class="line">            vis[k[i].y]++;</span><br><span class="line">            out+=k[i].l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((mm[i/<span class="number">100</span>][i%<span class="number">100</span>]&gt;=<span class="string">'1'</span>&amp;&amp;mm[i/<span class="number">100</span>][i%<span class="number">100</span>]&lt;=<span class="string">'9'</span>)||mm[i/<span class="number">100</span>][i%<span class="number">100</span>]==<span class="string">'S'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fi(i)==i)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans!=<span class="number">1</span>)out=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;out&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(mm,<span class="number">0</span>,<span class="keyword">sizeof</span>(mm));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,mm[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        lm=<span class="number">0</span>;</span><br><span class="line">        make_adge();</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="题解报告" scheme="https://denniszy.github.io/categories/%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="MST" scheme="https://denniszy.github.io/tags/MST/"/>
    
  </entry>
  
  <entry>
    <title>[POJ1475] Pushing Boxes 题解报告</title>
    <link href="https://denniszy.github.io/2019/04/06/POJ1475/"/>
    <id>https://denniszy.github.io/2019/04/06/POJ1475/</id>
    <published>2019-04-06T07:19:34.000Z</published>
    <updated>2019-04-22T16:59:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=1475" target="_blank" rel="noopener">传送门</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>推箱子，输出路径，先要求整个的路径最短，如果有多个最短路径，选推箱子的次数最少的。没有路径的输出Impossible。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>很明显，箱子要跑bfs，但跑bfs的时候要判断移动是否合法，箱子移动后，人必在箱子移动前的位置，而人要能到达箱子移动的反方向的那个格子上。</p><h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line">#.......TB##</span><br><span class="line">#..........#</span><br><span class="line">#......S...#</span><br><span class="line">############</span><br></pre></td></tr></table></figure><p>像这种的人要能到达B的右边才能推动箱子。</p><p>所以在跑箱子bfs的时候，要判断人能不能到达推动箱子的那个格子上。</p><p>明显是双bfs。</p><h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line">#T##########</span><br><span class="line">#..B.......#</span><br><span class="line">#.#######..#</span><br><span class="line">#.....S....#</span><br><span class="line">############</span><br></pre></td></tr></table></figure><p>转移到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line">#T##########</span><br><span class="line">#BS........#</span><br><span class="line">#.#######..#</span><br><span class="line">#..........#</span><br><span class="line">############</span><br></pre></td></tr></table></figure><p>人就要去到箱子的另外一边推。可能一开始想到这个感觉会有点棘手，打起来就也就那样打。</p><p>所以箱子的bfs的状态上就存箱子的座标、人的座标和答案，每次按题意更新答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> box[]=&#123;<span class="string">'N'</span>,<span class="string">'S'</span>,<span class="string">'W'</span>,<span class="string">'E'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> peo[]=&#123;<span class="string">'n'</span>,<span class="string">'s'</span>,<span class="string">'w'</span>,<span class="string">'e'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>   dx[]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>   dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,num;</span><br><span class="line"><span class="keyword">char</span> mmp[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="built_in">string</span> tmp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,px,py;</span><br><span class="line">    <span class="built_in">string</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;<span class="number">0</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;<span class="number">0</span>&amp;&amp;y&lt;=m&amp;&amp;mmp[x][y]!=<span class="string">'#'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs2</span><span class="params">(P p1,P p2)</span></span>&#123;</span><br><span class="line">    tmp=<span class="string">""</span>;</span><br><span class="line">    P st;</span><br><span class="line">    st.x=p1.px;</span><br><span class="line">    st.y=p1.py;</span><br><span class="line">    st.ans=<span class="string">""</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;P&gt;q;</span><br><span class="line">    q.push(st);</span><br><span class="line">    <span class="keyword">bool</span> v[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        P now=q.front(),nxt;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(now.x==p1.x&amp;&amp;now.y==p1.y)&#123;</span><br><span class="line">            tmp=now.ans;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            nxt = now;</span><br><span class="line">            nxt.x = now.x + dx[i];</span><br><span class="line">            nxt.y = now.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (!valid(nxt.x, nxt.y)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (nxt.x == p2.x &amp;&amp; nxt.y == p2.y) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (v[nxt.x][nxt.y]) <span class="keyword">continue</span>;</span><br><span class="line">            v[nxt.x][nxt.y] = <span class="number">1</span>;</span><br><span class="line">            nxt.ans = now.ans + peo[i];</span><br><span class="line">            q.push(nxt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">bfs1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    P st;</span><br><span class="line">    st.x=st.y=st.px=st.py=<span class="number">-1</span>;</span><br><span class="line">    st.ans=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n&amp;&amp;(st.x==<span class="number">-1</span>||st.px==<span class="number">-1</span>);i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m&amp;&amp;(st.x==<span class="number">-1</span>||st.px==<span class="number">-1</span>);j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mmp[i][j]==<span class="string">'B'</span>)&#123;</span><br><span class="line">                st.x=i;</span><br><span class="line">                st.y=j;</span><br><span class="line">                mmp[i][j]=<span class="string">'.'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mmp[i][j]==<span class="string">'S'</span>)&#123;</span><br><span class="line">                st.px=i;</span><br><span class="line">                st.py=j;</span><br><span class="line">                mmp[i][j]=<span class="string">'.'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;P&gt;q;</span><br><span class="line">    q.push(st);</span><br><span class="line">    <span class="keyword">bool</span> v[<span class="number">25</span>][<span class="number">25</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">    <span class="built_in">string</span> ans = <span class="string">"Impossible."</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> cntans=<span class="number">0x3f3f3f3f</span>,cnt=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        P prv,now=q.front(),nxt;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(mmp[now.x][now.y]==<span class="string">'T'</span>)&#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> cntnow=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> len = now.ans.length();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i =<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(now.ans[i]&gt;=<span class="string">'A'</span>&amp;&amp;now.ans[i]&lt;=<span class="string">'Z'</span>)cntnow++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cntnow&lt;cntans||(cntnow==cntans&amp;&amp;len&lt;cnt))&#123;</span><br><span class="line">                ans = now.ans;</span><br><span class="line">                cntans=cntnow;</span><br><span class="line">                cnt=len;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            nxt=now;</span><br><span class="line">            nxt.x = now.x + dx[i];</span><br><span class="line">            nxt.y = now.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span>(!valid(nxt.x,nxt.y))<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(v[nxt.x][nxt.y][i])<span class="keyword">continue</span>;</span><br><span class="line">            prv = now;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">3</span>)prv.y=now.y<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">2</span>)prv.y=now.y+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>)prv.x=now.x<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> prv.x=now.x+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!bfs2(prv,now))<span class="keyword">continue</span>;</span><br><span class="line">            v[nxt.x][nxt.y][i]=<span class="number">1</span>;</span><br><span class="line">            nxt.ans=now.ans+tmp+box[i];</span><br><span class="line">            nxt.px=now.x;</span><br><span class="line">            nxt.py=now.y;</span><br><span class="line">            q.push(nxt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;(mmp[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Maze #"</span>&lt;&lt;++num&lt;&lt;<span class="built_in">endl</span>&lt;&lt;bfs1()&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&amp;&amp;n&amp;&amp;m)&#123;</span><br><span class="line">        work();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷<a href="https://item.jd.com/20111313.html" target="_blank" rel="noopener">蓝书</a>真虐心，基础不熟练啊，加油加油。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="题解报告" scheme="https://denniszy.github.io/categories/%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="BFS" scheme="https://denniszy.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>golang</title>
    <link href="https://denniszy.github.io/2019/04/01/golang1/"/>
    <id>https://denniszy.github.io/2019/04/01/golang1/</id>
    <published>2019-04-01T06:06:55.000Z</published>
    <updated>2019-04-22T16:57:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装go环境"><a href="#安装go环境" class="headerlink" title="安装go环境"></a>安装go环境</h2><p><a href="https://golang.org" target="_blank" rel="noopener">go的官方网站</a></p><p>好像有墙(逃</p><p>不愧是出自404公司之手的与语言啊</p><p>我大arch系，直接pacman装就好了(逃</p><p>可以来<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">这里</a>下，一直不知道google.cn是谁在维护的，但是能用。</p><h2 id="linux设置"><a href="#linux设置" class="headerlink" title="linux设置"></a>linux设置</h2><p>在/etc/profile 中增加一下设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=/usr/lib/go //这是你的go所在的目录</span><br><span class="line"><span class="built_in">export</span> GOPATH=~/golib:~/goproject</span><br><span class="line"><span class="built_in">export</span> GOBIN=~/gobin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin:<span class="variable">$GOBIN</span></span><br></pre></td></tr></table></figure><p>其实很多还是看不懂的（留坑）</p><p>修改完之后，输入以下，使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;安装go环境&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://denniszy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="golang" scheme="https://denniszy.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>心协日程表</title>
    <link href="https://denniszy.github.io/2019/03/28/ggxx3/"/>
    <id>https://denniszy.github.io/2019/03/28/ggxx3/</id>
    <published>2019-03-28T08:59:57.000Z</published>
    <updated>2019-04-22T17:01:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>下面都是开始事务的时间点，并非持续的时间段</p><div class="table-container"><table><thead><tr><th style="text-align:left">时间点</th><th>事务</th></tr></thead><tbody><tr><td style="text-align:left">活动前四周</td><td>活动部开始筹备活动</td></tr><tr><td style="text-align:left">活动前两周半</td><td>秘书部申请教室</td></tr><tr><td style="text-align:left">活动前两周</td><td>宣传部做海报/ppt</td></tr><tr><td style="text-align:left">活动前一周</td><td>心联部打印时长条</td></tr><tr><td style="text-align:left">活动当天</td><td>拿物资/资源准备</td></tr><tr><td style="text-align:left">活动现场</td><td>拍照</td></tr><tr><td style="text-align:left">活动结束</td><td>合照</td></tr><tr><td style="text-align:left">活动后</td><td>新闻稿/推文</td></tr></tbody></table></div><p>下面是神奇的活动</p><p>学生会主办，心协协办的快乐运动活动?(雾(log:2019/03/28)</p><div class="table-container"><table><thead><tr><th style="text-align:left">时间点</th><th>事务</th></tr></thead><tbody><tr><td style="text-align:left">活动前六周</td><td>每个部门策划活动</td></tr><tr><td style="text-align:left">活动前四周</td><td>决定最终方案给主办方</td></tr><tr><td style="text-align:left">活动前三周</td><td>统计报名资料/安排道具</td></tr><tr><td style="text-align:left">活动前两周</td><td>拉群/通知注意事项/解答问题</td></tr><tr><td style="text-align:left">活动前两周</td><td>线下宣传</td></tr><tr><td style="text-align:left">活动现场</td><td>拍照</td></tr><tr><td style="text-align:left">活动后</td><td>新闻稿/推文</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;下面都是开始事务的时间点，并非持续
        
      
    
    </summary>
    
      <category term="广工心协" scheme="https://denniszy.github.io/categories/%E5%B9%BF%E5%B7%A5%E5%BF%83%E5%8D%8F/"/>
    
      <category term="工作记录" scheme="https://denniszy.github.io/categories/%E5%B9%BF%E5%B7%A5%E5%BF%83%E5%8D%8F/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="docs" scheme="https://denniszy.github.io/tags/docs/"/>
    
  </entry>
  
  <entry>
    <title>各种数学推论</title>
    <link href="https://denniszy.github.io/2019/03/17/mathmix/"/>
    <id>https://denniszy.github.io/2019/03/17/mathmix/</id>
    <published>2019-03-17T13:50:37.000Z</published>
    <updated>2019-04-22T16:58:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><h3 id="lim-limits-n-to-inf-1-frac-x-n-n-e-x"><a href="#lim-limits-n-to-inf-1-frac-x-n-n-e-x" class="headerlink" title="$\lim \limits_{n \to inf} (1+\frac{x}{n})^n=e^x$"></a>$\lim \limits_{n \to inf} (1+\frac{x}{n})^n=e^x$</h3><p>要证上式即是要证下式</p><script type="math/tex; mode=display">n*ln(1+\frac{x}{n})=x</script><p>令$k=\frac{1}{n}$，使得$n=\frac{1}{k}​$</p><script type="math/tex; mode=display">\frac{ln(1+x*k)}{k}=x</script><p>下面左式来个洛必达$\frac{0}{0}$</p><script type="math/tex; mode=display">\frac{x}{1+x*k}=x</script><p>证毕</p><h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><p><a href="https://blog.csdn.net/bigtiao097/article/details/77242624" target="_blank" rel="noopener">转自zhaozhengcc</a></p><script type="math/tex; mode=display">C_n^m = C _{n-1}^{m-1}+C _{n-1}^{m}</script><script type="math/tex; mode=display">mC_n^m = nC _{n-1}^{m-1}</script><script type="math/tex; mode=display">C_n^0+C_n^1+C_n^2+……+C_n^n = 2^n</script><script type="math/tex; mode=display">1C_n^1+2C_n^2+3C_n^3+……+nC_n^n =n2^{n-1}</script><script type="math/tex; mode=display">1^2C_n^1+2^2C_n^2+3^2C_n^3+……+n^2C _n^n =n(n+1)2^{n-2}</script><script type="math/tex; mode=display">\frac{C_n^1}{1}-\frac{C_n^2}{2}+\frac{C_n^3}{3}+……+(-1)^{n-1}\frac{C _n^n}{n} =1 + \frac{1}{2}+ \frac{1}{3}+……+ \frac{1}{n}</script><script type="math/tex; mode=display">(C_n^0)^2+(C_n^1)^2+(C_n^2)^2+……+(C _n^n)^2 = C_{2n}^n</script><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><h3 id="通项公式"><a href="#通项公式" class="headerlink" title="通项公式"></a>通项公式</h3><script type="math/tex; mode=display">f_n=\frac{1}{\sqrt{5}}((\frac{1+\sqrt{5}}{2})^n-(\frac{1-\sqrt{5}}{2})^n)</script><h3 id="前n项求和公式"><a href="#前n项求和公式" class="headerlink" title="前n项求和公式"></a>前n项求和公式</h3><script type="math/tex; mode=display">S_n=f_{n+2}-1=\sum_{i=1}^{n}f_i</script><h3 id="不知道怎么来的公式"><a href="#不知道怎么来的公式" class="headerlink" title="不知道怎么来的公式"></a>不知道怎么来的公式</h3><script type="math/tex; mode=display">f_{2n}=f_{n+1}*f_{n}+f_n*f_{n-1}=f_{n+1}*f_{n}+f_n*(f_{n+1}-f_{n})</script><script type="math/tex; mode=display">f_{2n+1}=f_{n+1}*f_{n+1}+f_n*f_n</script><p>可能会比矩阵快速幂要快</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;极限&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://denniszy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="math" scheme="https://denniszy.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>manjaro折腾记</title>
    <link href="https://denniszy.github.io/2019/03/12/manjaro1/"/>
    <id>https://denniszy.github.io/2019/03/12/manjaro1/</id>
    <published>2019-03-12T00:42:55.000Z</published>
    <updated>2019-05-01T15:31:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过度过程"><a href="#过度过程" class="headerlink" title="过度过程"></a>过度过程</h2><p>ubuntu-&gt;deepin-&gt;manjaro-deepin-&gt;manjaro kde</p><h2 id="在deepin过度到manjaro-deepin"><a href="#在deepin过度到manjaro-deepin" class="headerlink" title="在deepin过度到manjaro-deepin"></a>在deepin过度到manjaro-deepin</h2><p>deepin的dde有丶好用<del>（其实是不想 去重新熟悉一个新的环境，例如KDE）</del>真香。</p><h2 id="在windows下烧U盘"><a href="#在windows下烧U盘" class="headerlink" title="在windows下烧U盘"></a>在windows下烧U盘</h2><p> 要用<a href="https://rufus.ie/" target="_blank" rel="noopener">refus</a>，要用DD模式烧。用Universal USB Installer烧的话，会无法引导。</p><p>学校的drcom会占用XXshellXXX.dll，忘记具体名称了，会导致refus使用不了，关了就完事</p><h2 id="源"><a href="#源" class="headerlink" title="源"></a>源</h2><h3 id="国内源"><a href="#国内源" class="headerlink" title="国内源"></a>国内源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China  //改为国内源,在n弹出的框中选一个就好</span><br><span class="line">sudo pacman -Syy  //更新数据源</span><br></pre></td></tr></table></figure><h3 id="archlinuxcn"><a href="#archlinuxcn" class="headerlink" title="archlinuxcn"></a>archlinuxcn</h3><p>修改/etc/pacman.conf，在最后添加</p><p>下面选一个就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch  //添加清华源</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch //添加中科大源</span><br></pre></td></tr></table></figure><p>之后要添加PGP签名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><p>刷新缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syy</span><br></pre></td></tr></table></figure><p>我校园网用清华源能跑满带宽，中科大的不行，中科大的更新速度略快于清华。</p><h2 id="安装搜狗拼音"><a href="#安装搜狗拼音" class="headerlink" title="安装搜狗拼音"></a>安装搜狗拼音</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx-im</span><br><span class="line">sudo pacman -S fcitx-configtool</span><br><span class="line">sudo pacman -S fcitx-sogoupinyin</span><br></pre></td></tr></table></figure><p>修改配置文件~/.xprofile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=”@im=fcitx”</span><br></pre></td></tr></table></figure><h2 id="其他很多都能在manjaro的添加-删除软件里面找"><a href="#其他很多都能在manjaro的添加-删除软件里面找" class="headerlink" title="其他很多都能在manjaro的添加/删除软件里面找"></a>其他很多都能在manjaro的添加/删除软件里面找</h2><p>gugugu</p><h2 id="KDE"><a href="#KDE" class="headerlink" title="KDE"></a>KDE</h2><h3 id="baloo-file-extractor"><a href="#baloo-file-extractor" class="headerlink" title="baloo_file_extractor"></a>baloo_file_extractor</h3><p>就是这个家伙，总把我的CPU跑12%，用久之后占用3G的共享内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">mv /usr/bin/baloo_file_extractor /usr/bin/baloo_file_extractor.orig</span><br><span class="line">ln -s /bin/<span class="literal">true</span> /usr/bin/baloo_file_extractor</span><br></pre></td></tr></table></figure><p>这就完事</p><h2 id="ibus-rime"><a href="#ibus-rime" class="headerlink" title="ibus-rime"></a>ibus-rime</h2><p>fcitx后台也好像挺费CPU的，所以也换到ibus了，rime根据github上的来配置简体中文即可（要看看文档了）</p><hr><h1 id="updata：2019-04-06"><a href="#updata：2019-04-06" class="headerlink" title="updata：2019-04-06"></a>updata：2019-04-06</h1><p>我又从kde跳回deepin了，kde的设置太多了</p><hr><h1 id="update-2019-05-01"><a href="#update-2019-05-01" class="headerlink" title="update : 2019-05-01"></a>update : 2019-05-01</h1><p>尝试了三个flagship版(kde,xfce,gnome)的manjaro和15.10的deepin，本来想用回deepinos的，第一次装wechat什么的都可以的，第二次装就说依赖出问题了，不愧是基于debian的啊，然后又装回来了，晕死。不愧是基于arch的manjaro，xjb装就可以，很少考虑依赖的问题。</p><h2 id="ibus"><a href="#ibus" class="headerlink" title="ibus"></a>ibus</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ibus ibus-rime</span><br></pre></td></tr></table></figure><p>修改配置文件~/.xprofile</p><p>添加下面几行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=ibus</span><br><span class="line">export QT_IM_MODULE=ibus</span><br><span class="line">export XMODIFIERS=@im=ibus</span><br><span class="line">ibus-daemon -d -x</span><br></pre></td></tr></table></figure><p>修改配置文件~/.bashrc</p><p>添加下面几行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=ibus</span><br><span class="line">export XMODIFIERS=@im=ibus</span><br><span class="line">export QT_IM_MODULE=ibus</span><br></pre></td></tr></table></figure><p>感觉操作冗余了，dalao们教一教啊。</p><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下面两行选一个就行了，第一行为curl，第二行为wget，没装的自己装一下就行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br><span class="line">sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"</span><br></pre></td></tr></table></figure><p>.zshrc</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ZSH_THEME</span>=<span class="string">"agnoster"</span></span><br><span class="line"><span class="attr">plugins</span>=(git autojump zsh-autosuggestions zsh-syntax-highlighting archlinux)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;过度过程&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="折腾笔记" scheme="https://denniszy.github.io/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://denniszy.github.io/tags/linux/"/>
    
      <category term="manjaro" scheme="https://denniszy.github.io/tags/manjaro/"/>
    
  </entry>
  
  <entry>
    <title>Bayes&#39;theorem</title>
    <link href="https://denniszy.github.io/2019/03/10/bayes/"/>
    <id>https://denniszy.github.io/2019/03/10/bayes/</id>
    <published>2019-03-10T07:31:21.000Z</published>
    <updated>2019-04-22T16:56:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h3><script type="math/tex; mode=display">P(A_i|B)=\frac{P(A_i)P(B|A_i)}{\sum_{j=1}^{n}P(A_j)P(B|A_j)}</script><p>一见面先抛公式。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>当公式左边的概率难以求得的时候，我们可以通过右面的公式求得左边的值，有点像反演的思想。</p><h4 id="推-倒-导"><a href="#推-倒-导" class="headerlink" title="推 倒 导"></a>推 <del>倒</del> 导</h4><p>前置技能</p><h5 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h5><p>当发生事件X的时候，发生事件Y的概率。</p><p>即是当两件事情同时发生的概率除以发生X发生的概率。</p><script type="math/tex; mode=display">P(Y|X)=\frac{P(XY)}{P(X)}</script><h5 id="全概率公式"><a href="#全概率公式" class="headerlink" title="全概率公式"></a>全概率公式</h5><p>将样本空间划分成$n$件相互独立事件，求事件X的发生的概率，就是样本空间每件独立事件与事件X同时发生的概率乘每件事件发生的概率，然后全部加起来即可。</p><script type="math/tex; mode=display">P(X)=\sum_{i=1}^{n} {P(Y_i)P(X|Y_i)}</script><h5 id="开冲！"><a href="#开冲！" class="headerlink" title="开冲！"></a>开冲！</h5><script type="math/tex; mode=display">P(A_i|B)=\frac{P(A_{i}B)}{P(B)}=\frac{P(A_i)P(B|A_i)}{\sum_{j=1}^{n}P(A_j)P(B|A_j)}</script><p>就是下面用全概率公式即可推到得出贝叶斯公式。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;贝叶斯公式&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://denniszy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="math" scheme="https://denniszy.github.io/tags/math/"/>
    
      <category term="Probability theory" scheme="https://denniszy.github.io/tags/Probability-theory/"/>
    
  </entry>
  
</feed>
